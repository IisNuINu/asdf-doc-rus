#
# NuINu <don't@send.my>, 2019.
#
#. extracted from in/DescrLargeSystems.htm
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-07-05 09:42+0300\n"
"PO-Revision-Date: 2019-07-11 12:11+0300\n"
"Last-Translator: NuINu <don't@send.my>\n"
"Language-Team: Russian <don't@send.my>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Gtranslator 2.91.7\n"
"Plural-Forms: nplurals=5; plural=n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : "
"4;\n"

#: in/DescrLargeSystems.htm:21
msgid ""
"<html><head>\n"
"<meta http-equiv=\"content-type\" content=\"text/html; "
"charset=windows-1251\">\n"
"<style language=\"css\" content=\"text/css\">\n"
"<!--\n"
"h1   { font-size: 14pt; font-weight: bold; }\n"
"h2   { font-size: 14pt; font-weight: bold; }\n"
"h3   { font-size: 12pt; font-weight: bold; }\n"
"body { font-size: 12pt; font-weight: normal; }\n"
"pre  { font-size: 10pt; }\n"
"tt   { font-size: 10pt; }\n"
"code { font-size: 10pt; }\n"
"-->\n"
"</style>\n"
"<title>``The Description of Large Systems'' \n"
"by Kent Pitman (September 1984)</title>\n"
"<meta http-equiv=\"keywords\" content=\"Compilation, Large Systems, Lisp, "
"System Maintenance\">\n"
"<meta http-equiv=\"author\" content=\"Kent M. Pitman\">\n"
"<meta name=\"robots\" content=\"index, nofollow\">\n"
"</head>\n"
"<body vlink=\"#7700bb\" text=\"#440077\" link=\"#7700bb\" bgcolor=\"#eeeeff"
"\" alink=\"#ff0000\">"
msgstr ""
"<html><head>\n"
"<meta http-equiv=\"content-type\" content=\"text/html; charset=utf8\">\n"
"<style language=\"css\" content=\"text/css\">\n"
"<!--\n"
"h1   { font-size: 14pt; font-weight: bold; }\n"
"h2   { font-size: 14pt; font-weight: bold; }\n"
"h3   { font-size: 12pt; font-weight: bold; }\n"
"body { font-size: 12pt; font-weight: normal; }\n"
"pre  { font-size: 10pt; }\n"
"tt   { font-size: 10pt; }\n"
"code { font-size: 10pt; }\n"
"-->\n"
"</style>\n"
"<title>``Описание Больших Систем(The Description of Large Systems)'' \n"
"by Kent Pitman (September 1984)</title>\n"
"<meta http-equiv=\"keywords\" content=\"Compilation, Large Systems, Lisp, "
"System Maintenance\">\n"
"<meta http-equiv=\"author\" content=\"Kent M. Pitman\">\n"
"<meta name=\"robots\" content=\"index, nofollow\">\n"
"</head>\n"
"<body vlink=\"#7700bb\" text=\"#440077\" link=\"#7700bb\" bgcolor=\"#eeeeff"
"\" alink=\"#ff0000\">"

#: in/DescrLargeSystems.htm:23
msgctxt "in/DescrLargeSystems.htm:23"
msgid "<font color=\"green\">"
msgstr ""

#: in/DescrLargeSystems.htm:25
msgid "<h1 align=\"center\">The Description of Large Systems</h1>"
msgstr "<h1 align=\"center\">Описание Больших Систем</h1>"

#: in/DescrLargeSystems.htm:32
msgid ""
"<p align=\"center\">\n"
"<b>This paper was published in hardcopy as<br>\n"
"MIT AI Memo 801<br>\n"
"September, 1984\n"
"</b>\n"
"</p>"
msgstr ""

#: in/DescrLargeSystems.htm:45
msgid ""
"<p>\n"
" The substance of the original text appears in normal fonting,\n"
" though a small number of out-and-out typos were corrected.\n"
" Oddities of spelling that were the custom of the time\n"
" (either generally, or just for me) were left alone.\n"
" Some formatting of headings and tables was adjusted slightly for HTML.\n"
" Any new text that has been added appears\n"
" bracketed and in color green; such text is intended to\n"
" help clarify the historical context, since considerable time \n"
" passed between the time this paper was published and the time I \n"
" converted it to HTML.\n"
"</p>"
msgstr ""

#: in/DescrLargeSystems.htm:52
msgid ""
"<p>\n"
"To avoid some confusion with the Common Lisp <tt>SYSTEM</tt> package,\n"
"I changed all references from the <tt>SYSTEM</tt> package to be references\n"
"instead to a <tt>SYSDEF</tt> package instead.  Such references are made "
"green\n"
"to remind the reader that the original paper was different on this point.\n"
"</p>"
msgstr ""
"<p>\n"
"Чтобы избежать путаницы с пакетом Common Lisp <tt>SYSTEM</tt>,\n"
"Я изменил все ссылки из пакета <tt>SYSTEM</tt> на ссылки пакета <tt>SYSDEF</"
"tt>.\n"
"Такие ссылки выделены зеленым цветом, чтобы напомнить читателю, что "
"оригинальный\n"
"документ отличается в данном месте.\n"
"</p>"

#: in/DescrLargeSystems.htm:61
msgid ""
"<p>\n"
"Special thanks to <a href=\"mailto:amoroso@mclink.it\">Paolo Amoroso</a>\n"
"for helping to reconstruct this document by typing in its text anew from\n"
"the hardcopy, since its original source is believed to have been lost.\n"
"He also provided much useful help in reviewing my notes and code updates.\n"
"<br>\n"
"--<a href=\"http://www.nhplace.com/kent/contact-kent.html\"><i>Kent Pitman</"
"i></a>, 23-Jan-2001\n"
"</p>"
msgstr ""

#: in/DescrLargeSystems.htm:67
msgid ""
"<p align=\"center\">\n"
"<a href=\"#original-start\">Annotated original document follows.</a><br>\n"
"<a href=\"http://www.nhplace.com/kent/Papers/index.html\"><i>Click here for "
"an index \n"
"of other titles by Kent Pitman.</i></a>\n"
"</p>"
msgstr ""

#: in/DescrLargeSystems.htm:69
msgctxt "in/DescrLargeSystems.htm:69"
msgid "</font>"
msgstr ""

#: in/DescrLargeSystems.htm:72
msgctxt "in/DescrLargeSystems.htm:72"
msgid "<hr>"
msgstr ""

#: in/DescrLargeSystems.htm:89
msgid ""
"<table width=\"100%\">\n"
"<tbody><tr>\n"
"<td colspan=\"2\" align=\"center\">\n"
"Massachusetts Institute of Technology<br>\n"
"Artificial Intelligence Laboratory\n"
"</td>\n"
"</tr>\n"
"<tr>\n"
"<td valign=\"top\" align=\"left\">\n"
"A.I. Memo No. 801\n"
"</td>\n"
"<td valign=\"top\" align=\"right\">\n"
"September, 1984\n"
"</td>\n"
"</tr>\n"
"</tbody></table>"
msgstr ""

#: in/DescrLargeSystems.htm:91
msgid ""
"<a name=\"original-start\"><h1 align=\"center\">The Description of Large "
"Systems</h1></a>"
msgstr ""
"<a name=\"original-start\"><h1 align=\"center\">Описание Больших Систем</"
"h1></a>"

#: in/DescrLargeSystems.htm:93
msgid "<p align=\"center\"><b>Kent M. Pitman</b></p>"
msgstr ""

#: in/DescrLargeSystems.htm:95
msgid "<h2 align=\"center\"><i>Abstract</i></h2>"
msgstr "<h2 align=\"center\"><i>Аннотация</i></h2>"

#: in/DescrLargeSystems.htm:103
msgid ""
"<p>\n"
"In this paper, we discuss the problems associated with the description and\n"
"manipulation of large systems when their sources are not maintained as\n"
"single files.  We show why and how tools that address these issues, such as\n"
"<a name=\"footref1a\">Unix</a><a href=\"#footnote1\">[1]</a> <tt>MAKE</tt> "
"and \n"
"Lisp Machine <code>DEFSYSTEM</code>, have evolved.\n"
"</p>"
msgstr ""
"<p>\n"
"В этой статье мы обсуждаем проблемы, связанные с описанием и "
"манипулированием\n"
"большими системами, когда их исходный код не содержится в одном файле.  Мы "
"покажем,\n"
"почему и как развивались инструменты для решения этих проблем, такие как\n"
"<a name=\"footref1a\">Unix</a><a href=\"#footnote1\">[1]</a> <tt>MAKE</tt> "
"и \n"
"Lisp Machine <code>DEFSYSTEM</code>.\n"
"</p>"

#: in/DescrLargeSystems.htm:112
msgid ""
"<p>\n"
"Existing formalisms suffer from the problem that their syntax is not easily\n"
"separable from their functionality.  In programming languages, standard\n"
"\"calling conventions\" exist to insulate the caller of a function from the\n"
"syntactic details of how that function was defined, but until now no such\n"
"conventions have existed to hide consumers of program systems from the\n"
"details of how those systems were specified.\n"
"</p>"
msgstr ""
"<p>\n"
"Существующие формализмы страдают от проблемы, заключающейся в том, что их\n"
"синтаксис нелегко отделить от их функциональности.  В языках "
"программирования\n"
"существуют стандартные \"соглашения о вызовах(calling conventions)\", "
"чтобы \n"
"изолировать(отделить) вызывающую функцию от синтаксических деталей того, "
"как\n"
"эта функция была определена, но до сих пор не существует таких соглашений, "
"которые\n"
"бы скрыли от пользователей программных систем детали того, как эти системы\n"
"были описаны(определены).\n"
"</p>"

#: in/DescrLargeSystems.htm:119
msgid ""
"<p>\n"
"We propose a low-level data abstraction which can support notations such as\n"
"those used by <tt>MAKE</tt> and <code>DEFSYSTEM</code> without requiring "
"that the introduction of\n"
"a new notation be accompanied by a completely different set of tools for\n"
"instantiating or otherwise manipulating the resulting system.\n"
"</p>"
msgstr ""
"<p>\n"
"Мы предлагаем низкоуровневую абстракцию данных, которая может поддерживать "
"нотации,\n"
"такие как <tt>MAKE</tt> и <code>DEFSYSTEM</code>, не требуя, чтобы введение "
"новой\n"
"нотации сопровождалось совершенно другим набором инструментов для создания "
"экземпляров\n"
"или иного манипулирования получающейся системой.\n"
"</p>"

#: in/DescrLargeSystems.htm:124
msgid ""
"<p>\n"
"Lisp is used for presentation, but the issues are not idiosyncratic to\n"
"Lisp.\n"
"</p>"
msgstr ""
"<p>\n"
"Lisp используется для презентации, но проблемы не являются касающимися "
"только\n"
"Lisp.\n"
"</p>"

#: in/DescrLargeSystems.htm:126
msgctxt "in/DescrLargeSystems.htm:126"
msgid "<hr width=\"20%\" align=\"left\">"
msgstr ""

#: in/DescrLargeSystems.htm:130
msgid ""
"<p>\n"
"Keywords: Compilation, Large Systems, Lisp, System Maintenance.\n"
"</p>"
msgstr ""

#: in/DescrLargeSystems.htm:132
msgctxt "in/DescrLargeSystems.htm:132"
msgid "<hr width=\"20%\" align=\"left\">"
msgstr ""

#: in/DescrLargeSystems.htm:144
msgid ""
"<font size=\"3\">\n"
"<div class=\"footnote\">\n"
"<p>\n"
"This report describes research done at the Artificial Intelligence\n"
"Laboratory of the Massachusetts Institute of Technology. Support for the\n"
"laboratory's artificial intelligence research has been provided in part by\n"
"the Advanced Research Projects Agency of the Department of Defense under\n"
"Office of Naval Research contract N00014-80-C0505, in part by National\n"
"Science Foundation grants MCS-7912179 and MCS-8117633, and in part by the\n"
"IBM Corporation.\n"
"</p>"
msgstr ""

#: in/DescrLargeSystems.htm:151
msgid ""
"<p>\n"
"The views and conclusions contained in this document are those of the\n"
"authors and should not be interpreted as representing the policies,\n"
"expressed or implied, of the Department of Defense, of the National Science\n"
"Foundation, or of the IBM Corporation.\n"
"</p>"
msgstr ""

#: in/DescrLargeSystems.htm:157
msgid ""
"<p align=\"center\">\n"
"© Massachusetts Institute of Technology, 1984<br>\n"
"</p>\n"
"</div>\n"
"</font>"
msgstr ""

#: in/DescrLargeSystems.htm:160
msgctxt "in/DescrLargeSystems.htm:160"
msgid "<hr width=\"50%\" align=\"center\">"
msgstr ""

#: in/DescrLargeSystems.htm:162
msgid "<h2>I. Introduction</h2>"
msgstr "<h2>I. Введение</h2>"

#: in/DescrLargeSystems.htm:169
msgid ""
"<p>\n"
"For reasons of modularity and editing convenience, the source code for\n"
"large program systems is rarely maintained in a single file.  Instead, it\n"
"is typically broken into a number of smaller files which together make up\n"
"the system.\n"
"</p>"
msgstr ""
"<p>\n"
"Из соображения модульности и удобства редактирования исходный код для "
"больших\n"
"программных систем редко храниться в одном файле.  Вместо этого он обычно "
"разбивается\n"
"на несколько небольших файлов, которые все вместе составляют единую "
"систему.\n"
"</p>"

#: in/DescrLargeSystems.htm:178
msgid ""
"<p>\n"
"Since system tools such as editors, compilers, loaders and printers tend to\n"
"be designed to deal with files rather than systems, some extra mechanism is\n"
"generally required in order to allow their users to deal with systems that\n"
"span multiple files.  In the next section, we trace the evolution of tools\n"
"for system building, identifying the important issues that early tools\n"
"sought to address.\n"
"</p>"
msgstr ""
"<p>\n"
"Поскольку системные инструменты, такие как редакторы, компиляторы, "
"загрузчики и\n"
"притнеры, как правило предназначены для работы с файлами, а не с системами,\n"
"обычно требуется какой-то дополнительный механизм, чтобы позволить их "
"пользователям\n"
"иметь дело с системами, которые охватывают несколько файлов. В следующем "
"разделе\n"
"мы проследим эволюцию инструментов для построения системы, выявив важные "
"проблемы,\n"
"которые пытались решить ранние инструменты.\n"
"</p>"

#: in/DescrLargeSystems.htm:190
msgid ""
"<p>\n"
"We then present an overview of two system specification languages, \n"
"<a name=\"footref1b\">Unix</a><a href=\"#footnote1\">[1]</a> <tt>MAKE</tt> "
"and Lisp Machine <code>DEFSYSTEM</code>, which illustrate the level of "
"technology\n"
"currently available to programmers for dealing with these issues.  Most\n"
"criticisms that can be made about existing tools are at the syntactic\n"
"level.  The tools address the right issues, but their syntax can be a\n"
"stumbling block, inhibiting the expression of certain kinds of relations\n"
"and the ability to make extensions to the tools' original functionality.\n"
"It is not possible to vary the syntax without rewriting most or all of the\n"
"underlying support.\n"
"</p>"
msgstr ""
"<p>\n"
"Затем мы представим обзор двух языков спецификации(описания) систем, \n"
"<a name=\"footref1b\">Unix</a><a href=\"#footnote1\">[1]</a> <tt>MAKE</tt> "
"и \n"
"Lisp Machine <code>DEFSYSTEM</code>, которые иллюстрируют уровень "
"технлогий,\n"
"доступных в настоящее время(1984 год) программистам для решения этих "
"проблем.\n"
"Большинство критических замечаний, которые могут быть сделаны в отношении\n"
"существующих инструментов, находятся на синтаксическом уровне.  Инструменты\n"
"решают правильные проблемы, но их синтаксис может быть камнем преткновения,\n"
"препятствющим выражению определенных видов отношений и возможности "
"расширять\n"
"первоначальную функциональность инструментов. Невозомжно изменить синтаксис\n"
"без переписывания большей части или всей основы инструмента поддержки .\n"
"</p>"

#: in/DescrLargeSystems.htm:197
msgid ""
"<p>\n"
"We conclude by proposing an organizational strategy which decouples syntax\n"
"and functionality.  This makes it possible for a programmer to develop\n"
"alternate system maintenance tools without having to reimplement every\n"
"aspect of the original tools.\n"
"</p>"
msgstr ""
"<p>\n"
"В заключении мы предлагаем организационную стратегию, которая разделяет "
"синтаксис\n"
"и функциональность.  Это позволяет программисту разрабатывать "
"альтернативные \n"
"иструменты обслуживания системы, не переопределяя каждый аспект "
"оригинальных\n"
"инструментов.\n"
"</p>"

#: in/DescrLargeSystems.htm:210
msgid ""
"<p>\n"
"To make the discussion more concrete, we will give several examples of\n"
"specification languages that could be built under the proposed framework.\n"
"However, it is important to understand that the purpose of this paper is\n"
"not to argue in favor of any particular notation.  Rather, we wish to\n"
"illustrate that our proposed organizational strategy establishes an\n"
"appropriate framework for developing alternate notations such as these.  \n"
"As <a href=\"#appendix-b\">an appendix</a>,\n"
"we offer a sample implementation of these specification\n"
"languages in <tt>Lisp Machine Lisp</tt> in order to further clarify any "
"issues left\n"
"vague by the examples used in the body of the paper.\n"
"</p>"
msgstr ""
"<p>\n"
"Чтобы сделать обсуждение более конкретным, мы приведем несколько примеров\n"
"языков спецификаций, которые могут быть построены в рамках предлагаемой\n"
"конструкции. Тем не менее, важно понимать, что целью этой статьи не "
"является\n"
"аргументация в пользу какой-либо конкретной записи. Скорее мы хотим "
"проилюстрировать,\n"
"что предлагаемая нами организационная стратегия устанавливает подходящую\n"
"конструкцию для разработки альтернативных обозначений, подобных этим.  \n"
"В качестве <a href=\"#appendix-b\">приложения</a>,\n"
"мы предлагаем пример реализации этих языков спецификаций в <tt>Lisp Machine "
"Lisp</tt>,\n"
"чтобы дополнительно прояснить любые проблемы, оставшиеся не освещенными "
"примерами,\n"
"использованными в основной части статьи.\n"
"</p>"

#: in/DescrLargeSystems.htm:212
msgid "<h2>II. Background</h2>"
msgstr "<h2>II. Предпосылки(происхождение)</h2>"

#: in/DescrLargeSystems.htm:220
msgid ""
"<p>\n"
"There are a number of standard maintenance operations performed on systems.\n"
"These operations include (but are not limited to) the creation of hardcopy\n"
"listings, copying or renaming the files which make up the source of the\n"
"system, loading uncompiled source files (e.g. into a lisp interpreter), and\n"
"compiling changed files.\n"
"</p>"
msgstr ""
"<p>\n"
"Существует ряд стандартных операций обслуживания систем. Эти операции "
"включают\n"
"(но не ограничиваются ими) создание распечаток, копирование или "
"переименование\n"
"файлов, составляющих исходный код системы, загрузку не скомпилированных "
"исходных\n"
"файлов (например в интерпретатор  lisp), и компиляция изменённых файлов.\n"
"</p>"

#: in/DescrLargeSystems.htm:227
msgid ""
"<p>\n"
"For a system maintained as a single monolithic file, it is reasonably\n"
"obvious how most of these maintenance operations can be performed.  Getting\n"
"hardcopy of the system source is as simple as getting hardcopy of any other\n"
"file; compiling the system is as simple as compiling any simple file.\n"
"</p>"
msgstr ""
"<p>\n"
"Для системы, поддерживаемой в виде единого монолитного файла, достаточно "
"очевидно,\n"
"как можно выполнить большинство этих операций обслуживания.  Получить "
"печатную\n"
"копию исходного кода системы, так же просто как получить бумажную копию "
"любого\n"
"другого файла; Компилировать систему так же просто, как компилировать любой "
"простой\n"
"файл.\n"
"</p>"

#: in/DescrLargeSystems.htm:237
msgid ""
"<p>\n"
"For a more complex system, where the source spans more than one file,\n"
"performing these operations may be considerably more complicated.  In that\n"
"case, to get a listing, one must ask that each of the source files be\n"
"printed.  To compile the system, one must ask that each of the source files\n"
"be compiled and, in some cases, that the compilation occur in a certain\n"
"order.  To load the system may be similarly complex due to another (not\n"
"necessarily identical) set of ordering constraints.\n"
"</p>"
msgstr ""
"<p>\n"
"Для более сложной системы, где исходный код распределен по нескольким\n"
"файлам, выполнение этих операций может быть значительно более сложным.\n"
"В этом случае, чтобы получить печатную копию системы, нужно попросить\n"
"распечатать каждый из исходных файлов.  Чтобы скомпилировать систему,\n"
"необходимо попросить скомпилировать каждый из исходных файлов и,\n"
"в некоторых случаях, чтобы компиляция проходила в определенном порядке.\n"
"Загрузка системы может быть аналогично сложной из-за другого( не "
"обязательно\n"
"того же самого) набора ограничений на порядок выполнения.\n"
"</p>"

#: in/DescrLargeSystems.htm:239
msgid "<h3>A need for abstraction</h3>"
msgstr "<h3>Потребность в абстракции</h3>"

#: in/DescrLargeSystems.htm:247
msgid ""
"<p>\n"
"It used to be that creaking a system into multiple files meant that one had\n"
"to remember all the names of the files and manipulate each as a separate\n"
"object.  Programming environments had some primitive understanding of files\n"
"and operations to be performed upon files, but had no explicit\n"
"understanding that groups of files could work together as a single unit.\n"
"</p>"
msgstr ""
"<p>\n"
"Раньше считалось, что работа с системой разбитой на несоклько файлов "
"означает,\n"
"необходимость запомнить все имена файлов и манипулировать каждым из них как "
"отдельным\n"
"объектом. Среды программирования имели некоторое примитивное понимание "
"файлов и\n"
"операций, которые должны выполняться над файлами, но не имели четкого "
"понимания того,\n"
"что группы файлов могут работать вместе как единое целое.\n"
"</p>"

#: in/DescrLargeSystems.htm:255
msgid ""
"<p>\n"
"It was common practice then (and still is today) to create batch files\n"
"holding the commands necessary to accomplish a particular manipulation.\n"
"For example, the programmer might have kept a file containing code for\n"
"compiling and loading a particular system and another file containing code\n"
"for hardcopying its sources:\n"
"</p>"
msgstr ""
"<p>\n"
"Тогда(и до сих пор это было обычной практикой) создавали пакетые файлы,\n"
"содержащие команды, необходимые для выполнения определенных манипуляций.\n"
"Например, программист мог хранить файл, содержащий код для компиляции и\n"
"загрузки конкретной системы, и другой файл, содержащий код для\n"
"печати её исходного кода:\n"
"</p>"

#: in/DescrLargeSystems.htm:267
msgid ""
"<table width=\"80%\" border=\"1\">\n"
"<tbody><tr><td>\n"
"<pre>\n"
" ;; Batch sequence to compile/load system.\n"
" (LOAD (COMPILE-FILE \"MACROS.LISP\"))\n"
" (LOAD (COMPILE-FILE \"UTILITY.LISP\"))\n"
" (LOAD (COMPILE-FILE \"MAIN.LISP\"))\n"
"</pre>\n"
"</td></tr>\n"
"</tbody><caption align=\"bottom\"><tt>COMPILE-AND-LOAD-MYSYS.LISP</tt></"
"caption>\n"
"</table>"
msgstr ""

#: in/DescrLargeSystems.htm:271
msgid ""
"<table width=\"80%\" border=\"1\">\n"
"<tbody><tr><td>\n"
"<pre> "
msgstr ""

#: in/DescrLargeSystems.htm:280
msgid ""
" ;; Batch sequence to hardcopy system sources.\n"
" (HARDCOPY-FILE \"MACROS.LISP\")\n"
" (HARDCOPY-FILE \"UTILITY.LISP\")\n"
" (HARDCOPY-FILE \"MAIN.LISP\").\n"
"</pre>\n"
"</td></tr>\n"
"</tbody><caption align=\"bottom\"><tt>HARDCOPY-MYSYS.LISP</tt></caption>\n"
"</table>"
msgstr ""

#: in/DescrLargeSystems.htm:291
msgid ""
"<p>\n"
"Common though it may have been to manipulate systems indirectly through\n"
"such batch files, it was quite clumsy.  It meant that any time a change to\n"
"the system was made, all the relevant batch files had to be updated.  If\n"
"not updated carefully and completely, the batch files could easily become\n"
"inconsistent, leading to confusing effects.  Also, because information\n"
"about the structure of a system was procedurally embedded, the only way a\n"
"utility could be written to apply a new operation to the system was by\n"
"creating yet another separately-maintained batch file.\n"
"</p>"
msgstr ""
"<p>\n"
"Распространенным, хотя возможно и довольно неуклюжим, было манипулирование\n"
"системами через такие командный файлы.  Это означало, что каждый раз, когда\n"
"вносились изменения в систему, все соответствующие командные файлы должны\n"
"были обновляться. Если не обновлять тщательно и полностью, пакетные файлы\n"
"могут легко стать непоследовательными, что приведет к запутанным "
"последствиям.\n"
"Кроме того, поскольку информация о структуре системы была встроена "
"процедурно,\n"
"единственный способ написать утилиту для применения к системе - это создать\n"
"еще один, отдельно сопровождаемый(поддерживаемый), пакетный файл.\n"
"</p>"

#: in/DescrLargeSystems.htm:298
msgid ""
"<p>\n"
"Not surprisingly, programmers have moved away from this batch method of\n"
"maintaining their systems and toward the notion that a system should be\n"
"defined abstractly in some central place and then manipulated as a unit\n"
"rather than as a set of unrelated individual components (files).\n"
"</p>"
msgstr ""
"<p>\n"
"Неудивительно, что программисты отошли от этого пакетного метода "
"обслуживания\n"
"своих систем и пришли к идее, что система должна определяться абстрактно в \n"
"каком-то центральном месте, а затем обрабатываться как единое целое, а не "
"как\n"
"набор несвязанных отдельных компонентов(файлов).\n"
"</p>"

#: in/DescrLargeSystems.htm:300
msgid "<h3>A first approximation</h3>"
msgstr "<h3>Первое приближение</h3>"

#: in/DescrLargeSystems.htm:305
msgid ""
"<p>\n"
"Here is a simple example of the sort of code needed to implement the kind\n"
"of tool we are discussing:\n"
"</p>"
msgstr ""
"<p>\n"
"Вот пример кода, необходимого для реализации того  инструмента, который\n"
"мы обсуждаем:\n"
"</p>"

#: in/DescrLargeSystems.htm:307
msgid "<pre> (DEFVAR *SOURCE-INFO* (MAKE-PLIST))"
msgstr ""

#: in/DescrLargeSystems.htm:309
msgid " (DEFUN SYSTEM-SOURCES (SYSTEM) (GET *SOURCE-INFO* SYSTEM))"
msgstr ""

#: in/DescrLargeSystems.htm:312
msgid ""
" (DEFUN DEFINE-SYSTEM-SOURCES (SYSTEM &amp;REST SOURCES)\n"
"   (PUTPROP *SOURCE-INFO* (COPYLIST SOURCES) SYSTEM))"
msgstr ""

#: in/DescrLargeSystems.htm:315
msgid ""
" (DEFUN HARDCOPY-SYSTEM (SYSTEM)\n"
"   (MAPC #'HARDCOPY-FILE (SYSTEM-SOURCES SYSTEM)))"
msgstr ""

#: in/DescrLargeSystems.htm:320
msgid ""
" (DEFUN COMPILE-AND-LOAD-SYSTEM (SYSTEM)\n"
"   (MAPC #'(LAMBDA (FILE) (LOAD (COMPILE-FILE FILE)))\n"
"         (SYSTEM-SOURCES SYSTEM)))\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:324
msgid ""
"<p>\n"
"Given this level of support, a system would be \"defined\" by writing "
"simply:\n"
"</p>"
msgstr ""
"<p>\n"
"Учитывая этот уровень поддержки, система будет \"определена\" если "
"записать:\n"
"</p>"

#: in/DescrLargeSystems.htm:328
msgctxt "in/DescrLargeSystems.htm:328"
msgid ""
"<pre> (DEFINE-SYSTEM-SOURCES 'MYSYS\n"
"   \"MACROS.LISP\" \"UTILITIES.LISP\" \"MAIN.LISP\").\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:332
msgid ""
"<p>\n"
"Once defined, such a system could be manipulated by requests such as these:\n"
"</p>"
msgstr ""
"<p>\n"
"После определения, такая система может быть обработана следующими "
"запросами:\n"
"</p>"

#: in/DescrLargeSystems.htm:336
msgid ""
"<pre> (HARDCOPY-SYSTEM 'MYSYS)\n"
" (COMPILE-AND-LOAD-SYSTEM 'MYSYS)\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:338
msgid "<h3>Partial Ordering of Dependencies</h3>"
msgstr "<h3>Частичное упорядочение зависимостей</h3>"

#: in/DescrLargeSystems.htm:347
msgid ""
"<p>\n"
"One problem with this formulation is that the relationship between the\n"
"modules of a system may be quite complex.  For example, some of the files\n"
"in a system may not depend on other files and the whole system may not need\n"
"to be recompiled just because one file has changed.  To try to account for\n"
"this, the definition of <code>COMPILE-AND-LOAD-SYSTEM</code> might be \n"
"changed to read:\n"
"</p>"
msgstr ""
"<p>\n"
"Одна проблема с этой формулировкой состоит в том, что отношения между "
"модулями\n"
"системы могут быть довольно сложными. Например, некоторые файлы в системе\n"
"могут не зависеть от других файлов, а может быть потребоваться "
"перекомпиляция\n"
"всей системы только потому, что изменился один файл.  Чтобы попытаться "
"объяснить\n"
"это, определение <code>COMPILE-AND-LOAD-SYSTEM</code> может быть изменено "
"следующим\n"
"образом:\n"
"</p>"

#: in/DescrLargeSystems.htm:356
msgid ""
"<pre> (DEFUN COMPILE-AND-LOAD-SYSTEM (SYSTEM)\n"
"   (LET ((COMPILE-FLAG NIL))\n"
"     (DOLIST (FILE (SYSTEM-SOURCES SYSTEM))\n"
"       (SETQ COMPILE-FLAG\n"
"             (OR COMPILE-FLAG (NEEDS-COMPILATION? FILE)))\n"
"       (IF COMPILE-FLAG (COMPILE-FILE FILE))\n"
"       (LOAD (BIN-FILE FILE)))))\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:362
msgid ""
"<p>\n"
"With this revised definition, files in a system's source file list would\n"
"have a left-to-right dependency relation.  Consider again the system\n"
"defined by:\n"
"</p>"
msgstr ""
"<p>\n"
"С этим пересмотренным определением файлы в списке исходных файлов системы "
"будут иметь\n"
"отношение зависимостей слева направо. Рассмотрим снова систему, определяемую "
"как:\n"
"</p>"

#: in/DescrLargeSystems.htm:366
msgctxt "in/DescrLargeSystems.htm:366"
msgid ""
"<pre> (DEFINE-SYSTEM-SOURCES 'MYSYS\n"
"   \"MACROS.LISP\" \"UTILITIES.LISP\" \"MAIN.LISP\").\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:373
msgid ""
"<p>\n"
"If <tt>MACROS.LISP</tt> is changed, <tt>UTILITIES.LISP</tt> and \n"
"<tt>MAIN.LISP</tt> will have to be\n"
"recompiled.  But if <tt>MAIN.LISP</tt> is changed,\n"
"it is the only file which will get recompiled.\n"
"</p>"
msgstr ""
"<p>\n"
"Если <tt>MACROS.LISP</tt> изменяется, <tt>UTILITIES.LISP</tt> и \n"
"<tt>MAIN.LISP</tt> придется перекомпилировать.  Но если <tt>MAIN.LISP</tt> \n"
"изменяется, это будет единственный файл, который будет перекомпилирован.\n"
"</p>"

#: in/DescrLargeSystems.htm:380
msgid ""
"<p>\n"
"Simple left-to-right dependency is useful for some applications, but may\n"
"cause a lot of unneeded work in others.  The reason is that the actual\n"
"ordering may only be partial, but a full ordering is forced by this\n"
"<a name=\"footref2\">notation</a><a href=\"#footnote2\">[2]</a>.\n"
"</p>"
msgstr ""
"<p>\n"
"Простая зависимость определяемая слева на право полезна для некоторых \n"
"приложений, но может вызвать много ненужной работы в других.  Причина в\n"
"том, что фактическое упорядочение может быть только частичным, а это \n"
"обозначение принудительно задает полное \n"
"<a name=\"footref2\">упорядочение</a><a href=\"#footnote2\">[2]</a>.\n"
"</p>"

#: in/DescrLargeSystems.htm:389
msgid ""
"<p>\n"
"For example, it is easy to imagine our system being constructed so that if\n"
"the file <tt>MACROS.LISP</tt> changed, both <tt>UTILITIES.LISP</tt> and\n"
"<tt>MAIN.LISP</tt> would need\n"
"to be recompiled, but if just one of <tt>UTILITIES.LISP</tt> or \n"
"<tt>MAIN.LISP</tt> changed,\n"
"only that one file would require recompilation.\n"
"</p>"
msgstr ""
"<p>\n"
"Например, легко представить, что наша система построена таким образом, что "
"если\n"
"файл <tt>MACROS.LISP</tt> изменился, необходимо перекомпилировать оба файла "
"<tt>UTILITIES.LISP</tt> и <tt>MAIN.LISP</tt>, но если изменился один файл \n"
"<tt>UTILITIES.LISP</tt> или <tt>MAIN.LISP</tt>, только один файл потребует\n"
"перекомпиляции.\n"
"</p>"

#: in/DescrLargeSystems.htm:396
msgid ""
"<p>\n"
"Because this sample notation provides no way to adequately express such\n"
"complex relations, it must be judged inadequate to handle the \"general\n"
"case.\"  Nevertheless, there are cases where it would be adequate, and it\n"
"would be nice to use it (or something equally simple) for those cases.\n"
"</p>"
msgstr ""
"<p>\n"
"Поскольку этот пример нотации не позволяет адекватно выразить такие сложные\n"
"отношения, она должна быть признана неадекватной для рассмотрения \"общего\n"
"случая.\"  Тем не менее, есть случаи, когда её было бы достаточно, и было "
"бы \n"
"неплохо использовать её (или что-то столь же простое) для этих случаев..\n"
"</p>"

#: in/DescrLargeSystems.htm:398
msgid "<h3>Orthogonal Dependency Types</h3>"
msgstr "<h3>Ортогональные типы зависимостей</h3>"

#: in/DescrLargeSystems.htm:405
msgid ""
"<p>\n"
"Another problem with our original formulation concerns multiple,\n"
"independent dependency chains.  Dependency information for compilation\n"
"might not be the same as dependency information for producing a runtime\n"
"environment.\n"
"</p>"
msgstr ""
"<p>\n"
"Еще одна проблема с нашей первоначальной формулировкой касается \n"
"нескольких независимых цепочек зависимостей. Информация о\n"
"зависимостях для компиляции может не совпадать с информацией о зависимостях\n"
"для создания среды выполнения.\n"
"</p>"

#: in/DescrLargeSystems.htm:414
msgid ""
"<p>\n"
"If the only goal is to compile a system, there might be many files which do\n"
"not need to be loaded because they contain utilities used only at runtime.\n"
"Alternatively, if the goal is to load an already compiled system, some\n"
"files (for example, those containing only macros used at compile time)\n"
"might not be necessary.  If both compilation and loading are to be\n"
"interleaved, a third order might arise.\n"
"</p>"
msgstr ""
"<p>\n"
"Если единственной целью является компиляция системы, может быть много "
"файлов\n"
"которые не нужно загружать, поскольку они содержат утилиты, используемые\n"
"только во время выполнения. И, в качестве альтернативы, если целью является\n"
"загрузка уже скомпилированной системы, некоторые файлы(например, те, "
"которые\n"
"содержат только макросы) могут не понадобиться.  Если и компиляция, и "
"загрузка\n"
"должны чередоваться, может возникнуть третий порядок.\n"
"</p>"

#: in/DescrLargeSystems.htm:420
msgid ""
"<p>\n"
"An adequate notation for describing systems needs to offer a notation for\n"
"stating different kinds of dependency relations, and should probably be\n"
"extensible (allowing the addition of new kinds of dependencies).\n"
"</p>"
msgstr ""
"<p>\n"
"Адекватная нотация для описания систем должна предлагать нотацию для "
"определения\n"
"различных видов отношений зависимости, и, вероятно, должна быть расширяемой\n"
"(допускающей добавление новых видов зависимостей).\n"
"</p>"

#: in/DescrLargeSystems.htm:422
msgid "<h2>III. Existing Tools</h2>"
msgstr "<h2>III. Существующие Инструменты</h2>"

#: in/DescrLargeSystems.htm:424
msgid "<h3>The Unix MAKE Facility</h3>"
msgstr "<h3>Unix MAKE Facility</h3>"

#: in/DescrLargeSystems.htm:431
msgid ""
"<p>\n"
"<a name=\"ref-Feldman-78\">The Unix <tt>MAKE</tt> facility</a> <a href="
"\"#Feldman-78\">[Feldman 78]</a> is frequently pointed to \n"
"as a model of\n"
"\"the right way to define a system.\"  It is syntactically simple and\n"
"provides a reasonable amount of power.\n"
"</p>"
msgstr ""
"<p>\n"
"<a name=\"ref-Feldman-78\">Средство Unix <tt>MAKE</tt> </a> <a href="
"\"#Feldman-78\">[Feldman 78]</a> часто называют моделью \"правильного "
"способа определения системы.\"  Оно синтаксически\n"
"простое и обеспечиват разумную мощь.\n"
"</p>"

#: in/DescrLargeSystems.htm:440
msgid ""
"<p>\n"
"A makefile contains Unix shell commands augmented with \n"
"information about\n"
"which code modules depend on which others.  When the <tt>make</tt> command "
"is\n"
"invoked, it is as if all the shell commands were executed except that some\n"
"shell commands may be \"optimized out\" if the dependency information\n"
"specifies that they are not necessary to preserve correctness.\n"
"</p>"
msgstr ""
"<p>\n"
"makefile содержит команды Unix оболочки(shell), дополненные информацией о "
"том,\n"
"какие модули кода зависят от каких других.  Когда вызывается команда "
"<tt>make</tt>,\n"
"создается впечатление, что все команды оболочки были выполнены, за "
"исключением того,\n"
"что некоторые команды оболочки могут быть \"оптимизированы\", если в "
"информации о\n"
"зависимости указано, что они не нужны для сохранения корректности.\n"
"</p>"

#: in/DescrLargeSystems.htm:445
msgid ""
"<p>\n"
"To make things concrete, here is a sample of how a system might be\n"
"specified in a makefile:\n"
"</p>"
msgstr ""
"<p>\n"
"Чтобы конкретизировать, вот пример того, как система может быть определена\n"
"в файле makefile:\n"
"</p>"

#: in/DescrLargeSystems.htm:453
msgid ""
"<pre> mysys: a.o b.o\n"
"          cc a.o b.o -lm -o pgm\n"
"   a.o: incl a.c\n"
"          cc -c a.c\n"
"   b.o: incl b.c\n"
"          cc -c b.c\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:467
msgid ""
"<p>\n"
"The first line defines that there is some module called <tt>mysys</tt>\n"
"which needs\n"
"to be updated if <tt>a.o</tt> or <tt>b.o</tt> are ever out of date.\n"
"The indented line\n"
"following that line specifies how to do the update; specifically, it links\n"
"the compiled files <tt>a.o</tt>, <tt>b.o</tt> \n"
"and standard library <tt>m</tt>.  The third and fifth\n"
"lines define modules <tt>a.o</tt> and <tt>b.o</tt>,\n"
"saying that they depend on <tt>.c</tt> source\n"
"files and also on some file called <tt>incl</tt>\n"
"(which they presumably reference internally via <tt>#include</tt>).\n"
"</p>"
msgstr ""
"<p>\n"
"Первая строка определяет, что существует некоторый модуль, называемый \n"
"<tt>mysys</tt>, который необходимо обновить, если <tt>a.o</tt> или \n"
"<tt>b.o</tt> имеют более позднюю дату изменения. Строка с отступом,\n"
"следующя за этой строкой, указывает, как выполнять обновление; в частности,\n"
"она связывает(линкует/links) скомпилированные файлы <tt>a.o</tt>, <tt>b.o</"
"tt> \n"
"и стандартную библиотеку <tt>m</tt>.  Третья и пятая строки определяют\n"
"модули <tt>a.o</tt> и <tt>b.o</tt>,\n"
"говоря, что они зависят от исходных файлов <tt>.c</tt>, а также от "
"некоторого\n"
"файла с именем <tt>incl</tt> (на который вероятно они ссылаются внутренне\n"
"через <tt>#include</tt>).\n"
"</p>"

#: in/DescrLargeSystems.htm:473
msgid ""
"<p>\n"
"To make comparison easier, we could pretend that make used Lisp expressions\n"
"rather than requiring a special parser. In such case, a makefile\n"
"might contain an expression like:\n"
"</p>"
msgstr ""
"<p>\n"
"Чтобы упростить сравнение, мы можем сделать вид, что используем выражения\n"
"на Lisp, а не требовать специального синтаксического анализатора. В таком\n"
"случае файл makefile может содержать выражения вроде:\n"
"</p>"

#: in/DescrLargeSystems.htm:484
msgid ""
"<pre> (DEFINE-FOR-MAKE MYSYS\n"
"     (MYSYS (\"a.o\" \"b.o\")\n"
"            (LOAD-IF-NOT-LOADED \"a\")\n"
"            (LOAD-IF-NOT-LOADED \"b\")\n"
"            (LOAD-IF-NOT-LOADED \"m\"))\n"
"     (\"a.o\" (\"incl\" \"a.c\")\n"
"            (COMPILE-FILE \"a.c\"))\n"
"     (\"b.o\" (\"incl\" \"b.c\")\n"
"            (COMPILE-FILE \"b.c\")))\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:496
msgid ""
"<p>\n"
"One problem with <tt>MAKE</tt> is that not all the information in a\n"
"makefile is\n"
"explicit.  For example, the fact that the system sources are\n"
"<tt>incl</tt>, <tt>a.c</tt>, <tt>b.c</tt> is nowhere explicit.\n"
"There is nothing (other than hoping that <tt>.o</tt> files are\n"
"not source files and anything else is) which identifies them as the source\n"
"files.  A programmer wanting to write a utility for producing hardcopy of a\n"
"system's sources would not be able to drive the utility off of the\n"
"information contained in the makefile.\n"
"</p>"
msgstr ""
"<p>\n"
"Одна проблема с <tt>MAKE</tt> заключается в том, что не вся информация в\n"
"файле makefile указывается явно. Например, тот факт, что исходными файлами\n"
"системы являются <tt>incl</tt>, <tt>a.c</tt>, <tt>b.c</tt> нигде не указан\n"
"явно.\n"
"Ничто(кроме надежды на то, что файлы <tt>.o</tt> не являются исходными "
"файлми,\n"
"а все остальные таковые) не идентифициует их как файлы исходного кода. \n"
"Программист, желающий написать утилиту для создания печатной копии исходных\n"
"кодов системы, не сможет выбрать эту информацию утилитой, из содержимого "
"makefile.\n"
"</p>"

#: in/DescrLargeSystems.htm:510
msgid ""
"<p>\n"
"<tt>MAKE</tt> offers no theory of how to include or process additional\n"
"information.  For example, having the tail of each module clause (the part\n"
"after the colon in the original Unix syntax) say how to build the module is\n"
"fine for a compiled-only language, but is not reasonable in a language like\n"
"lisp which embraces the notion of an interpreter and a compiler that can\n"
"share the load.  There is no obvious way to extend <tt>MAKE</tt> in an "
"upward\n"
"compatible fashion in order to allow specification of commands for\n"
"compiling modules as well as commands for loading them.  There is also no\n"
"provision for adding other kinds of information, such as an alternate\n"
"notion of what it means for modules to be out of date or how to handle\n"
"circular dependencies.\n"
"</p>"
msgstr ""
"<p>\n"
"<tt>MAKE</tt> не предлагает теории о том как включать или обрабатывать "
"дополнительную\n"
"информацию.  Например, указание хвоста каждого предложения модуля (часть "
"предложения\n"
"после двоеточия в оригинальном синтаксисе Unix) говорит о том, как создать "
"модуль,\n"
"хороша для языка использующего только компиляцию, но не целесообразна для "
"языка подобного\n"
"lisp, который объединяет понятие интерпретатора и компилятора, который может "
"разделять(совершать) эти процессы при загрузке. Не существует очевидного "
"способа\n"
"расширения <tt>MAKE</tt> в направлении совместимости вверх, чтобы можно было "
"задавать\n"
"команды для компиляции модулей, а также команды для их загрузки. Также не "
"предусмотрено добавление других видов информации, таких как альтернативное "
"представление о том, что означает устаревание модулей или как обрабатывать "
"циклические зависимости. \n"
"</p>"

#: in/DescrLargeSystems.htm:520
msgid ""
"<p>\n"
"In fact, <tt>MAKE</tt> amounts to little more than a batch facility with \n"
"a simple\n"
"but inflexible provision for ignoring unnecessary commands.  Just as with\n"
"normal batch files, to do two operations (<i>e.g.,</i> compile and load) "
"requires\n"
"two batch files.  While it might be syntactically convenient for some\n"
"common applications in compiled-only languages under Unix, <tt>MAKE</tt> \n"
"does not represent a theory of how to maintain systems.\n"
"</p>"
msgstr ""
"<p>\n"
"Фактически, <tt>MAKE</tt> представляет собой нечто большее, чем пакетное\n"
"средство, с простым но негибким условием игнорирования ненужных команд. Как "
"и\n"
"в случае с обычными пакетными файлами, для выполнения двух операций \n"
"(<i>например,</i> компиляции и загрузки) требует двух пактных файлов.  \n"
"Хотя это может быть\n"
"синтаксически удобно для некоторых распространенных приложенй на языках\n"
"выполняющих только компиляцию под Unix, <tt>MAKE</tt> \n"
"не представляет теории о том, как поддерживать(сопровождать) системы.\n"
"</p>"

#: in/DescrLargeSystems.htm:522
msgid "<h3>The DEFSYSTEM Facility</h3>"
msgstr "<h3>Средство DEFSYSTEM</h3>"

#: in/DescrLargeSystems.htm:532
msgid ""
"<p>\n"
"<a name=\"ref-Weinreb-81\">The Lisp Machine <code>DEFSYSTEM</code> facility</"
"a> <a href=\"#Weinreb-81\">[Weinreb 81]</a> \n"
"bills itself as a \"general\n"
"and extensible\" tool for maintaining systems broken into several files.  "
"It\n"
"provides a means of noting what files belong to what modules, what modules\n"
"depend on what other modules (both for compilation and for loading), and is\n"
"extensible to allow the addition of new system-building \"transformations\"\n"
"(such as calls to alternate compilers and loaders).\n"
"</p>"
msgstr ""
"<p>\n"
"<a name=\"ref-Weinreb-81\">Средство Lisp Machine <code>DEFSYSTEM</code> </a> "
"<a href=\"#Weinreb-81\">[Weinreb 81]</a> \n"
"позиционирует себя как \"общий и расширяемый\" инструмент для обслуживания "
"систем,\n"
"разбитых на несколько файлов. Он представляет возможность отметить, какие "
"файлы\n"
"принадлежат каким модулям, какие модули зависят от каких других модулей (как "
"для\n"
"компиляции, так и для загрузки), и является расширяемым, что позволяет "
"добавлять\n"
"новые \"преобразования\" для построения системы.\n"
"(такие как альтернативные компиляторы и загрузчики).\n"
"</p>"

#: in/DescrLargeSystems.htm:539
msgid ""
"<p>\n"
"Information about the structure of a system is defined with the \n"
"<code>DEFSYSTEM</code> special form.\n"
"Later, <code>MAKE-SYSTEM</code> can be called to perform \n"
"a pre-defined set of operations upon the system.\n"
"</p>"
msgstr ""
"<p>\n"
"Информация о структуре системы определяется специальной формой\n"
"<code>DEFSYSTEM</code> .\n"
"Позже, <code>MAKE-SYSTEM</code> может быть вызван для выполения\n"
"предопределенного набора операций над системой.\n"
"</p>"

#: in/DescrLargeSystems.htm:553
msgid ""
"<p>\n"
"<font color=\"green\">\n"
"[Note that we refer to <code>DEFSYSTEM</code> forms as special forms here\n"
" when plainly they are macro forms.\n"
" At the time this paper was written, before Common Lisp, the meaning of \n"
" the term \"special form\" was still evolving and meant what Common Lisp\n"
" would call \"any compound form that isn't a function form\"; that is, it\n"
" included both what Common Lisp calls special forms and what Common Lisp\n"
" calls macro forms.  Personally, I still prefer this old meaning to \n"
" special form because it is implementation-neutral.<br>\n"
" --<i>KMP</i> 14-Jan-2001]\n"
"</font>\n"
"</p>"
msgstr ""
"<p>\n"
"<font color=\"green\">\n"
"[Обратите внимание, что мы ссылаемся здесь на формы <code>DEFSYSTEM</code> \n"
"как специальные формы, когда они являются макроформами.\n"
" В то время когда эта статья была написана до Common Lisp, значение термина\n"
"\"специальная форма\" еще развивалось, и означало то, что Common Lisp\n"
" назвал бы \"любой составной формой, которая не является формой функции\"; "
"то есть,\n"
" они включают в себя, то что в Common Lisp называется специальными формами, "
"и то,\n"
" что Common Lisp называет маро формами(макросами).  Лично я предпочитаю это "
"старое\n"
" значение специальной форме, потому что оно не зависит от реализации.<br>\n"
" --<i>KMP</i> 14-Jan-2001]\n"
"</font>\n"
"</p>"

#: in/DescrLargeSystems.htm:558
msgid ""
"<p>\n"
"Here is a sample system description written in <code>DEFSYSTEM</code>\n"
"notation:\n"
"</p>"
msgstr ""
"<p>\n"
"Вот пример описания системы, записанной в нотации <code>DEFSYSTEM</code>:\n"
"</p>"

#: in/DescrLargeSystems.htm:573
msgid ""
"<pre> (DEFSYSTEM MYSYS\n"
"   (:MODULE MACROS (\"incl\"))\n"
"   (:MODULE A (\"a\"))\n"
"   (:MODULE B (\"b\"))\n"
"   (:MODULE MLIB (\"m\"))\n"
"   (:FASLOAD MLIB)\n"
"   (:COMPILE-LOAD MACROS)\n"
"   (:COMPILE-LOAD-INIT A (MACROS)\n"
"                         (:FASLOAD MACROS)\n"
"                         (:FASLOAD MLIB))\n"
"   (:COMPILE-LOAD-INIT B (MACROS)\n"
"                         (:FASLOAD MACROS)\n"
"                         (:FASLOAD MLIB A )))\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:582
msgid ""
"<p>\n"
"The <a name=\"footref3\"><code>:MODULE</code></a><a href=\"#footnote3\">[3]</"
"a> \n"
"clauses specify which files \n"
"belong to each of the modules.\n"
"For example, the <code>MACROS</code> module refers \n"
"to the file <tt>\"incl.lisp\"</tt>,\n"
"the A module refers to <code>\"a.lisp\"</code>, <i>etc.</i>\n"
"</p>"
msgstr ""
"<p>\n"
"Предложения <a name=\"footref3\"><code>:MODULE</code></a><a href="
"\"#footnote3\">[3]</a> \n"
"определяют, какие файлы принадлежат каждому из модулей. Например, модуль "
"<code>MACROS</code> \n"
"ссылается на файл <tt>\"incl.lisp\"</tt>,\n"
"модуль A ссылается на <code>\"a.lisp\"</code>, <i>и т.д.</i>\n"
"</p>"

#: in/DescrLargeSystems.htm:590
msgid ""
"<p>\n"
"The <code>:FASLOAD</code> clause for <code>MLIB</code>\n"
"says that <code>\"m.lisp\"</code>\n"
"is a standard library which\n"
"must be loaded.  This definition doesn't specify when it might be\n"
"recompiled; presumably that is handled by some other agency.\n"
"</p>"
msgstr ""
"<p>\n"
"Предложение <code>:FASLOAD</code> для <code>MLIB</code>\n"
"говорит, что <code>\"m.lisp\"</code> это стандартная библиотека,\n"
"которая может быть загружена. Это определение не указывает, когда\n"
"оно может быть перекомпилировано; предположительно, этим занимается\n"
"какое-то другое агенство.\n"
"</p>"

#: in/DescrLargeSystems.htm:597
msgid ""
"<p>\n"
"The <code>:COMPILE-LOAD</code> clause for <code>MACROS</code>\n"
"says that <tt>\"incl.lisp\"</tt> is part of the\n"
"system and must be recompiled if changed, but it has no particular\n"
"preconditions to be satisfied prior to compilation or loading.\n"
"</p>"
msgstr ""
"<p>\n"
"Предложение <code>:COMPILE-LOAD</code> для <code>MACROS</code>\n"
"говорит, что <tt>\"incl.lisp\"</tt> является частью системы и должен\n"
"быть перекомпилирован при изменении, но у него нет особых\n"
"предварительных условий, которые должны быть выполнены перед компиляцией\n"
"или загрузкой.\n"
"</p>"

#: in/DescrLargeSystems.htm:609
msgid ""
"<p>\n"
"The <code>:COMPILE-LOAD-INIT</code> clauses for <code>A</code> and <code>B</"
"code> specify various kinds of\n"
"dependency information.  Both must be recompiled not only if they\n"
"themselves change, but also if <code>MACROS</code> changes.  \n"
"Before compiling <code>A</code>, one\n"
"must first load <code>MACROS</code>; before loading <code>A</code>,\n"
"one must first load <code>MLIB</code>.  Before\n"
"compiling <code>B</code>, one must first load <code>MACROS</code>; \n"
"before loading <code>B</code>, one must first\n"
"load <code>MLIB</code> and <code>A</code>.\n"
"</p>"
msgstr ""
"<p>\n"
"Предложения <code>:COMPILE-LOAD-INIT</code> для <code>A</code> и <code>B</"
"code> определяют разлличные виды информации о зависимостях. Оба должны быть "
"перекомпилированы\n"
"не только если они сами изменяются, но также при изменении <code>MACROS</"
"code>.  \n"
"Перед компиляцией <code>A</code>, необходимо сначала загрузить <code>MACROS</"
"code>; \n"
"перед загрузкой <code>A</code>, необходимо сначала загрузить <code>MLIB</"
"code>.  \n"
"Перед компиляцией <code>B</code>, необходимо сначала загрузить <code>MACROS</"
"code>; \n"
"перед загрузкой <code>B</code>, необходимо сначала загрузить <code>MLIB</"
"code> и <code>A</code>.\n"
"</p>"

#: in/DescrLargeSystems.htm:626
msgid ""
"<p>\n"
"Although names like <code>:COMPILE-LOAD</code> may look like function "
"names,\n"
"they are\n"
"not.  They simply declare that compilation and/or loading might need to\n"
"occur under certain circumstances.  <code>DEFSYSTEM</code> notation,\n"
"unlike that of\n"
"<tt>MAKE</tt>, is declarative rather than procedural.  Because of this,\n"
"<code>MAKE-SYSTEM</code>\n"
"can perform more than one kind of operation\n"
"(for each <code>DEFSYSTEM</code> form),\n"
"where <tt>MAKE</tt> could only perform one (for each makefile).\n"
"For example, given\n"
"certain arguments, <code>MAKE-SYSTEM</code> will compile a system.\n"
"Given different arguments,\n"
"it will simply load an already compiled version of the system.\n"
"</p>"
msgstr ""
"<p>\n"
"Хотя имена вроде <code>:COMPILE-LOAD</code> могут выглядеть как имена "
"функций, это не так.  Они просто заявляют, что компиляция и загрузка\n"
"могут возникнуть при определенных обстоятельствах. Обозначение(нотация)  "
"<code>DEFSYSTEM</code>, в отличие от обозначения <tt>MAKE</tt>, \n"
"является декларативным, а не процедурным.  Из-за этого <code>MAKE-SYSTEM</"
"code> может выполнять более одного вида операций\n"
"(для каждой формы <code>DEFSYSTEM</code>),\n"
"где <tt>MAKE</tt> может выполнять только одну (для каждого makefile).\n"
"Например, при определенных аргументах, <code>MAKE-SYSTEM</code> "
"скомпилирует\n"
"систему.\n"
"Учитывая разные аргументы он просто загрузит уже скомпилированную версию\n"
"системы.\n"
"</p>"

#: in/DescrLargeSystems.htm:637
msgid ""
"<p>\n"
"On the other hand, the set of operations that <code>MAKE-SYSTEM</code>\n"
"will perform is\n"
"pre-defined and not extensible. This means that if someone wanted to add a\n"
"new utility (<i>e.g.,</i> for hardcopying sources) there would be no way to "
"do it\n"
"because there is no user-advertised mechanism for asking for a list of a\n"
"system's source files.  The information is present and is used internally\n"
"by various system utilities, but is not advertised to users as part of the\n"
"standard abstraction.\n"
"</p>"
msgstr ""
"<p>\n"
"С другой стороны, набор операций, которые будет выполнять <code>MAKE-SYSTEM</"
"code>, является заранее заданным и не расширяемым. Это означает, что если бы "
"кто-то хотел добавить новую утилиту (<i>например,</i> для создния\n"
"распечаток исходных кодов), не было бы никакого способа следать это,\n"
"потому что не существует объявленного пользователем механизма для запроса\n"
"списка исходных файлов системы.  Информация присутствует и используется\n"
"внутри различных системных утилит, но не объявляется пользователями как\n"
"часть стандартной абстракции.\n"
"</p>"

#: in/DescrLargeSystems.htm:644
msgid ""
"<p>\n"
"Another gripe commonly heard about <code>DEFSYSTEM</code>\n"
"is that it was designed to\n"
"handle hard cases, but that for simple tasks it is generally cumbersome and\n"
"unpleasant to use.\n"
"</p>"
msgstr ""
"<p>\n"
"Другой недостаток, который часто слышат о <code>DEFSYSTEM</code>\n"
"- это то, что он был разработан для работы с тяжёлыми случаями, для простых\n"
"задач он  громоздок и неудобен в использовании.\n"
"</p>"

#: in/DescrLargeSystems.htm:664
msgid ""
"<p>\n"
"Still another problem, which contributes to the overall feeling of\n"
"clumsiness, is that there is no transitivity of dependency information\n"
"between <code>DEFSYSTEM</code> modules.\n"
"Hence, if <code>DEFSYSTEM</code> is told that <tt>C.LISP</tt> depends\n"
"on <tt>B.LISP</tt> and that <tt>B.LISP</tt> depends on <tt>A.LISP</tt>,\n"
"<code>DEFSYSTEM</code> will not infer that\n"
"<tt>C.LISP</tt> depends on <tt>A.LISP</tt>.\n"
"Technically, it would be incorrect to do\n"
"otherwise because it may be the case that the part of <tt>B.LISP</tt>\n"
"which depends\n"
"on <tt>A.LISP</tt> is not used by <tt>C.LISP</tt>.\n"
"<a name=\"footref4\">However,\n"
"the result of this decision on\n"
"the part of the <code>DEFSYSTEM</code> designers is \n"
"that large <code>DEFSYSTEM</code> forms tend to\n"
"take on a pyramidal shape as later compile-load specifications are forced\n"
"to specify an enormous number of dependencies explicitly:</a><a href="
"\"#footnote4\">[4]</a> \n"
"</p>"
msgstr ""
"<p>\n"
"Ещё одна проблема, которая способствует общему ощущению неуклюжести,\n"
"заключается в том, что нет транзитивности информации о зависимостях\n"
"между модулями <code>DEFSYSTEM</code>.\n"
"Следовательно, если <code>DEFSYSTEM</code> сообщают, что <tt>C.LISP</tt> \n"
"зависит от <tt>B.LISP</tt> и что <tt>B.LISP</tt> зависит от <tt>A.LISP</"
"tt>,\n"
"<code>DEFSYSTEM</code> не сделает заключение, о том, что\n"
"<tt>C.LISP</tt> зависит от <tt>A.LISP</tt>.\n"
"Технически, было бы не правильно делать иначе, потому что это может быть "
"случаем, когда часть <tt>B.LISP</tt>, которая завсит от <tt>A.LISP</tt>,\n"
"не используется в <tt>C.LISP</tt>.\n"
"<a name=\"footref4\"> Тем не менее,\n"
"результатом такого решения со стороны разработчиков <code>DEFSYSTEM</code> "
"является то, что большие формы <code>DEFSYSTEM</code> имеют тенденцию\n"
"принимать пирамидальную форму, так как более поздние спецификации загрузки-"
"компиляции вынуждены явно указывать огромное количество зависимостей явно:</"
"a><a href=\"#footnote4\">[4]</a> \n"
"</p>"

#: in/DescrLargeSystems.htm:718
msgid ""
"<pre> (defsystem KBE\n"
"   (:name \"Knowledge-Based-Editor\")\n"
"   (:short-name \"KBE\")\n"
"     .\n"
"     .\n"
"     .\n"
"   (:module LET \"KBE: LISPM2; LET\" :package KBE)\n"
"   (:module LETS \"KBE: LMLIB; LETS\")\n"
"   (:module PP \"KBE: LMLIB; GPRINT\")\n"
"   (:module BASE (\"BASIC\" \"NOISE\" \"SETS\" \"CONDITIONS\" \"ENGLISH\"\n"
"                  \"SYSTEM-MAGIC\" \"FLAVOR-MAGIC\"))\n"
"   (:module MACRO (\"MACRO\"))\n"
"   (:module KVARS \"KVARS\")\n"
"     .\n"
"     .\n"
"     .\n"
"   (:fasload PP)\n"
"   (:fasload LET)\n"
"   (:fasload LETS)\n"
"   (:compile-load-init BASE (PP)\n"
"                            (:fasload PP LET LETS)\n"
"                            (:fasload PP))\n"
"   (:compile-load-init MACRO (PP)\n"
"                             (:fasload PP LET LETS BASE)\n"
"                             (:fasload BASE))\n"
"   (:compile-load-init KVARS (PP MACRO)\n"
"                             (:fasload PP LET LETS BASE MACRO)\n"
"                             (:fasload BASE))\n"
"   (:compile-load-init KMAC (PP MACRO)\n"
"                            (:fasload PP LET LETS BASE MACRO KVARS)\n"
"                            (:fasload BASE KVARS))\n"
"   (:compile-load-init IMAC (PP MACRO KMAC)\n"
"                            (:fasload PP LET LETS BASE MACRO KVARS KMAC)\n"
"                            (:fasload BASE KVARS KMAC))\n"
"   (:compile-load-init MBOX (PP MACRO)\n"
"                            (:fasload PP LET LETS BASE MACRO KVARS IMAC)\n"
"                            (:fasload BASE KVARS IMAC))\n"
"   (:compile-load-init BEHAVE (PP MACRO IMAC)\n"
"                              (:fasload PP LET LETS BASE MACRO KVARS IMAC)\n"
"                              (:fasload BASE KVARS IMAC MBOX))\n"
"   (:compile-load-init KUTIL (PP MACRO IMAC BEHAVE)\n"
"                             (:fasload PP LET LETS BASE MACRO KVARS IMAC "
"BEHAVE)\n"
"                             (:fasload BASE KVARS IMAC MBOX BEHAVE))\n"
"     .\n"
"     .\n"
"     .\n"
"   (:compile-load-init MAGIC (PP MACRO IMAC BEHAVE SIMPLE ED1 SOCIETY)\n"
"                             (:fasload PP LET LETS BASE MACRO KVARS IMAC\n"
"                                       BEHAVE KUTIL SIMPLE LD1 SOCIETY "
"SINDRD ZMAGIC)\n"
"                             (:fasload BASE KVARS IMAC MBOX BEHAVE KUTIL "
"ED1\n"
"                                       SOCIETY SINDRD BRIDGE ZMAGIC))\n"
"   ...)\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:728
msgid ""
"<p>\n"
"<code>DEFSYSTEM</code> is extensible, \n"
"but in addition to its other problems, much of the\n"
"data available to extension writers is in the form of special variables\n"
"which are available while its \"transformations\" are happening.  To\n"
"illustrate this, we include an excerpt from the Lisp Machine Manual section\n"
"describing state variables which can be used in writing <code>DEFSYSTEM</"
"code>\n"
"extensions:\n"
"</p>"
msgstr ""
"<p>\n"
"<code>DEFSYSTEM</code> является расширяемым, но в дополнении к другим\n"
"проблемам, большая часть данных, доступным авторам расширений, представлена\n"
"в виде специальных переменных, которые доступны во время его \n"
"\"преобразований\".  Чтобы проилюстрировать это, мы включили отрывок из\n"
"раздела Lisp Machine Manual, в котором описаны переменные состояния,\n"
"которые можно использовать при написании расширений <code>DEFSYSTEM</code>:\n"
"</p>"

#: in/DescrLargeSystems.htm:744
msgid ""
"<blockquote>\n"
"<dl>\n"
"<dt>\n"
"<table width=\"80%\">\n"
" <tbody><tr>\n"
"  <td valign=\"top\" align=\"left\"><code>SI:*SYSTEM-BEING-MADE*</code></"
"td>\n"
"  <td valign=\"top\" align=\"right\"><i>Variable</i></td>\n"
" </tr>\n"
"</tbody></table>\n"
"</dt>\n"
"<dd>\n"
"<p>\n"
"The internal data structure which represents the system being made.\n"
"</p>\n"
"</dd>"
msgstr ""
"<blockquote>\n"
"<dl>\n"
"<dt>\n"
"<table width=\"80%\">\n"
" <tbody><tr>\n"
"  <td valign=\"top\" align=\"left\"><code>SI:*SYSTEM-BEING-MADE*</code></"
"td>\n"
"  <td valign=\"top\" align=\"right\"><i>Variable</i></td>\n"
" </tr>\n"
"</tbody></table>\n"
"</dt>\n"
"<dd>\n"
"<p>\n"
"Внутренняя структура данных, проторая представляет создаваемую систему.\n"
"</p>\n"
"</dd>"

#: in/DescrLargeSystems.htm:759
msgid ""
"<dt>\n"
"<table width=\"80%\">\n"
" <tbody><tr>\n"
"  <td valign=\"top\" align=\"left\"><code>SI:*MAKE-SYSTEM-FORMS-TO-BE-EVALED-"
"BEFORE*</code></td>\n"
"  <td valign=\"top\" align=\"right\"><i>Variable</i></td>\n"
" </tr>\n"
"</tbody></table>\n"
"</dt>\n"
"<dd>\n"
"<p>\n"
"A list of forms which are evaluated before the transformations are\n"
"performed.\n"
"</p>\n"
"</dd>"
msgstr ""
"<dt>\n"
"<table width=\"80%\">\n"
" <tbody><tr>\n"
"  <td valign=\"top\" align=\"left\"><code>SI:*MAKE-SYSTEM-FORMS-TO-BE-EVALED-"
"BEFORE*</code></td>\n"
"  <td valign=\"top\" align=\"right\"><i>Variable</i></td>\n"
" </tr>\n"
"</tbody></table>\n"
"</dt>\n"
"<dd>\n"
"<p>\n"
"Список форм, которые вычисляются перед выполнением преобразований.\n"
"</p>\n"
"</dd>"

#: in/DescrLargeSystems.htm:774
msgid ""
"<dt>\n"
"<table width=\"80%\">\n"
"<tbody><tr>\n"
"<td valign=\"top\" align=\"left\">\n"
"<code>SI:*MAKE-SYSTEM-FORMS-TO-BE-EVALED-AFTER*</code></td>\n"
"<td valign=\"top\" align=\"right\">\n"
"<i>Variable</i></td></tr></tbody></table>\n"
"</dt>\n"
"<dd>\n"
"<p>\n"
"A list of forms which are evaluated after the transformations are\n"
"performed.\n"
"</p>\n"
"</dd>"
msgstr ""
"<dt>\n"
"<table width=\"80%\">\n"
"<tbody><tr>\n"
"<td valign=\"top\" align=\"left\">\n"
"<code>SI:*MAKE-SYSTEM-FORMS-TO-BE-EVALED-AFTER*</code></td>\n"
"<td valign=\"top\" align=\"right\">\n"
"<i>Variable</i></td></tr></tbody></table>\n"
"</dt>\n"
"<dd>\n"
"<p>\n"
"Список форм, которые вычисляются после выполнения преобразований.\n"
"</p>\n"
"</dd>"

#: in/DescrLargeSystems.htm:793
msgid ""
"<dt>\n"
"<table width=\"80%\">\n"
"<tbody><tr>\n"
"<td valign=\"top\" align=\"left\">\n"
"<code>SI:*MAKE-SYSTEM-FORMS-TO-BE-EVALED-FINALLY*</code></td>\n"
"<td valign=\"top\" align=\"right\">\n"
"<i>Variable</i></td></tr></tbody></table>\n"
"</dt>\n"
"<dd>\n"
"<p>\n"
"A list of forms which are evaluated after the body of \n"
"<code>MAKE-SYSTEM</code> has\n"
"completed.  This differs from \n"
"<code>SI:*MAKE-SYSTEM-FORMS-TO-BE-EVALED-AFTER*</code> in\n"
"that these forms are evaluated outside the \"compiler context,\" which\n"
"sometimes makes a difference.\n"
"</p>\n"
"</dd>"
msgstr ""
"<dt>\n"
"<table width=\"80%\">\n"
"<tbody><tr>\n"
"<td valign=\"top\" align=\"left\">\n"
"<code>SI:*MAKE-SYSTEM-FORMS-TO-BE-EVALED-FINALLY*</code></td>\n"
"<td valign=\"top\" align=\"right\">\n"
"<i>Variable</i></td></tr></tbody></table>\n"
"</dt>\n"
"<dd>\n"
"<p>\n"
"Список форм, которые вычисляются после завершения тела\n"
"<code>MAKE-SYSTEM</code>.  Он отличается от\n"
"<code>SI:*MAKE-SYSTEM-FORMS-TO-BE-EVALED-AFTER*</code> тем, что эти\n"
"формы вычисляются вне \"контекста компилятора,\" что иногда\n"
"имеет значение.\n"
"</p>\n"
"</dd>"

#: in/DescrLargeSystems.htm:811
msgid ""
"<dt>\n"
"<table width=\"80%\">\n"
"<tbody><tr>\n"
"<td valign=\"top\" align=\"left\">\n"
"<code>SI:*QUERY-TYPE*</code></td>\n"
"<td valign=\"top\" align=\"right\">\n"
"<i>Variable</i></td></tr></tbody></table>\n"
"</dt>\n"
"<dd>\n"
"<p>\n"
"Controls how questions are asked.\n"
"Its normal value is <code>:NORMAL</code>. <code>:NOCONFIRM</code>\n"
"means no questions will be asked and <code>:SELECTIVE</code>\n"
"asks a question for each individual file.\n"
"</p>\n"
"</dd>\n"
"</dl>"
msgstr ""
"<dt>\n"
"<table width=\"80%\">\n"
"<tbody><tr>\n"
"<td valign=\"top\" align=\"left\">\n"
"<code>SI:*QUERY-TYPE*</code></td>\n"
"<td valign=\"top\" align=\"right\">\n"
"<i>Variable</i></td></tr></tbody></table>\n"
"</dt>\n"
"<dd>\n"
"<p>\n"
"Контролирует, как задаются вопросы. Его нормальное значение \n"
"<code>:NORMAL</code>. <code>:NOCONFIRM</code>\n"
"означает, что вопросы задаваться не будут, а <code>:SELECTIVE</code>\n"
"задает вопросы для каждого отдельного файла.\n"
"</p>\n"
"</dd>\n"
"</dl>"

#: in/DescrLargeSystems.htm:816
msgid ""
"<pre> .\n"
" .\n"
" .\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:841
msgid ""
"<dl>\n"
"<dt>\n"
"<table width=\"80%\">\n"
"<tbody><tr>\n"
"<td valign=\"top\" align=\"left\">\n"
"<code>(SI:DEFINE-MAKE-SYSTEM-SPECIAL-VARIABLE </code><i>var</i><code> </"
"code><i>val</i><code> [</code><i>defvar-p</i><code>])</code></td>\n"
"<td valign=\"top\" align=\"right\">\n"
"<i>Special Form</i></td></tr></tbody></table>\n"
"</dt>\n"
"<dd>\n"
"<p>\n"
"Causes <i>var</i> to be bound to <i>val</i>, \n"
"which is evaluated at <code>MAKE-SYSTEM</code> time,\n"
"during the body of the call to <code>MAKE-SYSTEM</code>.\n"
"This allows you to define new variables similar to those listed above.\n"
"If <i>defvar-p</i> is specified as (or defaulted to) <code>T</code>,\n"
"<i>var</i> is defined with <code>DEFVAR</code>.\n"
"It is not given an initial value.\n"
"If <i>defvar-p</i> is specified as <code>NIL</code>,\n"
"<i>var</i> belongs to some other program \n"
"and is not <code>DEFVAR</code>'ed here.\n"
"</p>\n"
"</dd>\n"
"</dl>"
msgstr ""
"<dl>\n"
"<dt>\n"
"<table width=\"80%\">\n"
"<tbody><tr>\n"
"<td valign=\"top\" align=\"left\">\n"
"<code>(SI:DEFINE-MAKE-SYSTEM-SPECIAL-VARIABLE </code><i>var</i><code> </"
"code><i>val</i><code> [</code><i>defvar-p</i><code>])</code></td>\n"
"<td valign=\"top\" align=\"right\">\n"
"<i>Special Form</i></td></tr></tbody></table>\n"
"</dt>\n"
"<dd>\n"
"<p>\n"
"Вызывает привязку <i>var</i> к <i>val</i>, \n"
"которая вычисляется во время <code>MAKE-SYSTEM</code>,\n"
"во время вызова тела <code>MAKE-SYSTEM</code>.\n"
"Это позволяет вам определять  новые переменные, подобные перечисленным "
"выше.\n"
"Если <i>defvar-p</i> указана как (или по умолчанию) <code>T</code>,\n"
"<i>var</i> определяется с помощью <code>DEFVAR</code>.\n"
"Это не дает начального значения.\n"
"Если <i>defvar-p</i> указан как <code>NIL</code>,\n"
"<i>var</i> принадлежит какой-то другой программе и здесь не\n"
"определяется(not <code>DEFVAR</code>'ed).\n"
"</p>\n"
"</dd>\n"
"</dl>"

#: in/DescrLargeSystems.htm:843
msgid "</blockquote>"
msgstr ""

#: in/DescrLargeSystems.htm:851
msgid ""
"<p>\n"
"Because information is procedurally embedded in this way, it may not be\n"
"explicit at arbitrary times.  Also, it imposes a lot of pre-defined\n"
"mechanism for talking about systems which might not be convenient or even\n"
"relevant in certain situations.\n"
"</p>"
msgstr ""
"<p>\n"
"Поскольку информация таким образом внедряется процедурно, она может не быть\n"
"явной в произвольные моменты времени. Кроме того, он навязывает множество "
"заренее\n"
"определенных механизмов для описания систем, которые могут быть не удобны "
"или даже\n"
"не актуальны в определенных ситуациях.\n"
"</p>"

#: in/DescrLargeSystems.htm:859
msgid ""
"<p>\n"
"These problems with <code>DEFSYSTEM</code>'s design \n"
"make it difficult to develop tools\n"
"which interface to those provided by <code>DEFSYSTEM</code>.\n"
"The net result is that the <code>DEFSYSTEM</code> formalism\n"
"is far less flexible than we might want it to be.\n"
"</p>"
msgstr ""
"<p>\n"
"Эти проблемы с дизайном <code>DEFSYSTEM</code> затрудняют разработку\n"
"инструментов, которые взаимодействуют с инструментами предоставляемыми\n"
"<code>DEFSYSTEM</code>.\n"
"Конечным результатом является то, что формализм <code>DEFSYSTEM</code> \n"
"гораздо менее гибок, чем нам хотелось бы.\n"
"</p>"

#: in/DescrLargeSystems.htm:861
msgid "<h2>IV. Proposal</h2>"
msgstr "<h2>IV. Предложение(План)</h2>"

#: in/DescrLargeSystems.htm:868
msgid ""
"<p>\n"
"Both <code>DEFSYSTEM</code> and <tt>MAKE</tt> offer interesting "
"functionality,\n"
"but that functionality is tightly bonded to the accompanying syntax.\n"
"Neither seeks to provide a theory  of how to allow specification \n"
"of a system without binding the user to a particular syntax.\n"
"</p>"
msgstr ""
"<p>\n"
"И <code>DEFSYSTEM</code> и <tt>MAKE</tt> предлагают интересную "
"функциональность,\n"
"но эта функциональность тесно связана с сопровождающим синтаксисом.\n"
"Ни одна из них не стремиться предоставить теорию о том, как сделать "
"доступной спецификацию\n"
"системы без привязки пользователя к определенному синтаксису.\n"
"</p>"

#: in/DescrLargeSystems.htm:878
msgid ""
"<p>\n"
"No matter what the nature of the specification language, the kinds of high\n"
"level operations to be performed upon systems is not going to vary.  We\n"
"will still want to edit, compile, load, and hardcopy systems.  Hence,\n"
"rather than propose yet another system description language with a \n"
"<i>new, improved</i> notation,\n"
"we will propose a framework in which syntax and\n"
"functionality are permitted to vary independently.\n"
"</p>"
msgstr ""
"<p>\n"
"Не зависимо от природы языка спецификаций, виды высокоуровневых операций,\n"
"выполняемых с системами не будут меняться.  Мы по прежнему хотим "
"редактировать,\n"
"компилировать, загружать и печатать системы.  Следовательно,\n"
"вместо того, чтобы предлагать еще один язык описания системы с\n"
"<i>новой, улучшеной</i> системой обозначений(нотацией),\n"
"мы предложим структуру, в которой синтаксис и функциональные возможности "
"могут\n"
"изменяться независимо.\n"
"</p>"

#: in/DescrLargeSystems.htm:888
msgid ""
"<p>\n"
"In this section, we review the details of the proposal, but its essence is\n"
"the suggestion that associated with every system there should be some\n"
"object which responds appropriately to a pre-defined set of operations\n"
"which support appropriate maintenance of the system.  Put another way, we\n"
"assert that a key problem in previous system maintenance utilities is that\n"
"they either were not object oriented or did not use their object oriented\n"
"nature to their best advantage.\n"
"</p>"
msgstr ""
"<p>\n"
"В этом разделе мы рассмотрим детали предложения, но его суть заключается в "
"том,\n"
"что с каждой системой ассоциировать какой-то объект, которые соответствующим "
"образом\n"
"реагирует на зараенее определенный набор операций, которые поддерживают\n"
"соответствующее обслуживание системы.  Иными словами, мы утверждаем, что "
"ключевая\n"
"проблема предыдущих утилит обслуживания систем, заключалась в том, что они "
"либо не были\n"
"объекто-ориентированными, либо не использовали свою объектно-ориентированную "
"природу\n"
"в своих лучших интересах.\n"
"</p>"

#: in/DescrLargeSystems.htm:897
msgid ""
"<p>\n"
"Any sort of generic operations facility (<i>e.g.,</i> that provided \n"
"in <a name=\"ref-Rees-84\"><tt>T</tt></a> <a href=\"#Rees-84\">[Rees 84]</"
"a>\n"
"or <a name=\"ref-Theriault-83\"><tt>Act-II</tt></a> <a href="
"\"#Theriault-83\">[Theriault 83]</a>) would suffice to implement the "
"proposal.\n"
"Wherever possible, we will use an abstract function-calling syntax for\n"
"presentation.  In places which call for examples from a particular\n"
"language, we will use <tt>Lisp Machine Lisp</tt> for presentation purposes.\n"
"</p>"
msgstr ""
"<p>\n"
"Для реализации этого предложения будет достаточен любой вида средств "
"имеющий\n"
"обобщенные операции (<i>например,</i> которые предусмотрены в <a name=\"ref-"
"Rees-84\"><tt>T</tt></a> <a href=\"#Rees-84\">[Rees 84]</a>\n"
"или <a name=\"ref-Theriault-83\"><tt>Act-II</tt></a> <a href="
"\"#Theriault-83\">[Theriault 83]</a>).\n"
"Везде, где возможно, для демонстрации мы будем использовать абстрактрый "
"синтаксис вызова функций.  \n"
"В тех местах, где требуются примеры из определенного языка, мы будем "
"использовать\n"
" <tt>Lisp Machine Lisp</tt> для демонстрационных целей.\n"
"</p>"

#: in/DescrLargeSystems.htm:899
msgid "<h3>Basic Protocol</h3>"
msgstr "<h3>Основной(Базовый) Протокол</h3>"

#: in/DescrLargeSystems.htm:909
msgid ""
"<p>\n"
"By studying operations that are typically performed upon files, we can make\n"
"a list of the common operations we might expect to be performed upon\n"
"systems.  One obvious choice is the update operation, which includes\n"
"compilation or translation from one language to another, parser generation,\n"
"<i>etc.</i> Another is instantiation, which includes the loading of files or "
"the\n"
"execution of some kinds of setup code.  Other useful operations might be\n"
"editing, hardcopying, and archiving.\n"
"</p>"
msgstr ""
"<p>\n"
"Изучая операции, которые обычно выполняются над файлами, мы можем составить\n"
"список общих операций, которые мы могли бы ожидать в системах.  Одним "
"очевидным\n"
"выбором является операция обновления(update), которая включает в себя "
"компиляцию или\n"
"перевод с одного языка на другой, генерацию синтаксического аналлизатора,\n"
"<i>и т.д.</i> Другой является (instantiation)создание работающего "
"экземпляра, \n"
"которая включает загрузку файлов или выполнение некоторых видов "
"установочного кода.  \n"
"Другими полезными операциями могут быть редактирование, печать, и "
"архивация.\n"
"</p>"

#: in/DescrLargeSystems.htm:913
msgid ""
"<p>\n"
"To support these operations, we define the following functions:\n"
"</p>"
msgstr ""
"<p>\n"
"Для поддержки этих операций мы определяем следующие функции:\n"
"</p>"

#: in/DescrLargeSystems.htm:925
msgid ""
"<blockquote>\n"
"<dl>\n"
"<dt><code>(<font color=\"green\">SYSDEF:</font>GENERATE-PLAN </"
"code><i>system</i><code> </code><i>operation</i><code>) -&gt; </"
"code><i>actions</i></dt>\n"
"<dd>\n"
"<p>\n"
"Given the name of an abstract <i>operation</i> (such as <code>:UPDATE</"
"code>,\n"
"<code>:INSTANTIATE</code>, or <code>:HARDCOPY</code>),\n"
"returns a list of <i>actions</i> (abstract plan steps) which will\n"
"accomplish the <i>operation</i>.\n"
"</p>\n"
"</dd>"
msgstr ""
"<blockquote>\n"
"<dl>\n"
"<dt><code>(<font color=\"green\">SYSDEF:</font>GENERATE-PLAN </"
"code><i>system</i><code> </code><i>operation</i><code>) -&gt; </"
"code><i>actions</i></dt>\n"
"<dd>\n"
"<p>\n"
"Если задано имя абстрактной операции(<i>operation</i>) (такое как <code>:"
"UPDATE</code>,\n"
"<code>:INSTANTIATE</code>, или <code>:HARDCOPY</code>),\n"
"возвращает список действий (<i>actions</i>) (абстракнтый пошаговый план), "
"которые будут\n"
"выполнять операцию(<i>operation</i>).\n"
"</p>\n"
"</dd>"

#: in/DescrLargeSystems.htm:934
msgid ""
"<dt><code>(<font color=\"green\">SYSDEF:</font>EXECUTE-PLAN </"
"code><i>system</i><code> </code><i>actions</i><code>)</code></dt>\n"
"<dd>\n"
"<p>\n"
"Executes a list of <i>actions</i> (or plan steps),\n"
"such as those returned from a\n"
"<code><font color=\"green\">SYSDEF:</font>GENERATE-PLAN</code> request.\n"
"</p>\n"
"</dd>"
msgstr ""
"<dt><code>(<font color=\"green\">SYSDEF:</font>EXECUTE-PLAN </"
"code><i>system</i><code> </code><i>actions</i><code>)</code></dt>\n"
"<dd>\n"
"<p>\n"
"Выполняет список действий(<i>actions</i>) (или плановых шагов),\n"
"например, тех, которые возвращены из запроса\n"
"<code><font color=\"green\">SYSDEF:</font>GENERATE-PLAN</code>.\n"
"</p>\n"
"</dd>"

#: in/DescrLargeSystems.htm:941
msgid ""
"<dt><code>(<font color=\"green\">SYSDEF:</font>EXPLAIN-PLAN </"
"code><i>system</i><code> </code><i>actions</i><code>)</code></dt>\n"
"<dd>\n"
"<p>\n"
"Types out an explanation of what would be the effect of executing "
"<i>actions</i>.\n"
"</p>\n"
"</dd>"
msgstr ""
"<dt><code>(<font color=\"green\">SYSDEF:</font>EXPLAIN-PLAN </"
"code><i>system</i><code> </code><i>actions</i><code>)</code></dt>\n"
"<dd>\n"
"<p>\n"
"Напечатает объяснение того, каков будет эффект от выполнения "
"действий(<i>actions</i>).\n"
"</p>\n"
"</dd>"

#: in/DescrLargeSystems.htm:950
msgid ""
"<dt><code>(<font color=\"green\">SYSDEF:</font>SOURCE-FILES </"
"code><i>system</i><code>) -&gt; </code><i>files</i></dt>\n"
"<dd>\n"
"<p>\n"
"Returns a list of the source files for the system.\n"
"</p>\n"
"</dd>\n"
"</dl>\n"
"</blockquote>"
msgstr ""
"<dt><code>(<font color=\"green\">SYSDEF:</font>SOURCE-FILES </"
"code><i>system</i><code>) -&gt; </code><i>files</i></dt>\n"
"<dd>\n"
"<p>\n"
"Возвращает список исходных файлов для системы.\n"
"</p>\n"
"</dd>\n"
"</dl>\n"
"</blockquote>"

#: in/DescrLargeSystems.htm:958
msgid ""
"<p>\n"
"To this basic set, we will add the following two functions.  It might be\n"
"argued that they are superfluous in the presence of the above functions,\n"
"but in practice having them will greatly enhance the clarity of some code.\n"
"By adding them to the standard protocol, we encourage a clearer programming\n"
"style and standardize on terms:\n"
"</p>"
msgstr ""
"<p>\n"
"К этому базовому набору мы добавим две следующие функции. Можно утверждать,\n"
"что они являются излишними в присутствии вышеуказанных функций, но на "
"практике\n"
"их наличие значительно повысит ясность кода.\n"
"Добавляя их к стандартному протоколу, мы поощряем более ясный стиль "
"программирования\n"
"и стандартизируем термины:\n"
"</p>"

#: in/DescrLargeSystems.htm:967
msgid ""
"<blockquote>\n"
"<dl>\n"
"<dt><code>(<font color=\"green\">SYSDEF:</font>EXECUTE-ACTION </"
"code><i>system</i><code> </code><i>action</i><code>)</code></dt>\n"
"<dd>\n"
"<p>\n"
"Executes a given <i>action</i> (plan step).\n"
"</p>\n"
"</dd>"
msgstr ""
"<blockquote>\n"
"<dl>\n"
"<dt><code>(<font color=\"green\">SYSDEF:</font>EXECUTE-ACTION </"
"code><i>system</i><code> </code><i>action</i><code>)</code></dt>\n"
"<dd>\n"
"<p>\n"
"Выполняет заданное действие(<i>action</i>) (шаг плана).\n"
"</p>\n"
"</dd>"

#: in/DescrLargeSystems.htm:976
msgid ""
"<dt><code>(<font color=\"green\">SYSDEF:</font>EXPLAIN-ACTION </"
"code><i>system</i><code> </code><i>action</i><code>)</code></dt>\n"
"<dd>\n"
"<p>\n"
"Types out an explanation of what would be the effect of executing action.\n"
"</p>\n"
"</dd>\n"
"</dl>\n"
"</blockquote>"
msgstr ""
"<dt><code>(<font color=\"green\">SYSDEF:</font>EXPLAIN-ACTION </"
"code><i>system</i><code> </code><i>action</i><code>)</code></dt>\n"
"<dd>\n"
"<p>\n"
"Печатает объяснение того, каков будет эффект от выполнения действия.\n"
"</p>\n"
"</dd>\n"
"</dl>\n"
"</blockquote>"

#: in/DescrLargeSystems.htm:983
msgid ""
"<p>\n"
"For convenience, we will also define that if the argument given to "
"<code>EXPLAIN</code>\n"
"or <code>EXECUTE</code>\n"
"is the name of an operation rather than a set of steps, then the\n"
"plan will be generated automatically.  This allows us to say:\n"
"</p>"
msgstr ""
"<p>\n"
"Для удобства, мы также определим, что если аргумент <code>EXPLAIN</code>\n"
"или <code>EXECUTE</code> является именем операции, а не набором шагов, \n"
"план будет сгенерирован автоматически.  Это позволяет нам сказать:\n"
"</p>"

#: in/DescrLargeSystems.htm:996
msgid ""
"<blockquote>\n"
"<table>\n"
"<tbody><tr>\n"
"<td>&nbsp;</td>\n"
"<td><code>(<font color=\"green\">SYSDEF:</font>EXECUTE-PLAN </"
"code><i>system</i><code> :UPDATE)</code></td>\n"
"</tr>\n"
"<tr>\n"
"<td>and&nbsp;</td>\n"
"<td><code>(<font color=\"green\">SYSDEF:</font>EXPLAIN-PLAN </"
"code><i>system</i><code> :UPDATE)</code></td>\n"
"</tr>\n"
"</tbody></table>\n"
"</blockquote>"
msgstr ""
"<blockquote>\n"
"<table>\n"
"<tbody><tr>\n"
"<td>&nbsp;</td>\n"
"<td><code>(<font color=\"green\">SYSDEF:</font>EXECUTE-PLAN </"
"code><i>system</i><code> :UPDATE)</code></td>\n"
"</tr>\n"
"<tr>\n"
"<td>и&nbsp;</td>\n"
"<td><code>(<font color=\"green\">SYSDEF:</font>EXPLAIN-PLAN </"
"code><i>system</i><code> :UPDATE)</code></td>\n"
"</tr>\n"
"</tbody></table>\n"
"</blockquote>"

#: in/DescrLargeSystems.htm:1000
msgid ""
"<p>\n"
"where formerly we would have had to say:\n"
"</p>"
msgstr ""
"<p>\n"
"там, где раньше мы бы сказали:\n"
"</p>"

#: in/DescrLargeSystems.htm:1013
msgid ""
"<blockquote>\n"
"<table>\n"
"<tbody><tr>\n"
"<td>&nbsp;</td>\n"
"<td><code>(<font color=\"green\">SYSDEF:</font>EXPLAIN-PLAN </"
"code><i>system</i><code> (<font color=\"green\">SYSDEF:</font>GENERATE-PLAN "
"</code><i>system</i><code> :UPDATE))</code></td>\n"
"</tr>\n"
"<tr>\n"
"<td>and&nbsp;</td>\n"
"<td><code>(<font color=\"green\">SYSDEF:</font>EXECUTE-PLAN </"
"code><i>system</i><code> (<font color=\"green\">SYSDEF:</font>GENERATE-PLAN "
"</code><i>system</i><code> :UPDATE))</code>.</td>\n"
"</tr>\n"
"</tbody></table>\n"
"</blockquote>"
msgstr ""
"<blockquote>\n"
"<table>\n"
"<tbody><tr>\n"
"<td>&nbsp;</td>\n"
"<td><code>(<font color=\"green\">SYSDEF:</font>EXPLAIN-PLAN </"
"code><i>system</i><code> (<font color=\"green\">SYSDEF:</font>GENERATE-PLAN "
"</code><i>system</i><code> :UPDATE))</code></td>\n"
"</tr>\n"
"<tr>\n"
"<td>и&nbsp;</td>\n"
"<td><code>(<font color=\"green\">SYSDEF:</font>EXECUTE-PLAN </"
"code><i>system</i><code> (<font color=\"green\">SYSDEF:</font>GENERATE-PLAN "
"</code><i>system</i><code> :UPDATE))</code>.</td>\n"
"</tr>\n"
"</tbody></table>\n"
"</blockquote>"

#: in/DescrLargeSystems.htm:1015
msgid "<h3>Defining systems</h3>"
msgstr "<h3>Определение систем</h3>"

#: in/DescrLargeSystems.htm:1022
msgid ""
"<p>\n"
"Under our proposal,\n"
"systems are described using the <code>DEFINE-SYSTEM</code> special\n"
"form.  It creates a system object and stores it globally for use at a later\n"
"time.  It has the syntax:\n"
"</p>"
msgstr ""
"<p>\n"
"По нашему предложению системы описываются с использованием\n"
"специальной формы <code>DEFINE-SYSTEM</code>.  Она создает\n"
"системный объект и сохраняет его глобально, для последующего\n"
"использования. Она имеет синтаксис:\n"
"</p>"

#: in/DescrLargeSystems.htm:1028
msgid ""
"<blockquote>\n"
"<p>\n"
"<code>(<font color=\"green\">SYSDEF:</font>DEFINE-SYSTEM </code><i>name</"
"i><code> </code><i>type</i><code> .  </code><i>options</i>).\n"
"</p>\n"
"</blockquote>"
msgstr ""

#: in/DescrLargeSystems.htm:1037
msgid ""
"<p>\n"
"The exact nature of the <i>options</i> will vary depending on the \n"
"<i>type</i> of the system.\n"
"For some systems, it may just be a list of files.  For others, it\n"
"might be a more complex data structure specifying specific dependency\n"
"information.  This proposal is designed explicitly to avoid taking a stand\n"
"of what goes in this portion of the system specification.\n"
"</p>"
msgstr ""
"<p>\n"
"Точная природа параметров(<i>options</i>) будет зависеть от типа\n"
"(<i>type</i>) системы.\n"
"Для некоторых систем это может быть просто списк файлов.  Для других,\n"
"это может быть более сложная структура данных, определяющая конкретную "
"информацию\n"
"о зависимостях.  Это предложение разработано в явном виде, чтобы избежать "
"принятия\n"
"позиции, какая идет в этой части в спецификации системы.\n"
"</p>"

#: in/DescrLargeSystems.htm:1042
msgid ""
"<p>\n"
"To support this kind of type-specific option processing, we need functions\n"
"to digest a type-specific options list:\n"
"</p>"
msgstr ""
"<p>\n"
"Для поддержки такого типа обработки опций, специфичных для типа, нам нужны "
"функции\n"
"для обработки списка опций, специфичных для каждого типа:\n"
"</p>"

#: in/DescrLargeSystems.htm:1054
msgid ""
"<blockquote>\n"
"<dl>\n"
"<dt><code>(<font color=\"green\">SYSDEF:</font>PROCESS-OPTIONS </"
"code><i>system</i><code> </code><i>options-list</i><code>)</code></dt>\n"
"<dd>\n"
"<p>\n"
"Processes an options-list,\n"
"such as the body of a <code>DEFINE-SYSTEM</code> form.\n"
"This might, but need not necessarily, be done by mapping \n"
"<code><font color=\"green\">SYSDEF:</font>PROCESS-OPTION</code> down the "
"options-list.\n"
"</p>\n"
"</dd>"
msgstr ""
"<blockquote>\n"
"<dl>\n"
"<dt><code>(<font color=\"green\">SYSDEF:</font>PROCESS-OPTIONS </"
"code><i>system</i><code> </code><i>options-list</i><code>)</code></dt>\n"
"<dd>\n"
"<p>\n"
"Обрабатывает список опций(options-list), такой как тело формы <code>DEFINE-"
"SYSTEM</code>.\n"
"Это может(но не обязательно) быть выполнено путем отображения(mapping) "
"функции\n"
"<code><font color=\"green\">SYSDEF:</font>PROCESS-OPTION</code> на список "
"опций(options-list).\n"
"</p>\n"
"</dd>"

#: in/DescrLargeSystems.htm:1066
msgid ""
"<dt><code>(<font color=\"green\">SYSDEF:</font>PROCESS-OPTION </"
"code><i>system</i><code> </code><i>name</i><code> . </code><i>data</"
"i><code>)</code></dt>\n"
"<dd>\n"
"<p>\n"
"Processes a single option with given name and data.  The option name \n"
"<code>:NAME</code> must be handled.\n"
"Handling of any other option is at the discretion of the\n"
"particular system type.\n"
"</p>\n"
"</dd>\n"
"</dl>\n"
"</blockquote>"
msgstr ""
"<dt><code>(<font color=\"green\">SYSDEF:</font>PROCESS-OPTION </"
"code><i>system</i><code> </code><i>name</i><code> . </code><i>data</"
"i><code>)</code></dt>\n"
"<dd>\n"
"<p>\n"
"Обрабатывает один параметр с указанным именем или данными.  Имя опции \n"
"<code>:NAME</code> должно быть обработано.\n"
"Обработка любой другой опции осуществляется по усмотрению для конкретного\n"
"типа системы.\n"
"</p>\n"
"</dd>\n"
"</dl>\n"
"</blockquote>"

#: in/DescrLargeSystems.htm:1068
msgid "<h3>Creating System Objects</h3>"
msgstr "<h3>Создание Системных Объектов</h3>"

#: in/DescrLargeSystems.htm:1073
msgid ""
"<p>\n"
"The <code>DEFINE-SYSTEM</code> special form is supported by a normal "
"function,\n"
"called <code>CREATE-SYSTEM</code>, which has the syntax:\n"
"</p>"
msgstr ""
"<p>\n"
"Специальная форма <code>DEFINE-SYSTEM</code> поддерживается обычной "
"функцией\n"
"называемой  <code>CREATE-SYSTEM</code>, которая имеет синтаксис:\n"
"</p>"

#: in/DescrLargeSystems.htm:1077
msgid ""
"<blockquote>\n"
"<p><code>(<font color=\"green\">SYSDEF:</font>CREATE-SYSTEM </code><i>name</"
"i><code> </code><i>type</i><code> </code><i>options</i><code>)</code>.</p>\n"
"</blockquote>"
msgstr ""

#: in/DescrLargeSystems.htm:1087
msgid ""
"<p>\n"
"<code>CREATE-SYSTEM</code> returns an object representing the system,\n"
"but does not store it in any global place.\n"
"Such an object is called an <i>anonymous system</i>.\n"
"<code>CREATE-SYSTEM</code> (and hence <code>DEFINE-SYSTEM</code>)\n"
"works by creating an object of the\n"
"designated system flavor and then calling appropriate functions to set its\n"
"name and process its options.\n"
"</p>"
msgstr ""
"<p>\n"
"<code>CREATE-SYSTEM</code> возаращает объект, представляющий систему, но\n"
"не сохраняет его ни в каком глобальном месте.\n"
"Такой объект называется  анонимной системой(<i>anonymous system</i>).\n"
"<code>CREATE-SYSTEM</code> (и следовательно <code>DEFINE-SYSTEM</code>)\n"
"работает создавая объект назначенного системного вида, а затем вызывает \n"
"соотвествующие функции, чтобы установить его имя и обработать его "
"параметры.\n"
"</p>"

#: in/DescrLargeSystems.htm:1089
msgid "<h3>Extensibility</h3>"
msgstr "<h3>Расширяемость</h3>"

#: in/DescrLargeSystems.htm:1096
msgid ""
"<p>\n"
"To be appropriately extensible, each implementation would have to define\n"
"how these functions related to the generic operations facility provided by\n"
"that language.  For example, on the Lisp Machine, the interface to flavors\n"
"might look like:\n"
"</p>"
msgstr ""
"<p>\n"
"Чтобы быть соответствующим образом расширяемой, каждая реализация должна\n"
"была бы определять, как эти функции связаны с средством обобщенных операций\n"
"предоставляемым этим языком.  Например, на Lisp Machine, интерфейс к\n"
"разновидностям может выглядеть так:\n"
"</p>"

#: in/DescrLargeSystems.htm:1099
msgid ""
"<pre> (DEFUN <font color=\"green\">SYSDEF:</font>PROCESS-OPTIONS (SYSTEM "
"OPTIONS-ALIST)\n"
"   (SEND SYSTEM :PROCESS-OPTIONS OPTIONS-ALIST))"
msgstr ""

#: in/DescrLargeSystems.htm:1102
msgid ""
" (DEFUN <font color=\"green\">SYSDEF:</font>PROCESS-OPTION (SYSTEM NAME &amp;"
"REST DATA)\n"
"   (LEXPR-SEND SYSTEM :PROCESS-OPTION NAME DATA))"
msgstr ""

#: in/DescrLargeSystems.htm:1107
msgid ""
"   .\n"
"   .\n"
"   .\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1118
msgid ""
"<font color=\"green\">\n"
"<p>\n"
"[<tt>LEXPR-SEND</tt> is to <tt>SEND</tt> as <tt>APPLY</tt> \n"
"is to <tt>FUNCALL</tt> in Common Lisp.\n"
"In Maclisp, however, and in the Lisp Machine's Zetalisp dialect,\n"
"<tt>APPLY</tt> was a function of exactly two arguments and one needed to "
"use\n"
"<tt>LEXPR-FUNCALL</tt> to get the multi-argument version of <tt>APPLY</tt>\n"
"that Common Lisp has.  <tt>LEXPR-SEND</tt> was named to be parallel to\n"
"<tt>LEXPR-FUNCALL</tt>.  Instead of doing:\n"
"</p>"
msgstr ""
"<font color=\"green\">\n"
"<p>\n"
"[<tt>LEXPR-SEND</tt> относится к <tt>SEND</tt> как <tt>APPLY</tt> \n"
"относится к <tt>FUNCALL</tt> в Common Lisp.\n"
"Однако в Maclisp и на диалекте Lisp Machine's Zetalisp,\n"
"<tt>APPLY</tt> была функцией ровно двух аргументов, и нужно было "
"использовать\n"
"<tt>LEXPR-FUNCALL</tt> чтобы получить версию <tt>APPLY</tt>\n"
"с несколькими аргументами, которую имеет Common Lisp.  <tt>LEXPR-SEND</tt> "
"был назван\n"
"в паралелель с\n"
"<tt>LEXPR-FUNCALL</tt>.  Вместо того чтобы делать:\n"
"</p>"

#: in/DescrLargeSystems.htm:1121
msgid ""
"<pre> (LEXPR-FUNCALL #'SEND msg-key msg-key<sub>1</sub> ... msg-key<sub>m</"
"sub> more-msg-keys)\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1125
msgid ""
"<p>\n"
"one would just write:\n"
"</p>"
msgstr ""
"<p>\n"
"можно было просто написать:\n"
"</p>"

#: in/DescrLargeSystems.htm:1128
msgid ""
"<pre> (LEXPR-SEND msg-key msg-key<sub>1</sub> ... msg-key<sub>m</sub> more-"
"msg-keys)\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1141
msgid ""
"<p>\n"
"The \"<tt>LEXPR-</tt>\" part of this name arises because in Maclisp\n"
"functions of a fixed number of arguments were called \"exprs\" \n"
"and functions of a variable number of arguments were called \"lexprs\".\n"
"Note that the <tt>SEND</tt> action being done is not necessarily to\n"
"a function (or message handler) of a variable number of arguments;  \n"
"but such a function (or message handler) could be accommodated by\n"
"<tt>LEXPR-SEND</tt>.\n"
"<br>\n"
" --<i>KMP</i> 21-Jan-2001]\n"
"</p>\n"
"</font>"
msgstr ""
"<p>\n"
"Часть этого имени \"<tt>LEXPR-</tt>\" возникает потому, что в Maclisp\n"
"функции с фиксированным числом аргументов назывались \"exprs\",\n"
"а функции с переменным числом аргументов назывались \"lexprs\".\n"
"Обратите внимание, что действие выполняемое <tt>SEND</tt> не обязательно\n"
"относиться к функции(или обрабочику сообщения) с переменным числом "
"аргументов;  \n"
"но такая функция (или обработчик сообщений) может быть реализована с "
"помощью\n"
"<tt>LEXPR-SEND</tt>.\n"
"<br>\n"
" --<i>KMP</i> 21-Jan-2001]\n"
"</p>\n"
"</font>"

#: in/DescrLargeSystems.htm:1144
msgid "<h3>Exploiting Inheritance</h3>"
msgstr "<h3>Использование Наследования</h3>"

#: in/DescrLargeSystems.htm:1149
msgid ""
"<p>\n"
"Languages which provide generic operations and facilities for type\n"
"inheritance would probably offer at least two pre-defined types.\n"
"</p>"
msgstr ""
"<p>\n"
"Языки, которые предоставляют обобщенные операции и средства для "
"наследования\n"
"типов, вероятно, предложат по крайней мере два предопределенных типа.\n"
"</p>"

#: in/DescrLargeSystems.htm:1158
msgid ""
"<p>\n"
"A type called <code>SYSTEM</code> should be at the base.\n"
"It should have no properties\n"
"other than identifying the object as a system.  Designers who wish to start\n"
"over \"from scratch\" in designing new types of systems adhering to the\n"
"protocol we propose would start with the <code>SYSTEM</code>\n"
"type and work from there.\n"
"</p>"
msgstr ""
"<p>\n"
"Тип с названием <code>SYSTEM</code> должен быть основным.\n"
"Он не должен иметь никаких свойств, кроме идентификации объекта\n"
"как системы.  Разработчики, которые хотят начать все заново \"с нуля\", при\n"
"разработке новых типов систем, придерживающихся протокола, который мы "
"предлагаем,\n"
"начнут с типа <code>SYSTEM</code> и будут работать от него.\n"
"</p>"

#: in/DescrLargeSystems.htm:1169
msgid ""
"<p>\n"
"Another type, which we shall call <code>VANILLA-SYSTEM</code>,\n"
"might offer some very\n"
"general functionality which might be of use to many kinds of systems.\n"
"Using whatever inheritance mechanism was appropriate to the language,\n"
"implementors of many new system types might be able to inherit from this\n"
"slightly less general type rather than starting from scratch and building\n"
"their system type from type <code>SYSTEM</code>.\n"
"Naturally, <code>VANILLA-SYSTEM</code> would inherit from <code>SYSTEM</"
"code>.\n"
"</p>"
msgstr ""
"<p>\n"
"Другой тип, который мы назовем <code>VANILLA-SYSTEM</code>,\n"
"может предложить некоторые общие функциональные возможности, которые \n"
"могут быть полезными для многих типов систем.\n"
"Используя какой-либо механизм наследования, подходящий для языка, "
"разработчики\n"
"многих новых типов систем могут наследовать от этого, немного менее общего "
"типа,\n"
"вместо того, чтобы начинать с нуля и строить свой тип системы из типа  "
"<code>SYSTEM</code>.\n"
"Естественно, <code>VANILLA-SYSTEM</code> наследуется от <code>SYSTEM</"
"code>.\n"
"</p>"

#: in/DescrLargeSystems.htm:1178
msgid ""
"<p>\n"
"In the Lisp Machine, for example, customizing can frequently be done by\n"
"mixing <code>VANILLA-SYSTEM</code>\n"
"into the new flavor and adding or changing a few\n"
"methods.  Nothing prevents the designer from starting from scratch and\n"
"implementing all the methods from scratch; but this will typically involve\n"
"more work than is necessary.\n"
"</p>"
msgstr ""
"<p>\n"
"Например, в Lisp Machine настройку можно выполнить, смешав <code>VANILLA-"
"SYSTEM</code>\n"
"с новой особенностью(вкусом), добавив  или изменив несколько методов.  Ничто "
"не мешает\n"
"разработчику начать с нуля и реализовать все методы с нуля; но обычно это "
"требует больше\n"
"работы, чем необходимо.\n"
"</p>"

#: in/DescrLargeSystems.htm:1182
msgid ""
"<p>\n"
"A typical system flavor might look like:\n"
"</p>"
msgstr ""
"<p>\n"
"Типичная системная особенность может выглядеть так:\n"
"</p>"

#: in/DescrLargeSystems.htm:1186
msgid ""
"<pre> (DEFFLAVOR system-type (...instance variables...)\n"
"            (VANILLA-SYSTEM))\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1194
msgid ""
"<font color=\"green\">\n"
"<p>\n"
"[Lisp Machine <code>DEFFLAVOR</code> was approximately the equivalent of\n"
" <code>DEFCLASS</code>, except that the slots list (called \"instance\n"
" variables\") and superclass list came in the reverse order, and the\n"
" syntax for the slots, was slightly different:\n"
"</p>"
msgstr ""
"<font color=\"green\">\n"
"<p>\n"
"[Lisp Machine <code>DEFFLAVOR</code> был приблизительно эквивалентен\n"
" <code>DEFCLASS</code>, за исключением того, что список слотов (называемый\n"
"переменные экземпляра(\"instance variables\")) и список суперклассов шли в\n"
"обратном порядке, а синтаксис для слотов немного отличался:\n"
"</p>"

#: in/DescrLargeSystems.htm:1198
msgid ""
"<pre> (DEFCLASS system-type (VANILLA-SYSTEM)\n"
"   (...slots...))\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1203
msgctxt "in/DescrLargeSystems.htm:1203"
msgid ""
"<p>\n"
" --<i>KMP</i> 14-Jan-2001]\n"
"</p>\n"
"</font>"
msgstr ""

#: in/DescrLargeSystems.htm:1207
msgid ""
"<p>\n"
"followed by definitions of new or customized methods.\n"
"</p>"
msgstr ""
"<p>\n"
"с последующим определением новых или индивидуализированных(переписанных для "
"своих нужд) методов.\n"
"</p>"

#: in/DescrLargeSystems.htm:1213
msgid ""
"<p>\n"
"For example, on the Lisp Machine,\n"
"the <code>:PROCESS-OPTIONS</code> method might be\n"
"expected to be defined by:\n"
"</p>"
msgstr ""
"<p>\n"
"Например, на Lisp Machine,\n"
"можно ожидать, что метод <code>:PROCESS-OPTIONS</code> будет определяться "
"как:\n"
"</p>"

#: in/DescrLargeSystems.htm:1218
msgid ""
"<pre> (DEFMETHOD (VANILLA-SYSTEM :PROCESS-OPTIONS) (OPTIONS)\n"
"   (DOLIST (OPTION OPTIONS)\n"
"     (LEXPR-SEND SELF :PROCESS-OPTION OPTION)))\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1228
msgid ""
"<font color=\"green\">\n"
"<p>\n"
"[Lisp Machine <code>DEFMETHOD</code> was similar to\n"
" Common Lisp <code>DEMETHOD</code>, but it only did dispatch on a single,\n"
" implied argument, and its syntax was different.  Also, the method name\n"
" was generally in the Common Lisp instead of the prevailing package, since\n"
" the call would be done by a function <code>SEND</code>.\n"
" In Common Lisp, the above <code>DEFMETHOD</code> might be written: \n"
"</p>"
msgstr ""
"<font color=\"green\">\n"
"<p>\n"
"[Lisp Machine <code>DEFMETHOD</code> был похож на\n"
" Common Lisp <code>DEMETHOD</code>, но он выполнял диспетчеризацию только по "
"одному,\n"
" предполагаемому аргументу, и его синтаксис был другим. Кроме того, имя "
"метода обычно\n"
" находилось в Common Lisp вместо преобладающего пакета, поскольку вызов "
"выполнялся бы\n"
" функцией <code>SEND</code>.\n"
" В Common Lisp, вышеупомянутый <code>DEFMETHOD</code> может быть записан: \n"
"</p>"

#: in/DescrLargeSystems.htm:1234
msgid ""
"<pre> (DEFMETHOD PROCESS-OPTIONS ((SYSTEM VANILLA-SYSTEM) OPTIONS)\n"
"   (DOLIST (DATA OPTIONS)\n"
"     (APPLY #'PROCESS-OPTION SYSTEM (CAR DATA) (CDR DATA)))\n"
"   SYSTEM)\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1238
msgid ""
"<p>\n"
"And instead of the Lisp Machine's syntax:\n"
"</p>"
msgstr ""
"<p>\n"
"И вместо синтаксиса Lisp Machine:\n"
"</p>"

#: in/DescrLargeSystems.htm:1244
msgid ""
"<blockquote>\n"
"<p>\n"
"<code>(SEND </code><i>system</i><code> :PROCESS-OPTIONS </code><i>options</"
"i><code>)</code>\n"
"</p>\n"
"</blockquote>"
msgstr ""

#: in/DescrLargeSystems.htm:1248
msgid ""
"<p>\n"
"in Common Lisp one might instead write:\n"
"</p>"
msgstr ""
"<p>\n"
"в Common Lisp можно вместо этого написать:\n"
"</p>"

#: in/DescrLargeSystems.htm:1254
msgid ""
"<blockquote>\n"
"<p>\n"
"<code>(PROCESS-OPTIONS </code><i>system</i><code> </code><i>options</"
"i><code>)</code>\n"
"</p>\n"
"</blockquote>"
msgstr ""

#: in/DescrLargeSystems.htm:1259
msgctxt "in/DescrLargeSystems.htm:1259"
msgid ""
"<p>\n"
" --<i>KMP</i> 14-Jan-2001]\n"
"</p>\n"
"</font>"
msgstr ""

#: in/DescrLargeSystems.htm:1271
msgid ""
"<p>\n"
"This is defined as part of <code>VANILLA-SYSTEM</code>\n"
"to save everyone the trouble of\n"
"writing that same method.  In fact, \n"
"<code>VANILLA-SYSTEM</code> might even define\n"
"<code>:PROCESS-OPTION</code> to use\n"
"<code>:CASE</code> method dispatch (so that handling each kind of\n"
"option may be defined by a separate <code>DEFMETHOD</code> form).\n"
"If so, we might expect\n"
"to also find definitions such as these in <code>VANILLA-FLAVOR</code>:\n"
"</p>"
msgstr ""
"<p>\n"
"Он определен как часть <code>VANILLA-SYSTEM</code>, чтобы избавить\n"
"всех от необходимости писать тот же метод. Фактически, \n"
"<code>VANILLA-SYSTEM</code> может даже определить\n"
"<code>:PROCESS-OPTION</code> для использования диспетчеризации метода\n"
"<code>:CASE</code> (так что обработка каждого типа опций может быть\n"
"определена отдельной формой <code>DEFMETHOD</code>).\n"
"Если это так, мы могли бы также ожидать, чтобы найти такие определения\n"
"и в <code>VANILLA-FLAVOR</code>:\n"
"</p>"

#: in/DescrLargeSystems.htm:1274
msgid ""
"<pre> (DEFMETHOD (VANILLA-SYSTEM :CASE :PROCESS-OPTION :FULL-NAME) (NAME)\n"
"   (SETQ FULL-NAME (STRING NAME)))"
msgstr ""

#: in/DescrLargeSystems.htm:1277
msgid ""
" (DEFMETHOD (VANILLA-SYSTEM :CASE :PROCESS-OPTION :SHORT-NAME) (NAME)\n"
"   (SETQ SHORT-NAME (STRING NAME)))"
msgstr ""

#: in/DescrLargeSystems.htm:1281
msgid ""
" (DEFMETHOD (VANILLA-SYSTEM :CASE :PROCESS-OPTION :NAME) (NAME)\n"
"   (IF (NOT SHORT-NAME) (SETQ SHORT-NAME (STRING NAME)))\n"
"   (IF (NOT FULL-NAME) (SETQ FULL-NAME (STRING NAME))))"
msgstr ""

#: in/DescrLargeSystems.htm:1285
msgid ""
"   .\n"
"   .\n"
"   ."
msgstr ""

#: in/DescrLargeSystems.htm:1289
msgid ""
" (DEFMETHOD (VANILLA-SYSTEM :OTHERWISE :PROCESS-OPTION) (NAME &amp;REST "
"DATA)\n"
"   (FERROR \"Bad option: ~S~%Data: ~S\" NAME (COPYLIST DATA)))\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1296
msgid ""
"<font color=\"green\">\n"
"<p>\n"
"[The <code>:CASE</code> method combination was a kludge to allow limited\n"
" two-argument dispatch, where the second argument was a keyword.  The\n"
" approximate equivalent of the above, cast into Common Lisp would be:\n"
"</p>"
msgstr ""
"<font color=\"green\">\n"
"<p>\n"
"[Комбинация методов <code>:CASE</code> была ляпом, позволяющим ограниченную\n"
" диспетчеризацию с двумя аргументами, где воторым агрументом было второе "
"ключевое\n"
" слово. Примерный эквивалент приведенного выше кода в Common Lisp:\n"
"</p>"

#: in/DescrLargeSystems.htm:1302
msgid ""
"<pre> (DEFMETHOD PROCESS-OPTION ((SYSTEM VANILLA-SYSTEM) (KEY (EQL :NAME)) "
"&amp;REST DATA)\n"
"   (WITH-SLOTS (SHORT-NAME FULL-NAME) SYSTEM\n"
"     (DESTRUCTURING-BIND (DATUM) DATA\n"
"       (IF (NOT SHORT-NAME) (SETQ SHORT-NAME (STRING DATUM)))\n"
"       (IF (NOT FULL-NAME)  (SETQ FULL-NAME  (STRING DATUM))))))"
msgstr ""

#: in/DescrLargeSystems.htm:1307
msgid ""
" (DEFMETHOD PROCESS-OPTION ((SYSTEM VANILLA-SYSTEM) (KEY (EQL :SHORT-NAME)) "
"&amp;REST DATA)\n"
"   (WITH-SLOTS (SHORT-NAME FULL-NAME) SYSTEM\n"
"     (DESTRUCTURING-BIND (DATUM) DATA\n"
"       (SETQ SHORT-NAME (STRING DATUM)))))"
msgstr ""

#: in/DescrLargeSystems.htm:1312
msgid ""
" (DEFMETHOD PROCESS-OPTION ((SYSTEM VANILLA-SYSTEM) (KEY (EQL :FULL-NAME)) "
"&amp;REST DATA)\n"
"   (WITH-SLOTS (SHORT-NAME FULL-NAME) SYSTEM\n"
"     (DESTRUCTURING-BIND (DATUM) DATA\n"
"       (SETQ FULL-NAME (STRING DATUM)))))"
msgstr ""

#: in/DescrLargeSystems.htm:1316
msgid ""
"  .\n"
"  .\n"
"  ."
msgstr ""

#: in/DescrLargeSystems.htm:1321
msgid ""
" (DEFMETHOD PROCESS-OPTION ((SYSTEM VANILLA-SYSTEM) (KEY T) &amp;REST DATA)\n"
"   (ERROR \"The option ~S is not known to ~S.~%Data: ~S\"\n"
"          KEY SYSTEM DATA))\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1330
msgid ""
"<p>\n"
"Note also that in the last of these methods, the call to \n"
"Lisp Machine <code>COPYLIST</code> (same as Common Lisp <code>COPY-LIST</"
"code>)\n"
"is not required because Common Lisp rest lists are already heap allocated;\n"
"the Lisp Machine used stack-allocated rest lists by default so it was "
"advisable\n"
"to explicitly <code>COPYLIST</code> arguments that might be returned or \n"
"stored in the heap.\n"
"</p>"
msgstr ""
"<p>\n"
"Также обратите внимание, что в последнем из этих методов вызов \n"
"Lisp Machine <code>COPYLIST</code> (такой же, как Common Lisp <code>COPY-"
"LIST</code>)\n"
"не требуется, поскольку оставшиеся(rest) списки Common Lisp уже выделены в "
"куче;\n"
"Lisp Machine использовала по умолчанию выделение в стеке для "
"оставшихся(rest) списков,\n"
"поэтому было бы целесообразно явно указывать аргументы <code>COPYLIST</"
"code>, которые\n"
"могут быть возвращены или сохранены в куче.\n"
"</p>"

#: in/DescrLargeSystems.htm:1335
msgctxt "in/DescrLargeSystems.htm:1335"
msgid ""
"<p>\n"
" --<i>KMP</i> 14-Jan-2001]\n"
"</p>\n"
"</font>"
msgstr ""

#: in/DescrLargeSystems.htm:1342
msgid ""
"<p>\n"
"Presumably, systems inheriting from <code>VANILLA-SYSTEM</code>\n"
"would define additional\n"
"<code>:PROCESS-OPTION</code> methods for any specifications appropriate \n"
"to them.\n"
"</p>"
msgstr ""
"<p>\n"
"Предположительно, системы, наследуемые от <code>VANILLA-SYSTEM</code>\n"
"будут определяеть дополнительные методы\n"
"<code>:PROCESS-OPTION</code> для любых соответствующих им спецификаций.\n"
"</p>"

#: in/DescrLargeSystems.htm:1344
msgid "<h3>Modular Extensions</h3>"
msgstr "<h3>Модульные Расширения</h3>"

#: in/DescrLargeSystems.htm:1350
msgid ""
"<p>\n"
"Given these basic facilities, it is easy to make modular extensions.  The\n"
"function <code>HARDCOPY-SYSTEM</code>\n"
"discussed earlier could be written simply as:\n"
"</p>"
msgstr ""
"<p>\n"
"Учитывая базовые возможности, легко создавать модульные расширения. "
"Обсуждаемая\n"
"ранее функция <code>HARDCOPY-SYSTEM</code>\n"
"может быть записана просто как:\n"
"</p>"

#: in/DescrLargeSystems.htm:1354
msgid ""
"<pre> (DEFUN HARDCOPY-SYSTEM (SYSTEM)\n"
"   (MAPC #'HARDCOPY-FILE (<font color=\"green\">SYSDEF:</font>SOURCE-FILES "
"SYSTEM)))\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1359
msgid ""
"<p>\n"
"Likewise, a facility for saving a snapshot of a system's source files to\n"
"another directory might be written:\n"
"</p>"
msgstr ""
"<p>\n"
"Аналогично, можно написать средство для архивирования(сохранения) "
"моментального \n"
"снимка исходных файлов системы в другой каталог:\n"
"</p>"

#: in/DescrLargeSystems.htm:1364
msgid ""
"<pre> (DEFUN ARCHIVE-SYSTEM (SYSTEM ARCHIVE-DIRECTORY)\n"
"   (DOLIST (FILE (<font color=\"green\">SYSDEF:</font>SOURCE-FILES SYSTEM))\n"
"     (COPY-FILE FILE ARCHIVE-DIRECTORY)))\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1373
msgid ""
"<p>\n"
"There's no reason the user should necessarily have to write things like\n"
"this himself.  In general, it's nice to have system libraries that have\n"
"this sort of thing pre-defined.  The important thing is that if they were\n"
"not primitively provided, they would be no problem to write as extensions\n"
"because a basic set of operations has been chosen which lends itself to\n"
"modular extension.\n"
"</p>"
msgstr ""
"<p>\n"
"Нет причин, по которым пользователь должен сам писать такие вещи. В общем,\n"
"хорошо иметь системные библиотеки, которые имеют подобные вещи заранее.\n"
"Важно то, что если бы они не были изначально предоставлены, их  можно было\n"
"бы без проблем написать как расширения, потому что был выбран набор базовых\n"
"операций, который поддается модульному расширению.\n"
"</p>"

#: in/DescrLargeSystems.htm:1380
msgid ""
"<p>\n"
"Even the fancier options to <code>DEFSYSTEM</code>,\n"
"such as the <code>:SELECTIVE</code> option, fall\n"
"directly out of this modularization.  For example, the essence of the\n"
"<code>:SELECTIVE</code> option is captured by:\n"
"</p>"
msgstr ""
"<p>\n"
"Даже более изящные опции <code>DEFSYSTEM</code>,\n"
"такие как опция <code>:SELECTIVE</code>, выводятся на прямую\n"
"из этой модульности.  Например, суть опции\n"
"<code>:SELECTIVE</code> выражается как:\n"
"</p>"

#: in/DescrLargeSystems.htm:1388
msgid ""
"<pre> (LET ((PLAN (<font color=\"green\">SYSDEF:</font>GENERATE-PLAN system :"
"UPDATE)))\n"
"   (FORMAT T \"~&amp;To update ~A:\" system)\n"
"   (DOLIST (STEP PLAN)\n"
"     (<font color=\"green\">SYSDEF:</font>EXPLAIN-ACTION system STEP))\n"
"   (UNLESS (NOT (Y-OR-N-P \"Ready to go ahead?  \"))\n"
"     (<font color=\"green\">SYSDEF:</font>EXECUTE-PLAN system PLAN)))\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1393
msgid ""
"<p>\n"
"Variations are also simple.  For example, per-step querying could be\n"
"achieved by:\n"
"</p>"
msgstr ""
"<p>\n"
"Вариации тоже просты. Например, пошаговые запросы могут быть выполнены\n"
"с помощью:\n"
"</p>"

#: in/DescrLargeSystems.htm:1399
msgid ""
"<pre> (DOLIST (STEP (<font color=\"green\">SYSDEF:</font>GENERATE-PLAN "
"system :UPDATE))\n"
"   (<font color=\"green\">SYSDEF:</font>EXPLAIN-ACTION system STEP)\n"
"   (UNLESS (NOT (Y-OR-N-P \"OK? \"))\n"
"     (<font color=\"green\">SYSDEF:</font>EXECUTE-ACTION system STEP)))\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1401
msgid "<h3>Systems with Simple Dependencies</h3>"
msgstr "<h3>Системы с Простыми Зависимостями</h3>"

#: in/DescrLargeSystems.htm:1406
msgid ""
"<p>\n"
"Until now, not much has been said about what kind of information should go\n"
"into the options portion of  <code>DEFINE-SYSTEM</code> form.\n"
"</p>"
msgstr ""
"<p>\n"
"До сих пор, мало что было сказано, о том, какая информация должна входить в "
"раздел \n"
"параметров формы <code>DEFINE-SYSTEM</code>.\n"
"</p>"

#: in/DescrLargeSystems.htm:1414
msgid ""
"<p>\n"
"In the simplest case, all we might want to specify is the set of files\n"
"involved.  So, for example, we might imagine a kind of system called\n"
"<code>SIMPLE-SYSTEM</code>\n"
"in which the options section was just a list of files, so\n"
"that the system we earlier specified by:\n"
"</p>"
msgstr ""
"<p>\n"
"В простейшем случае всё, что мы могли бы указать, это набор\n"
"задействованных файлов. Так, например, мы могли бы представить\n"
"себе систему под названием <code>SIMPLE-SYSTEM</code>, в которой\n"
"раздел параметров представлял собой список файлов, так что\n"
"система, которую мы ранее указали с помощью:\n"
"</p>"

#: in/DescrLargeSystems.htm:1418
msgid ""
"<pre> (DEFINE-SYSTEM-SOURCES 'MYSYS\n"
"   \"MACROS.LISP\" \"UTILITIES.LISP\" \"MAIN.LISP\")\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1422
msgid ""
"<p>\n"
"would now be specified by:\n"
"</p>"
msgstr ""
"<p>\n"
"теперь будет определяться как:\n"
"</p>"

#: in/DescrLargeSystems.htm:1426
msgid ""
"<pre> (DEFINE-SYSTEM MYSYS SIMPLE-SYSTEM\n"
"   \"MACROS.LISP\" \"UTILITIES.LISP\" \"MAIN.LISP\").\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1431
msgid ""
"<p>\n"
"Contrast the simplicity of this approach with the <tt>MAKE</tt> \n"
"specification of:\n"
"</p>"
msgstr ""
"<p>\n"
"Сравните простоту этого подхода со спецификацией <tt>MAKE</tt>:\n"
"</p>"

#: in/DescrLargeSystems.htm:1443
msgid ""
"<pre> (DEFINE-FOR-MAKE MYSYS\n"
"   (\"main.bin\" (\"utilities.bin\" \"macros.bin\" \"main.lisp\")\n"
"               (LOAD-IF-NOT-LOADED \"macros.bin\")\n"
"               (LOAD-IF-NOT-LOADED \"utilities.bin\")\n"
"               (LOAD (COMPILE-FILE \"main.lisp\")))\n"
"   (\"utilities.bin\" (\"macros.bin\" \"utilities.lisp\")\n"
"                    (LOAD-IF-NOT-LOADED \"macros.bin\")\n"
"                    (LOAD (COMPILE-FILE \"utilities.lisp\")))\n"
"   (\"macros.bin\" (\"macros.lisp\")\n"
"                 (LOAD (COMPILE-FILE \"macros.lisp\"))))\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1447
msgid ""
"<p>\n"
"or the <code>DEFSYSTEM</code> form:\n"
"</p>"
msgstr ""
"<p>\n"
"или формой <code>DEFSYSTEM</code>:\n"
"</p>"

#: in/DescrLargeSystems.htm:1460
msgid ""
"<pre> (DEFSYSTEM MYSYS\n"
"   (:MODULE MACROS (\"macros\"))\n"
"   (:MODULE UTIL (\"utilities\"))\n"
"   (:MODULE MAIN (\"main\"))\n"
"   (:COMPILE-LOAD MACROS)\n"
"   (:COMPILE-LOAD-INIT UTIL (MACROS)\n"
"                       (:FASLOAD MACROS)\n"
"                       (:FASLOAD MACROS))\n"
"   (:COMPILE-LOAD-INIT MAIN (MACROS UTIL)\n"
"                       (:FASLOAD MACROS UTIL)\n"
"                       (:FASLOAD MACROS UTIL))).\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1467
msgid ""
"<p>\n"
"The system defined by this <code>DEFINE-SYSTEM</code> form is a\n"
"first-class object which\n"
"can be inspected and manipulated by the abstraction functions proposed in\n"
"the last section.\n"
"</p>"
msgstr ""
"<p>\n"
"Система, определенная этой формой <code>DEFINE-SYSTEM</code>, является\n"
"объектом первого класса, который может исследоваться и управляться с "
"помощью\n"
"функций абстракции предложенных в последнем разделе.\n"
"</p>"

#: in/DescrLargeSystems.htm:1469
msgid "<h3>System with Complex Dependencies</h3>"
msgstr "<h3>Система со Сложными Зависимостями</h3>"

#: in/DescrLargeSystems.htm:1479
msgid ""
"<p>\n"
"Consider now a system with a set of macros (in <tt>MACROS.LISP</tt>)\n"
"that expand\n"
"into calls to functions in some utility package \n"
"(in <tt>MACRO-SUPPORT.LISP</tt>).\n"
"It should be an abstraction violation for the consumers of the macro\n"
"package to have to know what support is necessary for the package to run.\n"
"Yet with <code>DEFSYSTEM</code>, the specification must be written:\n"
"</p>"
msgstr ""
"<p>\n"
"Теперь рассмотрим систему с набором макросов (in <tt>MACROS.LISP</tt>)\n"
"которые расширяются до вызовов функций в некотором пакете утилит\n"
"(в <tt>MACRO-SUPPORT.LISP</tt>).\n"
"Пользователи макропакета будут нарушать абстракцию, своим знанием, какая \n"
"поддержка необходима для запуска пакета.\n"
"Тем не менее, с <code>DEFSYSTEM</code>, спецификация должна быть написана:\n"
"</p>"

#: in/DescrLargeSystems.htm:1494
msgid ""
"<pre> (DEFSYSTEM MYSYS\n"
"   (:MODULE MACROS (\"macros\"))\n"
"   (:MODULE MACRO-SUPPORT (\"macro-support\"))\n"
"   (:MODULE FOO (\"foo\"))\n"
"     .\n"
"     .\n"
"     .\n"
"   (:COMPILE-LOAD MACRO-SUPPORT)\n"
"   (:COMPILE-LOAD MACROS)\n"
"   (:COMPILE-LOAD-INIT FOO (MACROS)\n"
"                           (:FASLOAD MACROS)\n"
"                           (:FASLOAD MACRO-SUPPORT))\n"
"   ...)\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1503
msgid ""
"<p>\n"
"A user interested in abstraction might object to having to specify \n"
"<code>FOO</code>'s\n"
"dependency upon <code>MACRO-SUPPORT</code> explicitly.\n"
"Certainly users of <code>DEFSYSTEM</code>\n"
"have complained that this lack of abstraction makes very large systems very\n"
"hard to specify and maintain using <code>DEFSYSTEM</code>.\n"
"</p>"
msgstr ""
"<p>\n"
"Пользователь заинтересованный в абстракции, может возразить против явного\n"
"указания зависимости <code>FOO</code> от <code>MACRO-SUPPORT</code>.\n"
"Конечно, пользователи <code>DEFSYSTEM</code>\n"
"жаловались, что это отсутствие абстракции делает очень большие системы очень "
"трудно\n"
"определимыми и поддериваемыми с помощью <code>DEFSYSTEM</code>.\n"
"</p>"

#: in/DescrLargeSystems.htm:1513
msgid ""
"<p>\n"
"Armed with our new <code>DEFINE-SYSTEM</code> proposal, a new notation could "
"be\n"
"developed to handle the situation.  we might, for example, propose a\n"
"notation where rather than say \"<code>FOO</code> depends on\n"
"<code>MACRO-SUPPORT</code>\" explicitly\n"
"(as happens in <code>DEFSYSTEM</code>), \n"
"we could say \"Using <code>MACROS</code> causes a need for\n"
"<code>MACRO-SUPPORT</code>.\"  Such a notation might look like:\n"
"</p>"
msgstr ""
"<p>\n"
"Вооружившись нашим новым предложением <code>DEFINE-SYSTEM</code>, можно было "
"бы\n"
"разработать новую систему обозначений, чтобы справиться с ситуацией.  \n"
"Мы могли бы, например, предложить нотацию, где вместо того, чтобы явно\n"
"сказать \"<code>FOO</code> зависит от\n"
"<code>MACRO-SUPPORT</code>\" (как это происходит в <code>DEFSYSTEM</"
"code>), \n"
"мы могли бы сказать \"Использование <code>MACROS</code> вызывает "
"небходимость\n"
"в <code>MACRO-SUPPORT</code>.\"  Такая запись может выглядеть так:\n"
"</p>"

#: in/DescrLargeSystems.htm:1525
msgid ""
"<pre> (DEFINE-SYSTEM MYSYS MODULAR-SYSTEM\n"
"   (:MODULE MACRO-SUPPORT (\"macro-support\"))\n"
"   (:MODULE MACROS (\"macros\")\n"
"    (:CAUSES\n"
"     (:NEEDS\n"
"      (:INSTANTIATE MACRO-SUPPORT))))\n"
"   (:MODULE FOO (\"foo\")\n"
"    (:NEEDS\n"
"     (:UPDATE MACROS)))\n"
"   ...)\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1535
msgid ""
"<p>\n"
"To argue for or against some particular new notation is not the point of\n"
"this paper.  The real point is that the proposed framework provides a means\n"
"of introducing alternate notations in a way that does not interfere with\n"
"existing notations and tools.  Existing tools can operate correctly upon\n"
"systems created with new notations such as this because it is the\n"
"functional behavior of systems which has been standardized, not the\n"
"notation.\n"
"</p>"
msgstr ""
"<p>\n"
"Спорить за или против какой-то конкретной новой нотации не является смыслом\n"
"этой статьи. Реальная точка зрения состоит в том, что предлагаемая "
"структура\n"
"обеспечивает возможность введения альтернативных обозначений таким образом,\n"
"чтобы это не мешало существующим обозначениям и инструментам. Существующие\n"
"инструменты могут корректно работать с системами, созданными с "
"использованием\n"
"новых обозначений, таких как эта, потому что стандартизировано "
"функциональное\n"
"поведение систем, а не обозначений.\n"
"</p>"

#: in/DescrLargeSystems.htm:1545
msgid ""
"<p>\n"
"<a name=\"ref-Robbins-84\">In</a> <a href=\"#Robbins-84\">[Robbins 84]</a>,\n"
"still another notation (to accompany a tool called <tt>BUILD</tt>)\n"
"is proposed for specifying module dependency information.  Although the\n"
"data abstractions proposed in this paper were not designed with <tt>BUILD</"
"tt>\n"
"in mind, they seem appropriate to support it anyway.  Had the proposed\n"
"framework already been in effect, it would probably have been considerably\n"
"simpler for Robbins to experiment with his new notation.\n"
"</p>"
msgstr ""
"<p>\n"
"<a name=\"ref-Robbins-84\">В </a> <a href=\"#Robbins-84\">[Robbins 84]</a>,\n"
"предлагается еще одна нотация (сопровождающая инструмент под названием "
"<tt>BUILD</tt>)\n"
"для указания информации о зависимостях модуля. Хотя абстракции данных, "
"предложенная\n"
"в этой статье, не были разработаны с учетом требований <tt>BUILD</tt>, они "
"все равно\n"
"кажутся уместными для поддержки. Если бы предлагаемая струкутра уже "
"существовала,\n"
"Robbins-у вероятно, было бы значительно проще экспериментировать с этими "
"новыми\n"
"обозначениями.\n"
"</p>"

#: in/DescrLargeSystems.htm:1547
msgid "<h3>Systems with \"Idiosyncratic\" Dependencies</h3>"
msgstr ""
"<h3>Системы с Уникальными/своеобразными(\"Idiosyncratic\") Зависимостями</h3>"

#: in/DescrLargeSystems.htm:1556
msgid ""
"<p>\n"
"Some systems may have very complicated file dependencies.  In some cases,\n"
"for example, code may have evolved in a way which demands that an earlier\n"
"copy of itself be loaded in order to support its compilation or\n"
"instantiation. The description of such systems and how they are to be\n"
"constructed may require a complex notation.  This is acceptable only if it\n"
"does not affect the simplicity of notation used to describe simple systems.\n"
"</p>"
msgstr ""
"<p>\n"
"Некоторые системы могут иметь очень сложные файловые зависимости. Например,\n"
"в некоторых случаях код мог эволюционировать таким образом, который требует\n"
"загрузки более ранней его копии, для поддержки его компиляции или "
"установки.\n"
"Описание таких систем и того, как они должны быть построены, может "
"потребовать\n"
"сложной системы обозначений.  Это приемлемо, только если это не влияет на \n"
"простоту обозначений, используемых для описания простых систем.\n"
"</p>"

#: in/DescrLargeSystems.htm:1567
msgid ""
"<p>\n"
"Some users have suggested that that the complexity of <code>DEFSYSTEM</"
"code>\n"
"stems from\n"
"the fact that the same notational devices must be used for all kinds of\n"
"systems, whether simple or complex.  In this new proposal, systems can be\n"
"classified into different kinds, each each with their own notation.  We\n"
"have illustrated that simple systems might require only the specification\n"
"of the files involved and nothing else, while some more complex systems\n"
"might be specified in terms of inter-file dependencies.\n"
"</p>"
msgstr ""
"<p>\n"
"Некоторые пользователи считают, что сложность <code>DEFSYSTEM</code>\n"
"связана с тем фактом, что одни и те же нотационные средства должны\n"
"испольозваться для всех типов систем, как простых, так и сложных. В этом\n"
"новом предложении системы могут быть классифицированы на различные виды,\n"
"каждый из которых имеет свои собственные обозначения. Мы проилюстрировали,\n"
"что для простых систем может протребоваться только указание задействованных\n"
"файлов и ничего больше, в то время как некоторые сложные системы могут быть\n"
"определены с точки зрения межфайловых зависимостей.\n"
"</p>"

#: in/DescrLargeSystems.htm:1574
msgid ""
"<p>\n"
"For the completely general case, however, special \"one-shot\" notations "
"can\n"
"still be developed to handle the specific needs of situations which are not\n"
"yet sufficiently well-understood to be handled by a more standard\n"
"notation.  For example,\n"
"</p>"
msgstr ""
"<p>\n"
"Однако для полностью общего случая, может быть разработана специальная "
"нотация \"one-shot\"\n"
"\"убивающая одним выстрелом двух(всех) зайцев\", чтобы справиться с "
"конкретными потребностями\n"
"сложных ситуаций, которые еще недостаточно понятны, чтобы обрабатываться "
"более стандартными\n"
"нотациями. Например,\n"
"</p>"

#: in/DescrLargeSystems.htm:1576
msgid "<pre> (DEFFLAVOR HAIRY-SYSTEM () (VANILLA-SYSTEM))"
msgstr ""

#: in/DescrLargeSystems.htm:1582
msgid ""
" (DEFMETHOD (HAIRY-SYSTEM :CASE :GENERATE-PLAN :UPDATE) ()\n"
"   '((:LOAD \"Foo\")\n"
"     (:COMPILE \"Foo\") ;Needs self to compile\n"
"     (:LOAD \"Foo\")\n"
"     (:LOAD \"Bar\")))"
msgstr ""

#: in/DescrLargeSystems.htm:1584
msgid " (DEFINE-SYSTEM MY-HAIRY-SYSTEM HAIRY-SYSTEM) ;needs no options"
msgstr ""

#: in/DescrLargeSystems.htm:1587
msgid ""
" (<font color=\"green\">SYSDEF:</font>EXECUTE-PLAN (SYSTEM 'MY-HAIRY-"
"SYSTEM) :UPDATE)\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1597
msgid ""
"<font color=\"green\">\n"
"<p>\n"
"[For better stylistic compatibility with other such operators in Common "
"Lisp, a better name for\n"
" the function we called <code>SYSTEM</code> would be <code>FIND-SYSTEM</"
"code> or \n"
" <code>FIND-SYSTEM-NAMED</code>.  In <a href=\"#appendix-c\">Appendix C</a>, "
"we've used the latter.\n"
"<br>\n"
" --<i>KMP</i> 21-Jan-2001]\n"
"</p>\n"
"</font>"
msgstr ""
"<font color=\"green\">\n"
"<p>\n"
"[Для лучшей стилистической совместимости с другими такими операторами в "
"Common Lisp, лучшим именем\n"
"для функции, которую мы назвали <code>SYSTEM</code> было бы <code>FIND-"
"SYSTEM</code> или \n"
" <code>FIND-SYSTEM-NAMED</code>.  В <a href=\"#appendix-c\">Приложении C</"
"a>, мы использовали последнее.\n"
"<br>\n"
" --<i>KMP</i> 21-Jan-2001]\n"
"</p>\n"
"</font>"

#: in/DescrLargeSystems.htm:1604
msgid ""
"<p>\n"
"A slight generalization of this idea leads to another kind of system, which\n"
"allows the system maintainer to specify explicitly how to handle each kind\n"
"of <code>:GENERATE-PLAN</code> request:\n"
"</p>"
msgstr ""
"<p>\n"
"Небольшое обобщение этой идеи приводит к другому типу системы, которая "
"позволяет \n"
"сопровождающему системы явно указывать, как обрабатывать каждый вид "
"запроса \n"
"<code>:GENERATE-PLAN</code>  :\n"
"</p>"

#: in/DescrLargeSystems.htm:1608
msgid ""
"<pre> (DEFFLAVOR PREPLANNED-SYSTEM ((FILES '())\n"
"                               (PLANS '()))\n"
"            (VANILLA-SYSTEM))"
msgstr ""

#: in/DescrLargeSystems.htm:1612
msgid ""
" (DEFMETHOD (PREPLANNED-SYSTEM :PROCESS-OPTIONS) (OPTIONS)\n"
"   (SETQ FILES (CAR OPTIONS))\n"
"   (SETQ PLANS (CDR OPTIONS)))"
msgstr ""

#: in/DescrLargeSystems.htm:1618
msgid ""
" (DEFMETHOD (PREPLANNED-SYSTEM :GENERATE-PLAN) (OPERATION)\n"
"   (LET ((P (ASSQ OPERATION PLANS)))\n"
"     (COND (P (CDR P))\n"
"           (T (FERROR \"No plan for operation ~S\" OPERATION))))).\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1622
msgid ""
"<p>\n"
"Having done this, the same system could be re-written:\n"
"</p>"
msgstr ""
"<p>\n"
"Сделав это, можно переписать ту же систему:\n"
"</p>"

#: in/DescrLargeSystems.htm:1632
msgid ""
"<pre> (DEFINE-SYSTEM MY-HAIRY-SYSTEM PREPLANNED-SYSTEM\n"
"                (\"Foo\" \"Bar\")\n"
"   (:UPDATE\n"
"     (:LOAD \"Foo\")\n"
"     (:COMPILE \"Foo\") ;Needs self to compile\n"
"     (:LOAD \"Foo\")\n"
"     (:LOAD \"Bar\"))\n"
"   ...).\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1640
msgid ""
"<p>\n"
"This notation has some of the character of the batch files discussed\n"
"earlier, but is much better integrated with existing tools.  Users of a\n"
"system could load or compile it without knowing how it was defined.  Later,\n"
"if system dependencies changed or if a new notation became available, the\n"
"system's specification could be changed without notifying the users.\n"
"</p>"
msgstr ""
"<p>\n"
"Эта нотация имеет некоторые черты пакетных файлов, обсуждавшихся ранее, но\n"
"гораздо лучше интегрируется с существующими инструментами.  Пользователи\n"
"системы могут загрузить или скомпилировать её, не зная, как она была "
"определена.\n"
"Позже, если системные зависимости изменились или появилась новая нотация,\n"
"системная спецификация может быть изменена без уведомления пользователей.\n"
"</p>"

#: in/DescrLargeSystems.htm:1642
msgid "<h3>Systems with Dependencies to be Inferred by the Compiler</h3>"
msgstr ""
"<h3>Системы с Зависимостями, которые будут определены Компилятором</h3>"

#: in/DescrLargeSystems.htm:1649
msgid ""
"<p>\n"
"Some people have objected to the idea that a system description language\n"
"should be needed at all.  They claim is that the compiler should somehow be\n"
"able to infer compilation dependencies by recognizing and recording\n"
"assumptions made during compilation.\n"
"</p>"
msgstr ""
"<p>\n"
"Некоторые люди возражают против идеи, что язык описания систем вообще "
"нужен.\n"
"Они утверждают, что компилятор должен каким-то образом иметь возможность\n"
"выводить зависимости компиляции, распознавая и записывая предположения,\n"
"сделанные во время компиляции.\n"
"</p>"

#: in/DescrLargeSystems.htm:1659
msgid ""
"<p>\n"
"This sort of inference is not completely reliable because compilers cannot\n"
"always accurately detect compilation dependencies induced by changes to the\n"
"state of the global environment during compilation.  The problem stems from\n"
"the presence in Lisp of powerful state-affecting primitives such as\n"
"<code>EVAL-WHEN</code>\n"
"and the general ability of macros to read or alter global state\n"
"during compilation.\n"
"</p>"
msgstr ""
"<p>\n"
"Этот вид вывода не является полностью надежным, поскольку компиляторы не "
"всегда\n"
"могут точно определить зависимости компиляции, вызываемые изменениями "
"состояния\n"
"глобальной среды во время компиляции.  Проблема связана с наличием в  Lisp "
"мощных\n"
"примитивов, таких как <code>EVAL-WHEN</code>\n"
"и общей способностью макросов читать или изменять глобальное состояние во "
"время\n"
"компиляции.\n"
"</p>"

#: in/DescrLargeSystems.htm:1665
msgid ""
"<p>\n"
"To see the problem, consider a data-driven macro facility such as the\n"
"following, which maintains its state both in the compiler and in the\n"
"runtime environment:\n"
"</p>"
msgstr ""
"<p>\n"
"Чтобы увидеть проблему, рассмотрим управляемый данными механизм макросов,\n"
"такой как следующий, который поддерживает свое состояние как в компиляторе,\n"
"так и в среде во время выполнения:\n"
"</p>"

#: in/DescrLargeSystems.htm:1686
msgid ""
"<table width=\"80%\" border=\"1\">\n"
"<tbody><tr><td>\n"
"<pre>\n"
"   .\n"
"   .\n"
"   .\n"
" (DEFUN EXPAND-DEFINITION (OP NAME BODY)\n"
"   (SELECTQ OP\n"
"     ((DEFINE) ...)\n"
"       .\n"
"       .\n"
"       .\n"
"     (OTHERWISE ...)))\n"
"   .\n"
"   .\n"
"   .\n"
"</pre>\n"
"</td></tr>\n"
"</tbody><caption align=\"bottom\"><tt>A.LISP</tt></caption>\n"
"</table>"
msgstr ""

#: in/DescrLargeSystems.htm:1702
msgid ""
"<table width=\"80%\" border=\"1\">\n"
"<tbody><tr><td>\n"
"<pre>\n"
"   .\n"
"   .\n"
"   .\n"
" (DEFMACRO DEFINE (NAME .  BODY)\n"
"   (EXPAND-DEFINITION 'DEFINE NAME BODY))\n"
"   .\n"
"   .\n"
"   .\n"
"</pre>\n"
"</td></tr>\n"
"</tbody><caption align=\"bottom\"><tt>B.LISP</tt></caption>\n"
"</table>"
msgstr ""

#: in/DescrLargeSystems.htm:1717
msgid ""
"<table width=\"80%\" border=\"1\">\n"
"<tbody><tr><td>\n"
"<pre>\n"
"   .\n"
"   .\n"
"   .\n"
" (DEFINE FOO ...)\n"
"   .\n"
"   .\n"
"   .\n"
"</pre>\n"
"</td></tr>\n"
"</tbody><caption align=\"bottom\"><tt>C.LISP</tt></caption>\n"
"</table>"
msgstr ""

#: in/DescrLargeSystems.htm:1729
msgid ""
"<p>\n"
"If the definition of <code>EXPAND-DEFINITION</code> has changed,\n"
"it would obviously have\n"
"to be recompiled.  On the other hand, the definition of <code>DEFINE</"
"code>,\n"
"while it\n"
"directly refers to <code>EXPAND-DEFINITION</code>,\n"
"is not affected by the change to\n"
"<code>EXPAND-DEFINITION</code>.\n"
"So <tt>A.LISP</tt> and <tt>C.LISP</tt> would have to be recompiled,\n"
"but <tt>B.LISP</tt> would not.\n"
"</p>"
msgstr ""
"<p>\n"
"Если определение <code>EXPAND-DEFINITION</code> изменилось,\n"
"его, очевидно, придется перекомпилировать.  С другой стороны, определение\n"
"<code>DEFINE</code>, хотя оно напрямую относится к <code>EXPAND-DEFINITION</"
"code>,\n"
"не зависит от изменения <code>EXPAND-DEFINITION</code>.\n"
"Поэтому <tt>A.LISP</tt> и <tt>C.LISP</tt> придется перекомпилировать, а\n"
"<tt>B.LISP</tt> - нет.\n"
"</p>"

#: in/DescrLargeSystems.htm:1734
msgid ""
"<p>\n"
"To complicate matters, however, suppose that instead of the above\n"
"definition, <code>EXPAND-DEFINITION</code> had been defined by:\n"
"</p>"
msgstr ""
"<p>\n"
"Однако, чтобы усложнить ситуацию, предположим, что вместо приведенного\n"
"выше определения, <code>EXPAND-DEFINITION</code> было определено\n"
"следующим образом:\n"
"</p>"

#: in/DescrLargeSystems.htm:1738
msgid ""
"<pre> (DEFUN EXPAND-DEFINITION (OP NAME BODY)\n"
"   (FUNCALL (GET OP 'EXPANDER) NAME BODY))\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1743
msgid ""
"<p>\n"
"In that case, a seemingly unrelated change such as a change to a definition\n"
"elsewhere such as:\n"
"</p>"
msgstr ""
"<p>\n"
"В этом случае, казалось бы не связанное изменение, такое как изменение "
"определения\n"
"в другом месте, такое как:\n"
"</p>"

#: in/DescrLargeSystems.htm:1746
msgid ""
"<pre> (DEFUN (:PROPERTY DEFINE EXPANDER) (NAME BODY) ...)\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1751
msgid ""
"<p>\n"
"could affect the expansion of <code>FOO</code>,\n"
"causing <tt>C.LISP</tt> to need recompilation.\n"
"</p>"
msgstr ""
"<p>\n"
"может повлиять на расширение <code>FOO</code>,\n"
"что приведет к необходимости перекомпиляции <tt>C.LISP</tt>.\n"
"</p>"

#: in/DescrLargeSystems.htm:1763
msgid ""
"<p>\n"
"There might be a temptation to suggest that the compiler notice that the\n"
"second argument to <code>GET</code>\n"
"in <code>EXPAND-DEFINITION</code>\n"
"is the constant symbol <code>EXPANDER</code>\n"
"and that a function stored on an\n"
"<code>EXPANDER</code> property was changed.\n"
"Some special cases might be handled this way, but in general the problem "
"can\n"
"become arbitrarily complex and a correct analysis may be uncomputable.\n"
"Consider the difficulty required in understanding the implications even of:\n"
"</p>"
msgstr ""
"<p>\n"
"Может возникнуть соблазн предположить, что компилятор заметит, что вторым "
"аргументом\n"
" <code>GET</code> в <code>EXPAND-DEFINITION</code>\n"
"является константный символ <code>EXPANDER</code> и что функция, хранящаяся "
"в\n"
"свойстве <code>EXPANDER</code> была изменена.\n"
"Некоторые особые случаи могут быть обработаны таким образом, но в целом "
"прорблема\n"
"может стать сколь угодно сложной, и правильный анализ может быть не "
"вычисляем.\n"
"Рассмотрим трудности, необходимые для понимания последствий даже:\n"
"</p>"

#: in/DescrLargeSystems.htm:1774
msgid ""
"<pre> (EVAL-WHEN (EVAL COMPILE)\n"
"   (DEFUN DEFINE-EXPANDER (NAME BODY) ...)\n"
"   (DEFUN FOO-EXPANDER ...)\n"
"     .\n"
"     .\n"
"     .\n"
"   (MAPC #'(LAMBDA (X Y) (PUTPROP X Y 'EXPANDER))\n"
"         '(DEFINE FOO ...)\n"
"         '(DEFINE-EXPANDER FOO-EXPANDER ...))).\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1785
msgid ""
"<p>\n"
"This is the sort of thing that we might imagine a sufficiently advanced\n"
"compiler being able to do, but we might not be willing to pay for the\n"
"overhead needed to deduce the information.  Performance issues are\n"
"especially important in systems which must perform interactively and allow\n"
"for user intervention, incremental development, and runtime redefinition.\n"
"The cost to the programmer of having to specify module dependencies may be\n"
"very cheap in comparison with the cost of his having to sit idle waiting\n"
"for the machine to deduce them.\n"
"</p>"
msgstr ""
"<p>\n"
"Это то, что мы могли бы представить себе достаточно продвинутым "
"компилятором,\n"
"но мы можем быть не готовы заплатить за накладные расходы, необходимые для \n"
"вывода(определения) информации.  Проблемы производительности особенно важны\n"
"в системах, которые должны работать в интерактивном режиме и учитывать "
"вмешательство\n"
"пользователя, постепенную разработку и переопределение среды выполнения. "
"Стоимость\n"
"указания программистами зависимостей для программиста может быть очень "
"дешевой по\n"
"сравнению со стоимостью того, что он вынужден сидеть без дела, ожидая пока "
"машина\n"
"выведет их.\n"
"</p>"

#: in/DescrLargeSystems.htm:1791
msgid ""
"<p>\n"
"The detection of loadtime dependencies is made similarly difficult by the\n"
"ability of the programmer to include unconstrained toplevel forms in a\n"
"file, to be executed at load time.\n"
"</p>"
msgstr ""
"<p>\n"
"Обнаружение зависимостей времени загрузки также затрудняется из-за "
"способности\n"
"программиста включать неограниченные формы верхнего уровня в файл, "
"выполняемый\n"
"во время загрузки.\n"
"</p>"

#: in/DescrLargeSystems.htm:1800
msgid ""
"<p>\n"
"Of course, the real problem is probably that unconstrained changes to\n"
"global state are not well understood and may even be a bad idea.  There are\n"
"many active language design efforts which seek to show that languages which\n"
"employ global state should just be thrown out the window.  Until such\n"
"efforts succeed, however, the problem of how to specify and manipulate\n"
"large systems will remain an important one.\n"
"</p>"
msgstr ""
"<p>\n"
"Конечно, реальная проблема, вероятно, заключается в том, что "
"неограниченнные\n"
"изменения в глобальном состоянии не совсем понятны и могут даже быть плохой\n"
"идеей. Есть много активных усилий по разработке языков, которые стремятся \n"
"показать, что языки использующие глобальное состояние, должны быть просто\n"
"выброшены в окно. Однако, пока такие усилия не увенчаются успехом, проблема\n"
"определения и управления большими системами будет оставаться важной.\n"
"</p>"

#: in/DescrLargeSystems.htm:1811
msgid ""
"<p>\n"
"And if it ever does happen that languages become sufficiently constrained\n"
"that all the dependencies can be inferred mechanically, our data\n"
"abstractions will still provide a needed interface between the new\n"
"dependency-inference technology and the standard maintenance utilities for\n"
"loading, compiling, hardcopying, <i>etc.</i> The only thing we might expect "
"to\n"
"change is that complicated notations for describing systems might give way\n"
"to simpler ones.  So even if the dependency information were complex, one\n"
"might eventually only need to write:\n"
"</p>"
msgstr ""
"<p>\n"
"И если когда-нибудь случиться, что языки программирования станут достаточно\n"
"ограниченными, чтобы все зависимости можно было бы вывести механически, "
"наши\n"
"абстракции данных все равно обеспечат необходимый интерфейс между новой \n"
"технологией вывода зависимостей и стандартными утилитами обслуживания для\n"
"загрузки, компиляции, печати, <i>и т.д.</i> Единственное, что мы можем "
"ожидать,\n"
"это изменение в том, что сложные обозначения для описания систем могут "
"уступить\n"
"место более простым.  Таким образом, даже если информация о зависимости "
"была\n"
"сложной, в конечном итоге нужно было написать:\n"
"</p>"

#: in/DescrLargeSystems.htm:1815
msgid ""
"<pre> (DEFINE-SYSTEM MYSYS ULTIMATE-SYSTEM\n"
"   \"MACROS.LISP\" \"UTILITIES.LISP\" \"MAIN.LISP\"))\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:1819
msgid ""
"<p>\n"
"and the rest of the information could be inferred mechanically.\n"
"</p>"
msgstr ""
"<p>\n"
"и остальная информация может быть выведена механически.\n"
"</p>"

#: in/DescrLargeSystems.htm:1827
msgid ""
"<p>\n"
"Such a syntax might be sufficiently attractive that people would want to\n"
"rewrite all their systems using it.  But in the interim, while people\n"
"converted the definitions of their systems to use this simpler notation,\n"
"systems defined using older notations could continue to work correctly and\n"
"compatibly under protective cover of our abstraction mechanisms.\n"
"</p>"
msgstr ""
"<p>\n"
"Такой синтаксис может быть достаточно привлекательным, чтобы люди захотели\n"
"переписать все свои системы, используя его. Но тем временем, в то время как\n"
"люди конвертировали определения своих систем, чтобы использовать ту более \n"
"простую нотацию, системы, определенные с использованием более старых "
"нотаций,\n"
"могли бы продолжать работать правильно и совместимо под защитой наших "
"механизмов\n"
"абстракции.\n"
"</p>"

#: in/DescrLargeSystems.htm:1836
msgid ""
"<p>\n"
"In preceding examples, we have shown how allowing multiple notations to\n"
"coexist compatibly in the same environment can be used to allow system\n"
"maintainers flexibility in choosing a notation which is appropriate for a\n"
"particular application.  Here we see a second reason for allowing multiple\n"
"notations: to ease the transition from each generation of system\n"
"description languages to the next.\n"
"</p>"
msgstr ""
"<p>\n"
"В предыдущих примерах мы показали, как разрешить совместное сосуществование\n"
"нескольких нотаций в одной и той же среде, чтобы дать возможность "
"сопровождающим\n"
"системы гибко выбирать нотацию, подходящую для конкретного приложения.  \n"
"Здесь мы видим вторую причину использования нескольких обозначений: для "
"облегчения\n"
"перехода от одного поколения языков описания системы к следующему.\n"
"</p>"

#: in/DescrLargeSystems.htm:1838
msgid "<h2>V. Summary</h2>"
msgstr "<h2>V. Резюме</h2>"

#: in/DescrLargeSystems.htm:1844
msgid ""
"<p>\n"
"We have motivated the need for system-definition tools, specified some\n"
"criteria which such tools should satisfy, and proposed a set of tools which\n"
"satisfy those criteria.\n"
"</p>"
msgstr ""
"<p>\n"
"Мы мотивировали потребность в инструментах определения системы, определили\n"
"некоторые критерии, которым должны удовлетворять такие инструменты, и "
"предложили\n"
"набор инструментов, которые удовлетворяют этим критериям.\n"
"</p>"

#: in/DescrLargeSystems.htm:1849
msgid ""
"<p>\n"
"System maintenance tools should be data driven, allowing new tools to be\n"
"written as extensions to the existing tools, driving off the same data.\n"
"</p>"
msgstr ""
"<p>\n"
"Инструменты обслуживания системы должны основываться на данных, что "
"позволяет\n"
"создавать новые инструменты как расширения существующих инструментов, "
"исключая\n"
"те же данные.\n"
"</p>"

#: in/DescrLargeSystems.htm:1856
msgid ""
"<p>\n"
"The tools should be general purpose, allowing arbitrary kinds of systems to\n"
"be built from them.  However, the need for generality should not infect the\n"
"notation, making common cases notationally too complex to specify\n"
"conveniently.\n"
"</p>"
msgstr ""
"<p>\n"
"Инструменты должны быть общего назначения, позволяющие создавать "
"произвольные\n"
"типы систем из них. Однако, необходимость в общности не должна заражать "
"нотацию,\n"
"что делает общие случаи слишком сложными для удобного определения нотаций.\n"
"</p>"

#: in/DescrLargeSystems.htm:1863
msgid ""
"<p>\n"
"We have suggested that these ends should be achieved through a\n"
"protocol-based approach.  The proposed approach deemphasizes the particular\n"
"syntax used to specify a system and emphasizes the importance of making\n"
"systems with a well-defined functional behavior.\n"
"</p>"
msgstr ""
"<p>\n"
"Мы предложили, что эти цели были достигнуты с помощью подхода на основе\n"
"протокола.  Предлагаемый подход исключает конкретный синтаксис, "
"используемый\n"
"для определения системы, и подчеркивает важность создания системы с четко\n"
"определенным функциональным поведением.\n"
"</p>"

#: in/DescrLargeSystems.htm:1872
msgid ""
"<p>\n"
"The proposal provides for the construction of systems which satisfy a\n"
"pre-defined functional protocol.  This protocol allows system maintenance\n"
"utilities to access and manipulate the system specification.  The proposed\n"
"functions provide an interface for finding what files make up a system and\n"
"inquiring about how to perform system maintenance operations such as\n"
"editing, compilation, instantiation, and hardcopying.\n"
"</p>"
msgstr ""
"<p>\n"
"Предложение предусматривает создание систем, которые удовлетворяют заранее\n"
"определенному функциональному протоколу. Этот протокол позволяет утилитам\n"
"обслуживания системы получать доступ к спецификации системы и "
"манипулировать\n"
"ею. Предложенные функции предоставляют интерфейс для поиска файлов, из "
"которых\n"
"состоит система, и запроса о том, как выполнять операции обслуживания "
"системы,\n"
"такие как редактирование, компиляция, создание экзепляров и печать.\n"
"</p>"

#: in/DescrLargeSystems.htm:1879
msgid ""
"<p>\n"
"Because a system can be asked to produce a plan for an operation such as\n"
"compilation without actually performing the operation, it is possible to\n"
"write programs which inspect the plan, possibly optimizing it or presenting\n"
"it for for interactive approval, before executing it.\n"
"</p>"
msgstr ""
"<p>\n"
"Поскольку системе может быть предложено создать план для операции, такой "
"как\n"
"компиляция, без фактического выполнения операции, можно написать программы,\n"
"которые проверяют план, возможно оптимизируют его или представляют его \n"
"для интерактивного утверждения, прежде чем выполнить его.\n"
"</p>"

#: in/DescrLargeSystems.htm:1888
msgid ""
"<p>\n"
"The proposal also provides for the possibility of having multiple system\n"
"description languages available in the same environment at the same time.\n"
"This capability allows a system maintainer the freedom to choose the\n"
"notation which is right for a given application, without requiring those\n"
"who need to manipulate (compile, load, <i>etc.</i>) the system to know "
"which\n"
"notation was used.\n"
"</p>"
msgstr ""
"<p>\n"
"Предложение также предусматривает возможность одновременного использования\n"
"нескольких языков для описания системы в одной и той же среде.\n"
"Эта возможность позволяет сопровождающему системы свободно выбирать "
"нотацию,\n"
"которая подходит для данного приложения, не требуя, чтобы те, кому "
"необходимо\n"
"манипулировать(компилировать, загружать и  <i>т.д.</i>) системой, знали, "
"какая\n"
"нотация использовалась.\n"
"</p>"

#: in/DescrLargeSystems.htm:1894
msgid ""
"<p>\n"
"Examples have been given to illustrate how the various features of this\n"
"proposal work together in a variety of situations to provide usefulness and\n"
"flexibility.\n"
"</p>"
msgstr ""
"<p>\n"
"Приведены примеры, чтобы проилюстрировать как различные функции этого "
"приложения\n"
"работают вместе в различных ситуациях, чтобы обеспечить полезность и "
"гибкость.\n"
"</p>"

#: in/DescrLargeSystems.htm:1896
msgid "<h2 align=\"center\"><i>References</i></h2>"
msgstr "<h2 align=\"center\"><i>Рекомендации/Ссылки</i></h2>"

#: in/DescrLargeSystems.htm:1911
msgid ""
"<dl>\n"
"<dt><a name=\"Bonanni-77\">[Bonanni 77]</a></dt>\n"
"<dd>\n"
"<p>\n"
"<b>L. E. Bonanni</b> and <b>A. L. Glasser</b>, \"SCCS/PWB User's Manual,\"\n"
"Bell Laboratories, Murray Hill, NJ, November, 1977.\n"
"<br>\n"
"<font color=\"green\">\n"
"[Auxiliary reading not specifically indicated in paper, but intended as\n"
"background for Unix <code>MAKE</code>.<br>\n"
" --<i>KMP</i> 14-Jan-2001]\n"
"</font>\n"
"</p>\n"
"</dd>"
msgstr ""

#: in/DescrLargeSystems.htm:1923
msgid ""
"<dt><a name=\"Feldman-78\">[Feldman 78]</a></dt>\n"
"<dd>\n"
"<p>\n"
"<b>S. I. Feldman</b>, \"Make--A Program for Maintaining Computer\n"
"Programs,\" Bell Laboratories, Murray Hill, NJ, August, 1978.\n"
"<br>\n"
"<font color=\"green\">\n"
"<a href=\"#ref-Feldman-78\">[Click to return to reference.]</a>\n"
"</font>\n"
"</p>\n"
"</dd>"
msgstr ""

#: in/DescrLargeSystems.htm:1936
msgid ""
"<dt><a name=\"Mackinlay-84\">[Mackinlay 84]</a></dt>\n"
"<dd>\n"
"<p>\n"
"<b>J. Mackinlay</b> and <b>M. Genesereth</b>, \"Expressiveness of\n"
"Languages,\" <i>Proceedings of the National Conference on Artificial\n"
"Intelligence</i>, University of Texas, Austin, TX, August, 1984.\n"
"<br>\n"
"<font color=\"green\">\n"
"<a href=\"#ref-Mackinlay-84\">[Click to return to reference.]</a>\n"
"</font>\n"
"</p>\n"
"</dd>"
msgstr ""

#: in/DescrLargeSystems.htm:1949
msgid ""
"<dt><a name=\"Rees-84\">[Rees 84]</a></dt>\n"
"<dd>\n"
"<p>\n"
"<b>J. Rees</b>, <b>N. Adams</b> and <b>J. Meehan</b>,\n"
"<i>The T Manual</i>, Computer Science\n"
"Department, Yale University, New Haven, CT, January, 1984.\n"
"<br>\n"
"<font color=\"green\">\n"
"<a href=\"#ref-Rees-84\">[Click to return to reference.]</a>\n"
"</font>\n"
"</p>\n"
"</dd>"
msgstr ""

#: in/DescrLargeSystems.htm:1961
msgid ""
"<dt><a name=\"Robbins-84\">[Robbins 84]</a></dt>\n"
"<dd>\n"
"<p>\n"
"<b>R. Robbins</b>, <i>BUILD--A System Construction Tool</i>, Working Paper\n"
"261, Artificial Intelligence Laboratory, MIT, Cambridge, MA, 1984.\n"
"<br>\n"
"<font color=\"green\">\n"
"<a href=\"#ref-Robbins-84\">[Click to return to reference.]</a>\n"
"</font>\n"
"</p>\n"
"</dd>"
msgstr ""

#: in/DescrLargeSystems.htm:1975
msgid ""
"<dt><a name=\"Steele-84\">[Steele 84]</a></dt>\n"
"<dd>\n"
"<p>\n"
"<b>G. L. Steele, Jr.</b>, <i>Common LISP: The Language</i>, Digital Press,\n"
"Burlington, MA, 1984.\n"
"<br>\n"
"<font color=\"green\">\n"
"[Auxiliary reading not specifically indicated in paper.  I have no idea "
"why,\n"
"since Common Lisp is not mentioned in the paper!<br>\n"
" --<i>KMP</i> 14-Jan-2001]\n"
"</font>\n"
"</p>\n"
"</dd>"
msgstr ""

#: in/DescrLargeSystems.htm:1989
msgid ""
"<dt><a name=\"Theriault-83\">[Theriault 83]</a>\n"
"</dt>\n"
"<dd>\n"
"<p>\n"
"<b>D. G. Theriault</b>, <i>Issues in the Design and Implementation of\n"
"Act2</i>, Technical Report 728, Artificial Intelligence Laboratory, MIT,\n"
"Cambridge, MA, June, 1983.\n"
"<br>\n"
"<font color=\"green\">\n"
"<a href=\"#ref-Theriault-83\">[Click to return to reference.]</a>\n"
"</font>\n"
"</p>\n"
"</dd>"
msgstr ""

#: in/DescrLargeSystems.htm:2003
msgid ""
"<dt><a name=\"Weinreb-81\">[Weinreb 81]</a></dt>\n"
"<dd>\n"
"<p>\n"
"<b>D. Weinreb</b> and <b>D. Moon</b>, <i>Lisp Machine Manual</i>,\n"
"Fourth Edition,\n"
"MIT Artificial Intelligence Laboratory, July, 1981.\n"
"<br>\n"
"<font color=\"green\">\n"
"<a href=\"#ref-Weinreb-81\">[Click to return to reference.]</a>\n"
"</font>\n"
"</p>\n"
"</dd>\n"
"</dl>"
msgstr ""

#: in/DescrLargeSystems.htm:2005
msgid "<h2 align=\"center\"><i>Acknowledgments</i></h2>"
msgstr "<h2 align=\"center\"><i>Благодарности</i></h2>"

#: in/DescrLargeSystems.htm:2013
msgid ""
"<p>\n"
"Dan Brotsky, Dan Carnese, Henry Lieberman, Chuck Rich, Patrick Sobalvarro,\n"
"Dick Waters, and Dan Weld read drafts of this paper, providing support and\n"
"commentary.  Comments by Waters and Brotsky, who read multiple drafts,\n"
"played an especially important role in improving the clarity and\n"
"organization of my presentation.\n"
"</p>"
msgstr ""

#: in/DescrLargeSystems.htm:2018
msgid ""
"<p>\n"
"Stephen Gildea provided useful background documentation and answered\n"
"questions about Unix and its <tt>MAKE</tt> facility.\n"
"</p>"
msgstr ""

#: in/DescrLargeSystems.htm:2020
msgctxt "in/DescrLargeSystems.htm:2020"
msgid "<hr width=\"50%\" align=\"center\">"
msgstr ""

#: in/DescrLargeSystems.htm:2036
msgid ""
"<ol>\n"
"<li>\n"
"<p>\n"
"<a name=\"footnote1\">\n"
"Unix is a trademark of Bell Labs.\n"
"</a>\n"
"<br>\n"
"<font color=\"green\">\n"
"This footnote was referenced once from the Abstract and once from the\n"
"main paper body:<br>\n"
"<a href=\"#footref1a\">[Click to return to first reference.]</a><br>\n"
"<a href=\"#footref1b\">[Click to return to second reference.]</a>\n"
"</font>\n"
"</p>\n"
"</li>"
msgstr ""

#: in/DescrLargeSystems.htm:2052
msgid ""
"<li>\n"
"<p>\n"
"<a name=\"footnote2\">\n"
"In general, notations must be chosen with extreme care;</a> an ill-chosen\n"
"notation can have a very adverse effect on specifications that use it,\n"
"making them seem to imply things which are in fact false. \n"
"<a name=\"ref-Mackinlay-84\">\n"
"For a more complete discussion of such issues,</a>\n"
"see <a href=\"#Mackinlay-84\">[Mackinlay 84]</a>.\n"
"<br>\n"
"<font color=\"green\">\n"
"<a href=\"#footref2\">[Click to return to reference.]</a>\n"
"</font>\n"
"</p>\n"
"</li>"
msgstr ""

#: in/DescrLargeSystems.htm:2079
msgid ""
"<li>\n"
"<p>\n"
"<a name=\"footnote3\">\n"
"In <tt>Lisp Machine Lisp</tt>,</a>\n"
"symbols preceded by a colon are \"keywords\"\n"
"interned in a canonical \"keyword package.\" By special decree, keywords "
"are\n"
"self-quoting (<i>i.e.,</i> bound to themselves).\n"
"Hence, <code>':FOO</code> and <code>:FOO</code> evaluate to\n"
"the same thing, <code>:FOO</code>.\n"
"<br>\n"
"<font color=\"green\">\n"
"<a href=\"#footref3\">[Click to return to reference.]</a>\n"
"</font>\n"
"</p>\n"
"<p>\n"
"<font color=\"green\">\n"
"[In Maclisp, the predominant language of the time, \n"
"there were no packages\n"
"and colon was an alphabetic character.  \n"
"The style of <tt>Lisp Machine Lisp</tt> \n"
"mentioned here later became the style of Common Lisp, so this footnote \n"
"probably seems somewhat trivial now.<br>\n"
" --<i>KMP</i> 14-Jan-2001]\n"
"</font>\n"
"</p>\n"
"</li>"
msgstr ""

#: in/DescrLargeSystems.htm:2095
msgid ""
"<li>\n"
"<p>\n"
"<a name=\"footnote4\">\n"
"This example is taken directly from a real program system developed by\n"
"the MIT Programmer's Apprentice group.  The full definition is much longer,\n"
"describing the relations between about 90 files, grouping them into about\n"
"50 logical modules.\n"
"</a>\n"
"<br>\n"
"<font color=\"green\">\n"
"<a href=\"#footref4\">[Click to return to reference.]</a>\n"
"</font>\n"
"</p>\n"
"</li>\n"
"</ol>"
msgstr ""

#: in/DescrLargeSystems.htm:2097
msgctxt "in/DescrLargeSystems.htm:2097"
msgid "<hr>"
msgstr ""

#: in/DescrLargeSystems.htm:2099
msgid "<h2><a name=\"appendix-a\">Appendix A: Examples</a></h2>"
msgstr "<h2><a name=\"appendix-a\">Приложение A: Примеры</a></h2>"

#: in/DescrLargeSystems.htm:2104
msgid ""
"<p>\n"
"These examples are provided to illustrate how the code in <a href="
"\"#appendix-b\">Appendix B</a> might\n"
"be used in practice.\n"
"</p>"
msgstr ""
"<p>\n"
"Эти примеры приведены для иллюстрации того, как код из <a href=\"#appendix-b"
"\">приложения B</a> \n"
"может использоваться на практике.\n"
"</p>"

#: in/DescrLargeSystems.htm:2106
msgid "<h3>Example 1</h3>"
msgstr "<h3>Пример 1</h3>"

#: in/DescrLargeSystems.htm:2113
msgid ""
"<p>\n"
"Consider a system made of three files, <tt>\"foo\"</tt>, <tt>\"bar\"</tt>,\n"
"and <tt>\"baz\"</tt>.  Such a system could be described conveniently by\n"
"<code>DEFINE-SYSTEM</code> form using the\n"
"<code>SIMPLE-SYSTEM</code> notation as follows:\n"
"</p>"
msgstr ""
"<p>\n"
"Рассмотрим систему состоящую из трех файлов, <tt>\"foo\"</tt>, <tt>\"bar\"</"
"tt>,\n"
"и <tt>\"baz\"</tt>.  Такая система может быть удобно описана в форме\n"
"<code>DEFINE-SYSTEM</code> с испольованием обозначения \n"
"<code>SIMPLE-SYSTEM</code> следующим образом:\n"
"</p>"

#: in/DescrLargeSystems.htm:2117
msgid ""
"<pre> (define-system Example1 simple-system\n"
"   \"oz:ps:&lt;zippy&gt;.foo.lisp\" \"bar.lisp\" \"baz.lisp\")\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:2122
msgid ""
"<p>\n"
"It could also be described using the <code>MODULAR-SYSTEM</code> notation.\n"
"For example,\n"
"</p><p>"
msgstr ""
"<p>\n"
"Она также может быть описана с использованием нотации <code>MODULAR-SYSTEM</"
"code>.\n"
"Например,\n"
"</p><p>"

#: in/DescrLargeSystems.htm:2132
msgid ""
"</p><pre>(define-system Example1 modular-system\n"
"  (:module m1 \"oz:ps:&lt;zippy&gt;foo.lisp\")\n"
"  (:module m2 \"bar.lisp\"\n"
"   (:needs (:instantiate m1)\n"
"           (:update m1)))\n"
"  (:module m3 \"baz.lisp\"\n"
"   (:needs (:instantiate m2)\n"
"           (:update m2))))\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:2142
msgid ""
"<p>\n"
"In this case, the <code>SIMPLE-SYSTEM</code> notation is obviously to\n"
"be preferred since\n"
"it makes clear the simplicity of the relationships between the files.  In\n"
"other cases, however, <code>SIMPLE-SYSTEM</code> is not going to be\n"
"powerful enough to\n"
"express the inter-module relationships, as our next example will\n"
"illustrate.\n"
"</p>"
msgstr ""
"<p>\n"
"В этом случае нотация <code>SIMPLE-SYSTEM</code> очевидно предпочтительнее, "
"так\n"
"как она проясняет простоту отношений между файлами.  В других случаях, "
"однако, \n"
"<code>SIMPLE-SYSTEM</code> не будет достаточно мощной, чтобы выразить "
"межмодульные\n"
"отношения, как будет показано в нашем следующем примере.\n"
"</p>"

#: in/DescrLargeSystems.htm:2144
msgid "<h3>Example 2</h3>"
msgstr "<h3>Пример 2</h3>"

#: in/DescrLargeSystems.htm:2156
msgid ""
"<p>\n"
"There is a file called <tt>\"MACROS\"</tt> which requires compile time "
"support\n"
"from <tt>\"MACRO-HELPERS\"</tt>.  The result of the expansion of these \n"
"macros needs support\n"
"from <tt>\"MACRO-SUPPORT-1\"</tt>\n"
"and <tt>\"MACRO-SUPPORT-2\"</tt> at compile time and <tt>\"BASIC\"</tt> at\n"
"runtime.  Users of <tt>\"MACROS\"</tt> should not have to know about \n"
"these support files, so we want the fact that any time a \n"
"module says it needs <tt>\"MACROS\"</tt>,\n"
"all the other dependencies are added implicitly.\n"
"</p>"
msgstr ""
"<p>\n"
"Существует файл с именем <tt>\"MACROS\"</tt>, который требует поддержки\n"
"во время компиляции от <tt>\"MACRO-HELPERS\"</tt>.  Резултат расширения\n"
"этих макросов требует поддержки со стороны <tt>\"MACRO-SUPPORT-1\"</tt>\n"
"и <tt>\"MACRO-SUPPORT-2\"</tt> во время компиляции и <tt>\"BASIC\"</tt> во\n"
"время выполнения.  Пользователи <tt>\"MACROS\"</tt> не должны знать об\n"
"этих файлах поддержки, поэтому мы хотим, чтобы каждый раз, когда модуль\n"
"говорит, что ему нужен <tt>\"MACROS\"</tt>, все другие  зависимости\n"
"добавлялись неявно.\n"
"</p>"

#: in/DescrLargeSystems.htm:2164
msgid ""
"<p>\n"
"There is a file called <tt>\"META-MACROS\"</tt>. \n"
"The macros in that file will expand\n"
"into calls to macros in <tt>\"MACROS\"</tt>, \n"
"though its consumer should not have to\n"
"know this.\n"
"</p>"
msgstr ""
"<p>\n"
"Есть файл под названием <tt>\"META-MACROS\"</tt>. \n"
"Макросы в этом файле преобразуются в вызовы макросов в <tt>\"MACROS\"</"
"tt>, \n"
"хотя его пользователь не должен знать об этом.\n"
"</p>"

#: in/DescrLargeSystems.htm:2171
msgid ""
"<p>\n"
"There is a file called <tt>\"UTILITIES\"</tt> which needs <tt>\"MACROS\"</"
"tt> at compile time and\n"
"<tt>\"BASE\"</tt> at runtime.  It uses the functions in <tt>\"BASE\"</tt> "
"explicitly, so must\n"
"specify an explicit dependency upon it even though it happens that <tt>"
"\"MACROS\"</tt>\n"
"provides an explicit dependency.\n"
"</p>"
msgstr ""
"<p>\n"
"Существует файл с именем <tt>\"UTILITIES\"</tt> которому требуется <tt>"
"\"MACROS\"</tt> во время\n"
"компиляции и <tt>\"BASE\"</tt> во время выполнения.  Он явно использует "
"функции из <tt>\"BASE\"</tt>,\n"
"поэтому должен указывать явную зависимость от него, даже если случается, "
"что  <tt>\"MACROS\"</tt>\n"
"предоставляет явную зависимость.\n"
"</p>"

#: in/DescrLargeSystems.htm:2177
msgid ""
"<p>\n"
"There is a file called <tt>\"MAIN\"</tt> which depends upon \n"
"<tt>\"UTILITIES\"</tt> at runtime and\n"
"<tt>\"META-MACROS\"</tt> at compile time.\n"
"</p>"
msgstr ""
"<p>\n"
"Существует файл с именем <tt>\"MAIN\"</tt> который зависит от \n"
"<tt>\"UTILITIES\"</tt> во время выполнения и\n"
"<tt>\"META-MACROS\"</tt> во время компиляции.\n"
"</p>"

#: in/DescrLargeSystems.htm:2204
msgid ""
"<pre>(define-system Example2 modular-system\n"
"  (:full-name \"The Second Example\")\n"
"  (:module base \"OZ:PS:&lt;FOO&gt;BASIC.LISP\")\n"
"  (:module macro-helpers \"OZ:PS:&lt;FOO&gt;MACRO-HELPERS.LISP\")\n"
"  (:module macros \"OZ:PS:&lt;FOO&gt;MACROS.LISP\"\n"
"   (:needs\n"
"    (:instantiate macro-helpers))\n"
"   (:causes\n"
"    (:needs\n"
"     (:instantiate base)\n"
"     (:update macro-support))))\n"
"  (:module macro-support (\"OZ:PS:&lt;FOO&gt;MACRO-SUPPORT-1.LISP\"\n"
"                          \"OZ:PS:&lt;FOO&gt;MACRO-SUPPORT-2.LISP\"))\n"
"  (:module meta-macros \"OZ:PS:&lt;FOO&gt;META-MACROS.LISP\"\n"
"   (:causes\n"
"    (:needs\n"
"     (:update macros))))\n"
"  (:module util \"OZ:PS:&lt;FOO&gt;UTILITIES.LISP\"\n"
"   (:needs\n"
"    (:update macros)\n"
"    (:instantiate base)))\n"
"  (:module main \"OZ:PS:&lt;FOO&gt;MAIN.LISP\"\n"
"   (:needs\n"
"    (:instantiate util)\n"
"    (:update meta-macros))))\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:2208
msgid ""
"<p>\n"
"The equivalent in <code>DEFSYSTEM</code> would be:\n"
"</p>"
msgstr ""
"<p>\n"
"Эквивалент в <code>DEFSYSTEM</code> будет:\n"
"</p>"

#: in/DescrLargeSystems.htm:2212
msgid ""
"<pre>(defsystem Example2\n"
"  (:short-name \"EXAMPLE2\")\n"
"  (:full-name  \"The Second Example\")"
msgstr ""

#: in/DescrLargeSystems.htm:2233
msgid ""
"  (:module BASE (\"OZ:PS:&lt;FOO&gt;BASIC.LISP\"))\n"
"  (:module MACRO-HELPERS (\"OZ:PS:&lt;FOO&gt;MACRO-HELPERS.LISP\"))\n"
"  (:module MACROS (\"OZ:PS:&lt;FOO&gt;MACROS.LISP\"))\n"
"  (:module MACRO-SUPPORT (\"OZ:PS:&lt;FOO&gt;MACRO-SUPPORT-1.LISP\"\n"
"                          \"OZ:PS:&lt;FOO&gt;MACRO-SUPPORT-2.LISP\"))\n"
"  (:module META-MACROS (\"OZ:PS:&lt;FOO&gt;META-MACROS.LISP\"))\n"
"  (:module UTILITIES (\"OZ:PS:&lt;FOO&gt;UTILITIES.LISP\"))\n"
"  (:module MAIN (\"OZ:PS:&lt;FOO&gt;MAIN.LISP\"))\n"
"  (:compile-load BASE)\n"
"  (:compile-load MACRO-HELPERS)\n"
"  (:compile-load MACROS NIL (:FASLOAD MACRO-HELPERS))\n"
"  (:compile-load MACRO-SUPPORT)\n"
"  (:compile-load META-MACROS)\n"
"  (:compile-load-init UTIL (MACRO-SUPPORT MACROS)\n"
"                           (:FASLOAD MACRO-SUPPORT MACROS)\n"
"                           (:FASLOAD BASE))\n"
"  (:compile-load-init MAIN (:MACRO-SUPPORT MACROS META-MACROS)\n"
"                           (:FASLOAD MACRO-SUPPORT MACROS META-MACROS)\n"
"                           (:FASLOAD UTIL BASE)))\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:2240
msgid ""
"<p>\n"
"Note, however, that even in this small example, we can see the\n"
"characteristic pyramidal shape that <tt>DEFSYSTEM</tt>'s\n"
"dependency clauses tend to\n"
"take on.\n"
"</p>"
msgstr ""
"<p>\n"
"Однако, обратите внимание, что даже в этом небольшом примере мы можем\n"
"видеть характерную пирамидальную форму, которую склонны принимать\n"
"предложения зависимостей  <tt>DEFSYSTEM</tt>.\n"
"</p>"

#: in/DescrLargeSystems.htm:2242
msgctxt "in/DescrLargeSystems.htm:2242"
msgid "<hr>"
msgstr ""

#: in/DescrLargeSystems.htm:2244
msgid "<h2><a name=\"appendix-b\">Appendix B: Code</a></h2>"
msgstr "<h2><a name=\"appendix-b\">Приложение B: Код</a></h2>"

#: in/DescrLargeSystems.htm:2253
msgid ""
"<font color=\"green\">\n"
"<p>\n"
"[See also <a href=\"#appendix-c\">Appendix C</a>, which is an attempt to "
"translate this code\n"
"into something more like it would look in Common Lisp.\n"
"<br>\n"
" --<i>KMP</i> 21-Jan-2001]\n"
"</p>\n"
"</font>"
msgstr ""
"<font color=\"green\">\n"
"<p>\n"
"[Смотрите так же <a href=\"#appendix-c\">Приложение C</a>, которое "
"представляет собой попытку\n"
"перевести этот код в нечто более похожее на Common Lisp.\n"
"<br>\n"
" --<i>KMP</i> 21-Jan-2001]\n"
"</p>\n"
"</font>"

#: in/DescrLargeSystems.htm:2255
msgid "<pre>;;; -*- Mode:LISP; Package:USER; Base:10; Fonts:MEDFNB -*-"
msgstr ""

#: in/DescrLargeSystems.htm:2257
msgid ";;;; System"
msgstr ""

#: in/DescrLargeSystems.htm:2262
msgid ""
";;; SYSTEM\n"
";;;\n"
";;; Any flavor which claims to satisfy the SYSTEM protocol should\n"
";;; include this flavor in its component flavors list."
msgstr ""

#: in/DescrLargeSystems.htm:2273
msgid ""
"(defflavor system () ()\n"
"  (:required-methods\n"
"     :process-options\n"
"     :process-option\n"
"     :source-files\n"
"     :generate-plan\n"
"     :explain-plan\n"
"     :execute-plan\n"
"     :explain-action\n"
"     :execute-action))"
msgstr ""

#: in/DescrLargeSystems.htm:2276
msgid ";;;; Vanilla System"
msgstr ""

#: in/DescrLargeSystems.htm:2282
msgctxt "in/DescrLargeSystems.htm:2282"
msgid ""
";;; VANILLA-SYSTEM\n"
";;;\n"
";;; A vanilla system knows about names and how to process options,\n"
";;; but has no interesting options it is willing to process that would\n"
";;; make it useful as something to instantiate."
msgstr ""

#: in/DescrLargeSystems.htm:2290
msgid ""
"(defflavor vanilla-system ((short-name nil) (full-name nil)) (system)\n"
"  (:method-combination (:case :base-flavor-last\n"
"                          :generate-plan\n"
"                          :process-option\n"
"                          :explain-action\n"
"                          :execute-action))\n"
"  :settable-instance-variables)"
msgstr ""

#: in/DescrLargeSystems.htm:2295
msgid ""
";;; :NAME (to VANILLA-SYSTEM)\n"
";;;\n"
";;; Returns the name of the system\n"
";;; Long name is preferred over short name where both are available."
msgstr ""

#: in/DescrLargeSystems.htm:2297
msgid "(defmethod (vanilla-system :name) () (or full-name short-name))"
msgstr ""

#: in/DescrLargeSystems.htm:2303
msgid ""
";;; :PRINT-SELF ...  (to VANILLA-SYSTEM)\n"
";;;\n"
";;; For debugging convenience,\n"
";;; (PRIN1 mysys) types something like: #&lt;SYSTEM \"My System\" "
"343324&gt;\n"
";;; (PRINC mysys) types something like: My System"
msgstr ""

#: in/DescrLargeSystems.htm:2311
msgid ""
"(defmethod (vanilla-system :print-self) (stream level prin1?  &amp;rest "
"ignore)\n"
"  level :ignored\n"
"  (let ((my-name (send self :name)))\n"
"    (cond ((not prin1?)  (format stream \"~A\" my-name))\n"
"          (t\n"
"           (format stream \"#&lt;~S ~A ~O&gt;\"\n"
"                   (typep self) my-name (%pointer self))))))"
msgstr ""

#: in/DescrLargeSystems.htm:2317
msgid ""
";;; :DESCRIBE (to VANILLA-SYSTEM)\n"
";;;\n"
";;; Does that part of the explanation relevant to the flavor.\n"
";;; Other flavors mixing this in should use :AFTER or :BEFORE\n"
";;; daemons to modify this method."
msgstr ""

#: in/DescrLargeSystems.htm:2321
msgid ""
"(defmethod (vanilla-system :describe) ()\n"
"  (format t \"~2&amp;~A is a system of type ~S.~%\" self (typep self))\n"
"  self)"
msgstr ""

#: in/DescrLargeSystems.htm:2324
msgid ";;;; Options Facility"
msgstr ""

#: in/DescrLargeSystems.htm:2328
msgid ""
";;; :PROCESS-OPTIONS options (to VANILLA-SYSTEM)\n"
";;;\n"
";;; Maps across the given options, digesting them."
msgstr ""

#: in/DescrLargeSystems.htm:2333
msgid ""
"(defmethod (vanilla-system :process-options) (options)\n"
"  (dolist (data options)\n"
"    (lexpr-send self :process-option (car data) (cdr data)))\n"
"  self)"
msgstr ""

#: in/DescrLargeSystems.htm:2340
msgid ""
";;; :PROCESS-OPTION opt-name .  opt-args (to VANILLA-SYSTEM)\n"
";;;\n"
";;; :NAME Sets defaults for all name types.\n"
";;; :SHORT-NAME Sets the short name (overrides :NAME if given).\n"
";;; :LONG-NAME Sets the long name (overrides :NAME if given).\n"
";;; otherwise Signals an error."
msgstr ""

#: in/DescrLargeSystems.htm:2344
msgid ""
"(defmethod (vanilla-system :case :process-option :name) (data)\n"
"  (if (not short-name) (setq short-name (string data)))\n"
"  (if (not full-name) (setq full-name (string data))))"
msgstr ""

#: in/DescrLargeSystems.htm:2347
msgid ""
"(defmethod (vanilla-system :case :process-option :short-name) (data)\n"
"  (setq short-name (string data)))"
msgstr ""

#: in/DescrLargeSystems.htm:2350
msgid ""
"(defmethod (vanilla-system :case :process-option :full-name) (data)\n"
"  (setq full-name (string data)))"
msgstr ""

#: in/DescrLargeSystems.htm:2354
msgid ""
"(defmethod (vanilla-system :otherwise :process-option) (key &amp;rest data)\n"
"  (ferror \"The option ~S is not known to ~S.~%Data: ~S\"\n"
"          key self (copylist data)))"
msgstr ""

#: in/DescrLargeSystems.htm:2357
msgid ";;;; Planning/Executing Actions"
msgstr ""

#: in/DescrLargeSystems.htm:2369
msgid ""
";;; :GENERATE-PLAN action (to VANILLA-SYSTEM)\n"
";;;\n"
";;; This method returns abstract information about how to perform\n"
";;; a specified ACTION. The reply is in the form of a list of the\n"
";;; form ((MSG1 .  MSG-ARGS1) (MSG2 .  MSG-ARGS2) ...), such that\n"
";;; sending each MSG (with the given MSG-ARGS) to the object in\n"
";;; order will accomplish the action in question.\n"
";;;\n"
";;; :UPDATE How to compile (or otherwise update) the system,\n"
";;; :INSTANTIATE How to load (or otherwise instantiate) the system.\n"
";;; otherwise An error results if the action isn't defined."
msgstr ""

#: in/DescrLargeSystems.htm:2373
msgid ""
"(defmethod (vanilla-system :otherwise :generate-plan) (key &amp;rest data)\n"
"  (ferror \"The object ~S does not know how to ~S.~%Data: ~S\"\n"
"          self key (copylist data)))"
msgstr ""

#: in/DescrLargeSystems.htm:2380
msgid ""
";;; :EXECUTE-PLAN plan (to VANILLA-SYSTEM)\n"
";;;\n"
";;; The steps of the plan are executed.\n"
";;;\n"
";;; PLAN may be either a plan name (a symbol) or a list of steps\n"
";;; such as that returned by a :GENERATE-PLAN message."
msgstr ""

#: in/DescrLargeSystems.htm:2388
msgid ""
"(defmethod (vanilla-system :execute-plan) (plan)\n"
"  (cond ((symbolp plan)\n"
"         (send self :execute-plan (send self :generate-plan plan)))\n"
"        (t\n"
"         (dolist (step plan)\n"
"           (lexpr-send self :execute-action step))))\n"
"  self)"
msgstr ""

#: in/DescrLargeSystems.htm:2395
msgid ""
";;; :EXPLAIN-PLAN plan (to VANILLA-SYSTEM)\n"
";;;\n"
";;; The steps of the PLAN are explained.\n"
";;;\n"
";;; PLAN may be either a plan name (a symbol) or a list of steps\n"
";;; such as that returned by a :GENERATE-PLAN message."
msgstr ""

#: in/DescrLargeSystems.htm:2403
msgid ""
"(defmethod (vanilla-system :explain-plan) (plan)\n"
"  (cond ((symbolp plan)\n"
"         (send self :explain-plan (send self :generate-plan)))\n"
"        (t\n"
"         (dolist (step plan)\n"
"           (lexpr-send self :explain-action step))))\n"
"  self)"
msgstr ""

#: in/DescrLargeSystems.htm:2418
msgid ""
";;; :EXECUTE-ACTION name .  args (to VANILLA-SYSTEM)\n"
";;; :EXPLAIN-ACTION name .  args (to VANILLA-SYSTEM)\n"
";;;\n"
";;; Sending :EXECUTE-ACTION causes a given action to occur.\n"
";;;\n"
";;; Sending :EXPLAIN-ACTION describes what a given action would\n"
";;; do if performed.\n"
";;;\n"
";;; These messages are handled by :CASE method dispatch.\n"
";;;\n"
";;; :LOAD Load a (Lisp) file.\n"
";;; :COMPILE Compile a (Lisp) file.\n"
";;; Otherwise an error."
msgstr ""

#: in/DescrLargeSystems.htm:2421
msgid ""
"(defmethod (vanilla-system :case :execute-action :load (file)\n"
"  (load file))"
msgstr ""

#: in/DescrLargeSystems.htm:2424
msgid ""
"(defmethod (vanilla-system :case :execute-action :compile) (file)\n"
"  (compiler:compile-file file))"
msgstr ""

#: in/DescrLargeSystems.htm:2428
msgid ""
"(defmethod (vanilla-system :otherwise :execute-action) (key &amp;rest data)\n"
"  (ferror \"The action ~S is not known to ~S.~%Data: ~S\"\n"
"          key self (copylist data)))"
msgstr ""

#: in/DescrLargeSystems.htm:2434
msgid ""
";;; :EXPLAIN-ACTION name .  args (to VANILLA-SYSTEM)\n"
";;;\n"
";;; If the action is valid but a description wasn't available, try\n"
";;; to conjure up a plausible description based on the name of the\n"
";;; action and its arguments."
msgstr ""

#: in/DescrLargeSystems.htm:2442
msgid ""
"(defmethod (vanilla-system :otherwise :explain-action) (key &amp;rest data)\n"
"  (cond ((not (memq key (send self :execute-action :which-operations)))\n"
"         (ferror \"The action ~S is not known to ~S, so can't describe it.~\n"
"                ~%Data: ~S\"\n"
"                 key self (copylist data)))\n"
"        (t (format t \"~&amp;~A~@[ ~{~A~^, ~}.~]~%\"\n"
"                   (string-capitalize-word key) data))))"
msgstr ""

#: in/DescrLargeSystems.htm:2445
msgid ";;;; Simple System"
msgstr ""

#: in/DescrLargeSystems.htm:2450
msgctxt "in/DescrLargeSystems.htm:2450"
msgid ""
";;; SIMPLE-SYSTEM\n"
";;;\n"
";;; A simple system is a system which has left-to-right file\n"
";;; dependencies."
msgstr ""

#: in/DescrLargeSystems.htm:2453
msgid ""
"(defflavor simple-system ((source-files '())) (vanilla-system)\n"
"  :gettable-instance-variables)"
msgstr ""

#: in/DescrLargeSystems.htm:2457
msgid ""
";;; :AFTER :DESCRIBE (to SIMPLE-SYSTEM)\n"
";;;\n"
";;; Tacks on some information about the files which make up this system."
msgstr ""

#: in/DescrLargeSystems.htm:2460
msgid ""
"(defmethod (simple-system :after :describe) ()\n"
"  (format t \"~&amp;It has source files~{~&lt;~%~1:; ~S~&gt;~^,~}.~%\" "
"source-files))"
msgstr ""

#: in/DescrLargeSystems.htm:2465
msgid ""
";;; :PROCESS-OPTIONS (to SIMPLE-SYSTEM)\n"
";;;\n"
";;; The only options allowed to a simple system is a list of file\n"
";;; names with left-to-right ordering dependencies."
msgstr ""

#: in/DescrLargeSystems.htm:2476
msgid ""
"(defmethod (simple-system :process-options) (options)\n"
"  (when options\n"
"    (setq source-files '())\n"
"    (let ((default-pathname (fs:merge-pathname-defaults (car options))))\n"
"      (dolist (file options)\n"
"        (setq default-pathname\n"
"              (fs:merge-pathname-defaults file default-pathname))\n"
"        (push default-pathname source-files))\n"
"      (setq source-files (nreverse source-files)))\n"
"    t))"
msgstr ""

#: in/DescrLargeSystems.htm:2481
msgid ""
";;; :GENERATE-PLAN :UPDATE (to SIMPLE-SYSTEM)\n"
";;;\n"
";;; To update this kind of system, one must compile and load each\n"
";;; of its files in sequence."
msgstr ""

#: in/DescrLargeSystems.htm:2488
msgid ""
"(defmethod (simple-system :case :generate-plan :update) ()\n"
"  (mapcan #'(lambda (file)\n"
"              (list (list ':compile file)\n"
"                    (list ':load (send file :new-pathname\n"
"                                            :type :bin))))\n"
"          source-files))"
msgstr ""

#: in/DescrLargeSystems.htm:2493
msgid ""
";;; :GENERATE-PLAN :INSTANTIATE (to SIMPLE-SYSTEM)\n"
";;;\n"
";;; To instantiate this kind of system, one must simply load each\n"
";;; of its files in sequence."
msgstr ""

#: in/DescrLargeSystems.htm:2499
msgid ""
"(defmethod (simple-system :case :generate-plan :instantiate) ()\n"
"  (mapcan #'(lambda (file)\n"
"              (list (list ':load\n"
"                          (send file :new-pathname :type :bin))))\n"
"          source-files))"
msgstr ""

#: in/DescrLargeSystems.htm:2502
msgid ";;;; Pre-Planned System"
msgstr ""

#: in/DescrLargeSystems.htm:2507
msgctxt "in/DescrLargeSystems.htm:2507"
msgid ""
";;; PREPLANNED-SYSTEM\n"
";;;\n"
";;; A preplanned system is a system which has its plans for manipulation\n"
";;; specified explicitly rather than inferred."
msgstr ""

#: in/DescrLargeSystems.htm:2511
msgid ""
"(defflavor preplanned-system ((files '())\n"
"                              (plans '()))\n"
"           (vanilla-system))"
msgstr ""

#: in/DescrLargeSystems.htm:2516
msgid ""
";;; :PROCESS-OPTIONS (to PREPLANNED-SYSTEM)\n"
";;;\n"
";;; The clauses in the DEFINE-SYSTEM for this kind of system are\n"
";;; just (&lt;plan-name&gt; .  &lt;commands&gt;)."
msgstr ""

#: in/DescrLargeSystems.htm:2520
msgid ""
"(defmethod (preplanned-system :process-options) (options)\n"
"  (setq files (car options))\n"
"  (setq plans (cdr options)))"
msgstr ""

#: in/DescrLargeSystems.htm:2524
msgid ""
";;; :GENERATE-PLAN (to PREPLANNED-SYSTEM)\n"
";;;\n"
";;; This does simple table-lookup to find the plan."
msgstr ""

#: in/DescrLargeSystems.htm:2529
msgid ""
"(defmethod (preplanned-system :generate-plan) (operation)\n"
"  (let ((p (assq operation plans)))\n"
"    (cond (p (cdr p))\n"
"          (t (ferror \"No plan for operation ~S\" operation)))))"
msgstr ""

#: in/DescrLargeSystems.htm:2532
msgid ";;;; Modular System"
msgstr ""

#: in/DescrLargeSystems.htm:2537
msgctxt "in/DescrLargeSystems.htm:2537"
msgid ""
";;; MODULAR-SYSTEM\n"
";;;\n"
";;; A modular system is a system which allows specification of\n"
";;; inter-module dependencies, both implicit and explicit."
msgstr ""

#: in/DescrLargeSystems.htm:2542
msgid ""
"(defflavor modular-system ((modules nil)) (vanilla-system)\n"
"  :initable-instance-variables\n"
"  :gettable-instance-variables\n"
"  :settable-instance-variables)"
msgstr ""

#: in/DescrLargeSystems.htm:2548
msgid ""
";;; :AFTER :DESCRIBE (to MODULAR-SYSTEM)\n"
";;;\n"
";;; When a modular system is described, we tack on information\n"
";;; saying how many modules it has and then we ask each module\n"
";;; to describe itself."
msgstr ""

#: in/DescrLargeSystems.htm:2554
msgid ""
"(defmethod (modular-system :after :describe) ()\n"
"  (let ((m-list (send self :modules)))\n"
"    (format t \"~&amp;It has ~D module~:P:\" (length m-list))\n"
"    (dolist (m m-list)\n"
"      (send m :describe))))"
msgstr ""

#: in/DescrLargeSystems.htm:2558
msgid ""
";;; :GET-MODULE name (to MODULAR-SYSTEM)\n"
";;;\n"
";;; Returns the component module with the given name (or NIL if none)."
msgstr ""

#: in/DescrLargeSystems.htm:2562
msgid ""
"(defmethod (modular-system :get-module) (name)\n"
"  (dolist (m modules)\n"
"    (if (eq (send m :name) name) (return m))))"
msgstr ""

#: in/DescrLargeSystems.htm:2566
msgid ""
";;; :SOURCE-FILES\n"
";;;\n"
";;; Returns a list of the source files for the system."
msgstr ""

#: in/DescrLargeSystems.htm:2572
msgid ""
"(defmethod (modular-system :source-files) ()\n"
"  (apply #'append\n"
"         (mapcar #'(lambda (module)\n"
"                     (send module :source-files))\n"
"                 modules)))"
msgstr ""

#: in/DescrLargeSystems.htm:2577
msgid ""
";;; :PROCESS-OPTION :MODULE .  spec (to MODULAR-SYSTEM)\n"
";;;\n"
";;; Declares how to handle the :MODULE option.  Creates an object\n"
";;; of type MODULE and lets it process the associated spec."
msgstr ""

#: in/DescrLargeSystems.htm:2584
msgid ""
"(defmethod (modular-system :case :process-option :module) (&amp;rest spec)\n"
"  (setq modules\n"
"        (nconc modules\n"
"               (ncons (make-instance 'module\n"
"                                     :system self\n"
"                                     :spec (copylist spec))))))"
msgstr ""

#: in/DescrLargeSystems.htm:2587
msgid ";;;; Module"
msgstr ""

#: in/DescrLargeSystems.htm:2592
msgctxt "in/DescrLargeSystems.htm:2592"
msgid ""
";;; MODULE\n"
";;;\n"
";;; A module is a collection of files to be used as a building\n"
";;; block for modular systems."
msgstr ""

#: in/DescrLargeSystems.htm:2605
msgid ""
"(defflavor module ((name nil)\n"
"                   (system nil)\n"
"                   (spec nil)\n"
"                   (source-files '())\n"
"                   (assertions '())\n"
"                   (needs '())\n"
"                   (causes '()))\n"
"           ()\n"
"  :initable-instance-variables\n"
"  :gettable-instance-variables\n"
"  :settable-instance-variables\n"
"  (:method-combination (:case :base-flavor-last :process-assertions)))"
msgstr ""

#: in/DescrLargeSystems.htm:2609
msgid ""
";;; :AFTER :INIT (to MODULE)\n"
";;;\n"
";;; See to it that if SPEC was given, it gets appropriately processed."
msgstr ""

#: in/DescrLargeSystems.htm:2612
msgid ""
"(defmethod (module :after :init) (&amp;rest ignore)\n"
"  (send self :process-spec spec))"
msgstr ""

#: in/DescrLargeSystems.htm:2618
msgid ""
";;; :PRINT-SELF ...  (to MODULE)\n"
";;;\n"
";;; For debugging convenience.\n"
";;; (PRIN1 mod) types something like: #&lt;Module MYSYS*MOD1 234567&gt;\n"
";;; (PRINC mod) types something like: MOD1"
msgstr ""

#: in/DescrLargeSystems.htm:2630
msgid ""
"(defmethod (module :print-self) (stream level prin1?  &amp;rest ignore)\n"
"  level :ignored\n"
"  (let ((my-name (send self :name)))\n"
"    (cond ((not prin1?)  (format stream \"~A\" my-name))\n"
"          (t\n"
"           (format stream \"#&lt;~S ~@[~A*~]~:[Anonymous~;~:*~A~] ~O&gt;\"\n"
"                   (typep self)\n"
"                   (let ((sys (send self :system)))\n"
"                     (if sys (send sys :short-name)))\n"
"                   my-name\n"
"                   (%pointer self))))))"
msgstr ""

#: in/DescrLargeSystems.htm:2635
msgid ""
";;; :DESCRIBE (to MODULE)\n"
";;;\n"
";;; Details the source files and dependency information\n"
";;; for the module."
msgstr ""

#: in/DescrLargeSystems.htm:2644
msgid ""
"(defmethod (module :describe) ()\n"
"  (format t \"~2&amp; ~A~@[  ~{~%~A~^.~}~]~%\" self source-files)\n"
"  (do ((n needs (cddr n)))\n"
"      ((null n))\n"
"    (format t \"~&amp; ~S dependenc~@P: ~{~S~^, ~}.~%\"\n"
"            (car n) (length (cadr n)) (cadr n)))\n"
"  (format t \"~&amp;\")\n"
"  self)"
msgstr ""

#: in/DescrLargeSystems.htm:2661
msgid ""
";;; :PROCESS-SPEC spec (to MODULE)\n"
";;;\n"
";;; Process the given SPEC absorbing relevant info.\n"
";;;\n"
";;; The NAME is only absorbed if name info isn't already set up.\n"
";;; This is because :PROCESS-SPEC may be recursively called on others'\n"
";;; assertion lists if there are included modules with specs of their\n"
";;; own.  In such case, we want to accept their attributes, but not\n"
";;; their names.\n"
";;;\n"
";;; The ASSERTIONS are processed next, because presumably they specify\n"
";;; prerequisites for this module and any files they need loaded should\n"
";;; get set up before we set up the files particular to this module.\n"
";;;\n"
";;; Finally, the FILES associated with this module are processed."
msgstr ""

#: in/DescrLargeSystems.htm:2667
msgid ""
"(defmethod (module :process-spec) (s)\n"
"  (when s\n"
"    (if (not name) (setq name (car s)))\n"
"    (send self :process-assertions (cddr s))\n"
"    (send self :process-files (cadr s))))"
msgstr ""

#: in/DescrLargeSystems.htm:2671
msgid ""
";;; :PROCESS-FILES files-list (to MODULE)\n"
";;;\n"
";;; Adds file info given in FILES-LIST to the module's master FILES list."
msgstr ""

#: in/DescrLargeSystems.htm:2685
msgid ""
"(defmethod (module :process-files) (files-list)\n"
"  (if (atom files-list) (setq files-list (list files-list)))\n"
"  (dolist (file files-list)\n"
"    (cond ((typep file 'fs:pathname)\n"
"           (setq source-files (nconc source-files (ncons file))))\n"
"          ((stringp file)\n"
"           (setq source-files (nconc source-files\n"
"                                     (ncons (fs:parse-pathname file)))))\n"
"          ((symbolp file)\n"
"           (send self :process-spec\n"
"                 (send (send system :get-module file) :spec)))\n"
"          (t\n"
"           (ferror \"Bad object in file list: ~S - ~S\" file self)))))"
msgstr ""

#: in/DescrLargeSystems.htm:2689
msgid ""
";;; :PROCESS-ASSERTIONS spec (to MODULE)\n"
";;;\n"
";;; Iterates across assertions, processing each."
msgstr ""

#: in/DescrLargeSystems.htm:2693
msgid ""
"(defmethod (module :process-assertions) (assertion-list)\n"
"  (dolist (assertion assertion-list)\n"
"    (lexpr-send self :process-assertion assertion)))"
msgstr ""

#: in/DescrLargeSystems.htm:2703
msgid ""
";;; :PROCESS-ASSERTION .  data (to MODULE)\n"
";;;\n"
";;; This method is used to process dependency assertions, etc.\n"
";;; for the given module.  It uses case method dispatch:\n"
";;;\n"
";;; :NEEDS Declares need to instantiate modules at certain times.\n"
";;; :CAUSES Declares assertions to be forwarded to the consumer.\n"
";;; Otherwise an error."
msgstr ""

#: in/DescrLargeSystems.htm:2715
msgid ""
"(defmethod (module :case :process-assertions :needs) (&amp;rest data)\n"
"  (let ((pl (locf needs)))\n"
"    (dolist (item data)\n"
"      (let ((marker (car item)))\n"
"        (dolist (module-name (cdr item))\n"
"          (when (not (memq module-name (get pl marker)))\n"
"            (let ((m (send (send self :system) :get-module module-name)))\n"
"              ;; This may be overly conservative, but will work...\n"
"              (send self :process-assertions (send m :causes))\n"
"              (setf (get pl marker)\n"
"                    (nconc (get pl marker) (ncons module-name))))))))))"
msgstr ""

#: in/DescrLargeSystems.htm:2722
msgid ""
"(defmethod (module :case :process-assertion :causes) (&amp;rest data)\n"
"  ;; Filtering this is technically unnecessary, but it will keep\n"
"  ;; redefinition from swamping us.\n"
"  (dolist (item data)\n"
"    (if (not (mem #'equal item causes))\n"
"        (setf causes (nconc causes (ncons item))))))"
msgstr ""

#: in/DescrLargeSystems.htm:2726
msgid ""
"(defmethod (module :otherwise :process-assertions) (key &amp;rest data)\n"
"  (ferror \"The ~S assertion is not known to ~S.~%Data: ~S\"\n"
"          key self (copylist data)))"
msgstr ""

#: in/DescrLargeSystems.htm:2729
msgid ";;;; User Interface"
msgstr ""

#: in/DescrLargeSystems.htm:2735
msgid ""
";;; (CREATE-SYSTEM name type [options])\n"
";;;\n"
";;; Creates a system object of the given TYPE, initializing it with\n"
";;; with the given NAME and OPTIONS. Returns the created object without\n"
";;; storing it permanently anywhere."
msgstr ""

#: in/DescrLargeSystems.htm:2741
msgid ""
"(defun create-system (name type &amp;optional options)\n"
"  (let ((system (make-instance type)))\n"
"    (send system :process-option :name name)\n"
"    (send system :process-options options)\n"
"    system))"
msgstr ""

#: in/DescrLargeSystems.htm:2745
msgid ""
";;; (SYSTEM name)\n"
";;;\n"
";;; Gets the definition of some globally defined system object."
msgstr ""

#: in/DescrLargeSystems.htm:2747
msgid "(defsubst system (name) (get name 'system))"
msgstr ""

#: in/DescrLargeSystems.htm:2752
msgctxt "in/DescrLargeSystems.htm:2752"
msgid ""
";;; (DEFINE-SYSTEM name type .  options)\n"
";;;\n"
";;; Creates and initializes a system with the given name.\n"
";;; Stores the definition globally for access later."
msgstr ""

#: in/DescrLargeSystems.htm:2756
msgid ""
"(defmacro define-system (name type &amp;body data)\n"
"  `(setf (system ',name)\n"
"         (create-system ',name ',type ',data)))"
msgstr ""

#: in/DescrLargeSystems.htm:2759
msgid ";;;; Utility Functions"
msgstr ""

#: in/DescrLargeSystems.htm:2763
msgid ""
"(defun process-options (system options-alist)\n"
"  \"Tells SYSTEM to process the given OPTIONS-ALIST.\"\n"
"  (send system :process-options options-alist))"
msgstr ""

#: in/DescrLargeSystems.htm:2767
msgid ""
"(defun process-option (system option-name &amp;rest option-data)\n"
"  \"Tells SYSTEM to process an individual option, given its NAME and DATA."
"\"\n"
"  (lexpr-send system :process-option option-name option-data))"
msgstr ""

#: in/DescrLargeSystems.htm:2772
msgid ""
"(defun source-files (system)\n"
"  \"Returns a list of the source files for SYSTEM.\"\n"
"  (declare (values files))\n"
"  (send system :source-files))"
msgstr ""

#: in/DescrLargeSystems.htm:2777
msgid ""
"(defun plan (system operations)\n"
"  \"Returns a list of ACTIONS (plan steps) for doing OPERATION.\"\n"
"  (declare (values actions))\n"
"  (send system :generate-plan operation))"
msgstr ""

#: in/DescrLargeSystems.htm:2781
msgid ""
"(defun execute (system actions)\n"
"  \"Tells SYSTEM to execute the given ACTIONS (plan steps).\"\n"
"  (send system :execute-plan actions))"
msgstr ""

#: in/DescrLargeSystems.htm:2785
msgid ""
"(defun explain (system actions)\n"
"  \"Tells SYSTEM to explain the given ACTIONS (plan steps).\"\n"
"  (send system :explain-plan actions))"
msgstr ""

#: in/DescrLargeSystems.htm:2789
msgid ""
"(defun execute-action (system action)\n"
"  \"Tells SYSTEM to execute the given ACTION (plan step).\"\n"
"  (send system :execute-action action))"
msgstr ""

#: in/DescrLargeSystems.htm:2794
msgid ""
"(defun explain-action (system action)\n"
"  \"Tells SYSTEM to explain the given ACTION (plan step).\"\n"
"  (send system :explain-action action))\n"
"</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:2796
msgctxt "in/DescrLargeSystems.htm:2796"
msgid "<font color=\"green\">"
msgstr ""

#: in/DescrLargeSystems.htm:2798
msgctxt "in/DescrLargeSystems.htm:2798"
msgid "<hr>"
msgstr ""

#: in/DescrLargeSystems.htm:2800
msgid "<h2><a name=\"appendix-c\">Appendix C: Common Lisp Code</a></h2>"
msgstr "<h2><a name=\"appendix-c\">Приложение C: Код Common Lisp</a></h2>"

#: in/DescrLargeSystems.htm:2806
msgid ""
"<p>\n"
"[This section was added for web republication.  Code here has been\n"
" translated to Common Lisp.  Testing may have been spotty.  \n"
" Please <a href=\"http://www.nhplace.com/kent/contact-kent.html\">report "
"bugs</a>.\n"
"</p>"
msgstr ""
"<p>\n"
"[Этот раздел был добавлен для веб переиздания. Код здесь был переведен на "
"Common Lisp.  Тестирование\n"
"вомзоно было выборочным.  \n"
" Пожалуйста <a href=\"http://www.nhplace.com/kent/contact-kent.html"
"\">сообщайте об ошибках</a>.\n"
"</p>"

#: in/DescrLargeSystems.htm:2812
msgid ""
"<p>\n"
" <a href=\"http://www.nhplace.com/kent/Papers/sysdef.lisp\">Click here to "
"download a copy of the most up-to-date version of this code.</a>\n"
"<br>\n"
" --<i>KMP</i> 21-Jan-2001]\n"
"</p>"
msgstr ""
"<p>\n"
" <a href=\"http://www.nhplace.com/kent/Papers/sysdef.lisp\">Нажмите здесь, "
"чтобы загрузить копию самой\n"
"последней версии кода</a>\n"
"<br>\n"
" --<i>KMP</i> 21-Jan-2001]\n"
"</p>"

#: in/DescrLargeSystems.htm:2821
msgid ""
"<pre>;;; -*- Mode: LISP; Syntax: ANSI-Common-Lisp; Package: (SYSDEF); -*-\n"
";;;\n"
";;; Copyright 2001 Kent M. Pitman.  All Rights Reserved.\n"
";;; Portions Copyright 1984 Massachusetts Institute of Technology; used by "
"permission.\n"
";;;\n"
";;; The intent is that sometime in the hopefully-near future this code will "
"be released for \n"
";;; public use, but for now, while we are still debugging it, please talk to "
"KMP before making \n"
";;; any serious dependencies on or modifications to this code."
msgstr ""

#: in/DescrLargeSystems.htm:2860
msgid ""
"(defpackage \"SYSDEF\"\n"
"  (:use \"CL\")\n"
"  (:import-from #.(package-name \n"
"\t\t   (or (find-package \"CLOS\")\n"
"\t\t       (find-package \"PCL\")\n"
"\t\t       (error \"Can't find suitable CLOS package.\")))\n"
"   ;; In CLISP, this is an internal symbol.  In other implementations,\n"
"   ;; this is an external symbol.  :import-from ignores that distinction.\n"
"   \"CLASS-PRECEDENCE-LIST\")\n"
"  (:export\n"
"   \"CREATE-SYSTEM\"\n"
"   \"DEFINE-SYSTEM\"\n"
"   \"EXECUTE-ACTION\"\n"
"   \"EXECUTE-PLAN\"\n"
"   \"EXPLAIN-ACTION\"\n"
"   \"EXPLAIN-PLAN\"\n"
"   \"FIND-SYSTEM-NAMED\"\n"
"   \"FULL-NAME\"\n"
"   \"GENERATE-PLAN\"\n"
"   \"MODULAR-SYSTEM\"\n"
"   \"MODULE\"\n"
"   \"MODULE-ASSERTIONS\"\n"
"   \"MODULE-CAUSES\"     \n"
"   \"MODULE-NEEDS\"\n"
"   \"MODULE-SPEC\"\n"
"   \"MODULE-SYSTEM\"\n"
"   \"MODULES\"\n"
"   \"NAME\"\n"
"   \"PREPLANNED-SYSTEM\"\n"
"   \"PROCESS-OPTION\"\n"
"   \"PROCESS-OPTIONS\"\n"
"   \"SHORT-NAME\"\n"
"   \"SIMPLE-SYSTEM\"\n"
"   \"SOURCE-FILES\"\n"
"   \"SYSTEM\"\n"
"   \"SYSTEM-PLANS\"\n"
"   \"VANILLA-SYSTEM\"\n"
"   ))"
msgstr ""

#: in/DescrLargeSystems.htm:2862
msgid "(in-package \"SYSDEF\")"
msgstr ""

#: in/DescrLargeSystems.htm:2865
msgid ""
"<hr width=\"20%\" align=\"left\">\n"
";;;; General protocol"
msgstr ""
"<hr width=\"20%\" align=\"left\">\n"
";;;; Общий протокол"

#: in/DescrLargeSystems.htm:2867
msgid "(defgeneric name (entity))"
msgstr ""

#: in/DescrLargeSystems.htm:2870
msgid ""
"<hr width=\"20%\" align=\"left\">\n"
";;;; System"
msgstr ""

#: in/DescrLargeSystems.htm:2875
msgid ""
";;; SYSTEM\n"
";;;\n"
";;; Any class that claims to satisfy the SYSTEM protocol should\n"
";;; use this class as a superclass."
msgstr ""
";;; SYSTEM\n"
";;;\n"
";;; Любой класс, который утверждает, что удовлетворяет протоколу SYSTEM "
"должен использовать\n"
";;; этот подклас в качестве суперкласса(родителя)."

#: in/DescrLargeSystems.htm:2877
msgid "(defclass system () ())"
msgstr ""

#: in/DescrLargeSystems.htm:2879
msgid ";; The system protocol."
msgstr ";; Системный протокол (обобщенные функции)"

#: in/DescrLargeSystems.htm:2882
msgid ""
"(defgeneric short-name (system))\n"
"(defgeneric full-name  (system))"
msgstr ""

#: in/DescrLargeSystems.htm:2891
msgid ""
"(defgeneric process-options (system options))\n"
"(defgeneric process-option (system option-key &amp;rest option-data))\n"
"(defgeneric source-files (system))\n"
"(defgeneric generate-plan (system plan-key &amp;rest plan-data))\n"
"(defgeneric explain-plan (system plan))\n"
"(defgeneric execute-plan (system plan))\n"
"(defgeneric explain-action (system action-key &amp;rest action-data))\n"
"(defgeneric execute-action (system action-key &amp;rest action-data))"
msgstr ""

#: in/DescrLargeSystems.htm:2899
msgid ""
";; If CL had a way of declaring these to be required methods, \n"
";; we'd use that.  Instead, we at least make these give better \n"
";; error messages as default methods for the protocol class SYSTEM.\n"
";; Note that we don't do this on class T, since some generics\n"
";; have names like NAME that are likely to be used in other packages\n"
";; than ours in ways we can't anticipate, so we keep our definitions\n"
";; local to the classes we create."
msgstr ""
";; Если у CL был бы способ объявить эти методы обязательными,\n"
";; мы бы его использовали.  Вместо этого мы, по крайней мере делаем нечто "
"лучшее,\n"
";; сообщения об ошибках в качестве методов по умолчанию для класса протокола "
"SYSTEM.\n"
";; Обратите внимние, что мы не делаем это в классе T, так как некоторые "
"обобщенные функции(generics)\n"
";; имеют имена подобные NAME, которые могут использоваться в других пакетах\n"
";; мы не можем предвидеть, поэтому мы сохраняем наши определения\n"
";; локально для классов, которые мы создаем."

#: in/DescrLargeSystems.htm:2903
msgid ""
"(defmethod name ((system system))\n"
"  (error \"The required method NAME is not implemented by ~S.\"\n"
"\t system))"
msgstr ""

#: in/DescrLargeSystems.htm:2907
msgid ""
"(defmethod short-name ((system system))\n"
"  (error \"The required method SHORT-NAME is not implemented by ~S.\"\n"
"\t system))"
msgstr ""

#: in/DescrLargeSystems.htm:2911
msgid ""
"(defmethod full-name ((system system))\n"
"  (error \"The required method FULL-NAME is not implemented by ~S.\"\n"
"\t system))"
msgstr ""

#: in/DescrLargeSystems.htm:2915
msgid ""
"(defmethod process-options ((system system) options)\n"
"  (error \"The required method PROCESS-OPTIONS is not implemented by ~S.\"\n"
"\t system))"
msgstr ""

#: in/DescrLargeSystems.htm:2919
msgid ""
"(defmethod process-option ((system system) option-name &amp;rest option-"
"args)\n"
"  (error \"The required method PROCESS-OPTION is not implemented by ~S.\"\n"
"\t system))"
msgstr ""

#: in/DescrLargeSystems.htm:2923
msgid ""
"(defmethod source-files ((system system))\n"
"  (error \"The required method SOURCE-FILES is not implemented by ~S.\"\n"
"\t system))"
msgstr ""

#: in/DescrLargeSystems.htm:2927
msgid ""
"(defmethod generate-plan ((system system) plan-key &amp;rest plan-args)\n"
"  (error \"The required method GENERATE-PLAN is not implemented by ~S.\"\n"
"\t system))"
msgstr ""

#: in/DescrLargeSystems.htm:2931
msgid ""
"(defmethod explain-plan ((system system) plan)\n"
"  (error \"The required method EXPLAIN-PLAN is not implemented by ~S.\"\n"
"\t system))"
msgstr ""

#: in/DescrLargeSystems.htm:2935
msgid ""
"(defmethod execute-plan ((system system) plan)\n"
"  (error \"The required method EXECUTE-PLAN is not implemented by ~S.\"\n"
"\t system))"
msgstr ""

#: in/DescrLargeSystems.htm:2939
msgid ""
"(defmethod explain-action ((system system) action-name &amp;rest action-"
"args)\n"
"  (error \"The required method EXPLAIN-ACTION is not implemented by ~S.\"\n"
"\t system))"
msgstr ""

#: in/DescrLargeSystems.htm:2943
msgid ""
"(defmethod execute-action ((system system) action-name &amp;rest action-"
"args)\n"
"  (error \"The required method EXECUTE-ACTION is not implemented by ~S.\"\n"
"\t system))"
msgstr ""

#: in/DescrLargeSystems.htm:2946
msgid ""
"<hr width=\"20%\" align=\"left\">\n"
";;;; Vanilla System"
msgstr ""

#: in/DescrLargeSystems.htm:2952
msgctxt "in/DescrLargeSystems.htm:2952"
msgid ""
";;; VANILLA-SYSTEM\n"
";;;\n"
";;; A vanilla system knows about names and how to process options,\n"
";;; but has no interesting options it is willing to process that would\n"
";;; make it useful as something to instantiate."
msgstr ""
";;; VANILLA-SYSTEM\n"
";;;\n"
";;; vanilla system знает об именах и способах обработки опций \n"
";;; но не имеет интересных вариантов, котоыре она готова обработать\n"
";;; сделать её полезным как что то, как создать экзепляр."

#: in/DescrLargeSystems.htm:2960
msgid ""
"(defclass vanilla-system (system)\n"
"  ((short-name :initarg :short-name \n"
"\t       :accessor short-name\n"
"\t       :initform nil)\n"
"   (full-name  :initarg :full-name\n"
"\t       :accessor full-name\n"
"\t       :initform nil)))"
msgstr ""

#: in/DescrLargeSystems.htm:2965
msgid ""
";;; (NAME vanilla-system)\n"
";;;\n"
";;; Returns the name of the system\n"
";;; Long name is preferred over short name where both are available."
msgstr ""
";;; (NAME vanilla-system)\n"
";;;\n"
";;; Возвращает имя системы\n"
";;; Длинное имя предпочтительнее короткого имени, но оба доступны."

#: in/DescrLargeSystems.htm:2968
msgid ""
"(defmethod name ((system vanilla-system))\n"
"  (or (full-name system) (short-name system)))"
msgstr ""

#: in/DescrLargeSystems.htm:2974
msgid ""
";;; (PRINT-OBJECT vanilla-system stream)\n"
";;;\n"
";;; For debugging convenience,\n"
";;; (PRIN1 mysys) types something like: #&lt;SYSTEM \"My System\" "
"343324&gt;\n"
";;; (PRINC mysys) types something like: My System"
msgstr ""
";;; (PRINT-OBJECT vanilla-system stream)\n"
";;;\n"
";;; Для удобства отладки,\n"
";;; (PRIN1 mysys) печатает что то вроде: #&lt;SYSTEM \"My System\" "
"343324&gt;\n"
";;; (PRINC mysys) печатает что то вроде: My System"

#: in/DescrLargeSystems.htm:2981
msgid ""
"(defmethod print-object ((system vanilla-system) stream)\n"
"  (let ((my-name (name system)))\n"
"    (if *print-escape*\n"
"\t(print-unreadable-object (system stream :type t :identity t)\n"
"          (format stream \"~S\" my-name))\n"
"\t(format stream \"~A\" my-name))))"
msgstr ""

#: in/DescrLargeSystems.htm:2986
msgid ""
";;; (DESCRIBE-OBJECT vanilla-system stream)\n"
";;;\n"
";;; Does that part of the explanation relevant to the class.\n"
";;; Other classes mixing this in should use :AFTER or :BEFORE methods."
msgstr ""
";;; (DESCRIBE-OBJECT vanilla-system stream)\n"
";;;\n"
";;; Имеет ли эта часть объяснение уместное для класса.\n"
";;; Другие классы, примешанные к данному должны использовать методы :AFTER "
"или :BEFORE."

#: in/DescrLargeSystems.htm:2995
msgid ""
"(defmethod describe-object ((system vanilla-system) stream)\n"
"  (with-slots (full-name short-name) system\n"
"    (format stream \"~2&amp;~S:~%The system named ~A~@[, or ~A,~] is of "
"class ~S.~%\" \n"
"\t    system \n"
"            full-name \n"
"            (unless (equal full-name short-name) short-name)\n"
"            (class-of system))\n"
"    system))"
msgstr ""

#: in/DescrLargeSystems.htm:2998
msgid ""
"<hr width=\"20%\" align=\"left\">\n"
";;;; Options Facility"
msgstr ""
"<hr width=\"20%\" align=\"left\">\n"
";;;; Средства работы с Опциями(Options Facility)"

#: in/DescrLargeSystems.htm:3002
msgid ""
";;; (PROCESS-OPTIONS vanilla-system options)\n"
";;;\n"
";;; Maps across the given options, digesting them."
msgstr ""
";;; (PROCESS-OPTIONS vanilla-system options)\n"
";;;\n"
";;; Отображение в соответствии с заданными параметрами(опциям) и их "
"обработка."

#: in/DescrLargeSystems.htm:3007
msgid ""
"(defmethod process-options ((system vanilla-system) options)\n"
"  (dolist (data options)\n"
"    (apply #'process-option system (car data) (cdr data)))\n"
"  system)"
msgstr ""

#: in/DescrLargeSystems.htm:3014
msgid ""
";;; (PROCESS-OPTION vanilla-system opt-name .  opt-args)\n"
";;;\n"
";;; :NAME Sets defaults for all name types.\n"
";;; :SHORT-NAME Sets the short name (overrides :NAME if given).\n"
";;; :LONG-NAME Sets the long name (overrides :NAME if given).\n"
";;; otherwise Signals an error."
msgstr ""
";;; (PROCESS-OPTION vanilla-system opt-name .  opt-args)\n"
";;;\n"
";;; :NAME Устанавливает значение по умолчанию для всех типов имен.\n"
";;; :SHORT-NAME Устанавливает короткое имя (переопределяет :NAME, если оно "
"задано).\n"
";;; :LONG-NAME Устанавиливает длинное имя (переопределяет  :NAME, если оно "
"задано).\n"
";;; в противном случае сигнализирует об ошибке."

#: in/DescrLargeSystems.htm:3020
msgid ""
"(defmethod process-option ((system vanilla-system) (key (eql :name)) &amp;"
"rest data)\n"
"  (with-slots (short-name full-name) system\n"
"    (destructuring-bind (datum) data\n"
"      (if (not short-name) (setq short-name (string datum)))\n"
"      (if (not full-name)  (setq full-name  (string datum))))))"
msgstr ""

#: in/DescrLargeSystems.htm:3025
msgid ""
"(defmethod process-option ((system vanilla-system) (key (eql :short-name)) "
"&amp;rest data)\n"
"  (with-slots (short-name full-name) system\n"
"    (destructuring-bind (datum) data\n"
"      (setq short-name (string datum)))))"
msgstr ""

#: in/DescrLargeSystems.htm:3030
msgid ""
"(defmethod process-option ((system vanilla-system) (key (eql :full-name)) "
"&amp;rest data)\n"
"  (with-slots (short-name full-name) system\n"
"    (destructuring-bind (datum) data\n"
"      (setq full-name (string datum)))))"
msgstr ""

#: in/DescrLargeSystems.htm:3034
msgid ""
"(defmethod process-option ((system vanilla-system) (key t) &amp;rest data)\n"
"  (error \"The option ~S is not known to ~S.~%Data: ~S\"\n"
"         key system data))"
msgstr ""

#: in/DescrLargeSystems.htm:3037
msgid ""
"<hr width=\"20%\" align=\"left\">\n"
";;;; Planning/Executing Actions"
msgstr ""
"<hr width=\"20%\" align=\"left\">\n"
";;;; Планирование/Выполннение Действий(Planning/Executing Actions)"

#: in/DescrLargeSystems.htm:3054
msgid ""
";;; (GENERATE-PLAN vanilla-system action . data)\n"
";;;\n"
";;; This method returns abstract information about how to perform\n"
";;; a specified ACTION. The reply is in the form of a list of the\n"
";;; form ((ACTION-KEY .  ACTION-ARGS1) (ACTION-KEY .  ACTION-ARGS2) ...),\n"
";;; such that executing EXECUTE-ACTION (or EXPLAIN-ACTION) of each \n"
";;; ACTION-KEY (with the given ACTION-ARGS) to the object in order will\n"
";;; accomplish the action in question.\n"
";;;\n"
";;;  :UPDATE       How to compile (or otherwise update) the system,\n"
";;;  :INSTANTIATE  How to load (or otherwise instantiate) the system.\n"
";;;\n"
";;;  Otherwise     An error results if the action isn't defined.\n"
";;;                (Subclasses of this class might provide additional\n"
";;;                action-keys, provided they also manage EXECUTE-ACTION\n"
";;;                and EXPLAIN-ACTION accordingly.)"
msgstr ""
";;; (GENERATE-PLAN vanilla-system action . data)\n"
";;;\n"
";;; Этот метод возвращает абстрактную информацию о том, как выполнить\n"
";;; указанное действие(ACTION). Ответ выдается в форме списка\n"
";;; ((ACTION-KEY .  ACTION-ARGS1) (ACTION-KEY .  ACTION-ARGS2) ...),\n"
";;; такого, что выполнение EXECUTE-ACTION (или EXPLAIN-ACTION) для каждого \n"
";;; ACTION-KEY (с заданными аргументами ACTION-ARGS) к объекту в заданном "
"порядке\n"
";;; выполняет действие, о котором идет речь.\n"
";;;\n"
";;;  :UPDATE       Как компилировать (или по другому изменять) сисетму,\n"
";;;  :INSTANTIATE  Как загружать (или по иному создавать работающую версию) "
"систему.\n"
";;;\n"
";;;  В противном случае     возникает ошибка, если дейстивие не определено.\n"
";;;                (Подклассы этого класса могут пердоставить "
"дополнительные\n"
";;;                ключи-действия(action-keys), если они также управляют "
"EXECUTE-ACTION\n"
";;;                и EXPLAIN-ACTION соответственно.)"

#: in/DescrLargeSystems.htm:3065
msgid ""
"(defmethod generate-plan ((system vanilla-system) (key t) &amp;rest data)\n"
"  (error \"The object ~S does not know how to ~S.~\n"
"     ~%~@[Perhaps you want to use ~A instead?~\n"
"      ~%~]Data: ~S\"\n"
"         system\n"
"         key\n"
"         (case key\n"
"           ((:load)    :instantiate)\n"
"           ((:compile) :update))\n"
"         data))"
msgstr ""

#: in/DescrLargeSystems.htm:3072
msgid ""
";;; (EXECUTE-PLAN vanilla-system plan)\n"
";;;\n"
";;; The steps of the plan are executed.\n"
";;;\n"
";;; PLAN may be either a plan name (a symbol) or a list of steps\n"
";;; such as that returned by GENERATE-PLAN."
msgstr ""
";;; (EXECUTE-PLAN vanilla-system plan)\n"
";;;\n"
";;; Шаги для выполнения плана.\n"
";;;\n"
";;; PLAN может быть именем плана (символом) или списком шагов\n"
";;; таких как возврат из GENERATE-PLAN."

#: in/DescrLargeSystems.htm:3080
msgid ""
"(defmethod execute-plan ((system vanilla-system) plan)\n"
"  (cond ((symbolp plan)\n"
"         (execute-plan system (generate-plan system plan)))\n"
"        (t\n"
"         (dolist (step plan)\n"
"           (apply #'execute-action system step))))\n"
"  system)"
msgstr ""

#: in/DescrLargeSystems.htm:3087
msgid ""
";;; (EXPLAIN-PLAN vanilla-system plan)\n"
";;;\n"
";;; The steps of the PLAN are explained.\n"
";;;\n"
";;; PLAN may be either a plan name (a symbol) or a list of steps\n"
";;; such as that returned by GENERATE-PLAN."
msgstr ""
";;; (EXPLAIN-PLAN vanilla-system plan)\n"
";;;\n"
";;; Шаги объясняющие PLAN.\n"
";;;\n"
";;; PLAN может быть именем плана (символом) или списком шагов\n"
";;; таких как возврат из GENERATE-PLAN."

#: in/DescrLargeSystems.htm:3095
msgid ""
"(defmethod explain-plan ((system vanilla-system) plan)\n"
"  (cond ((symbolp plan)\n"
"         (explain-plan system (generate-plan system plan)))\n"
"        (t\n"
"         (dolist (step plan)\n"
"           (apply #'explain-action system step))))\n"
"  system)"
msgstr ""

#: in/DescrLargeSystems.htm:3107
msgid ""
";;; (EXECUTE-ACTION vanilla-system key .  data)\n"
";;; (EXPLAIN-ACTION vanilla-system key .  data)\n"
";;;\n"
";;; EXECUTE-ACTION causes a given action to occur.\n"
";;;\n"
";;; EXPLAIN-ACTION describes what a given action would do if performed.\n"
";;;\n"
";;; The action key should be one of:\n"
";;;  :LOAD      Load a (Lisp) file.\n"
";;;  :COMPILE   Compile a (Lisp) file.\n"
";;;  Otherwise  it's an error."
msgstr ""
";;; (EXECUTE-ACTION vanilla-system key .  data)\n"
";;; (EXPLAIN-ACTION vanilla-system key .  data)\n"
";;;\n"
";;; EXECUTE-ACTION вызывает выполнение определенного действия.\n"
";;;\n"
";;; EXPLAIN-ACTION описывает, что быдут делать данное действие в случае его "
"выполнения.\n"
";;;\n"
";;; Ключ действия должен быть одним из:\n"
";;;  :LOAD      Загрузить файл (Lisp).\n"
";;;  :COMPILE   Скомпилировать файл (Lisp).\n"
";;;  В противном случае это ошибка."

#: in/DescrLargeSystems.htm:3111
msgid ""
"(defmethod execute-action ((system vanilla-system) (key (eql :load)) &amp;"
"rest data)\n"
"  (destructuring-bind (file) data\n"
"    (load file)))"
msgstr ""

#: in/DescrLargeSystems.htm:3115
msgid ""
"(defmethod execute-action ((system vanilla-system) (key (eql :compile)) &amp;"
"rest data)\n"
"  (destructuring-bind (file) data\n"
"    (compile-file file)))"
msgstr ""

#: in/DescrLargeSystems.htm:3119
msgid ""
"(defmethod execute-action ((system vanilla-system) (key t) &amp;rest data)\n"
"  (error \"The action ~S is not known to ~S.~%Data: ~S\"\n"
"         key system data))"
msgstr ""

#: in/DescrLargeSystems.htm:3125
msgid ""
";;; (EXPLAIN-ACTION vanilla-system key . data)\n"
";;;\n"
";;; If the action is valid but a description wasn't available, try\n"
";;; to conjure up a plausible description based on the name of the\n"
";;; action and its arguments."
msgstr ""
";;; (EXPLAIN-ACTION vanilla-system key . data)\n"
";;;\n"
";;; Если действие действительно, но описание не доступно, попробуем\n"
";;; придумать правдоподобное описание на основе имени действия и его\n"
";;; аргументов."

#: in/DescrLargeSystems.htm:3138
msgid ""
"(defmethod explain-action ((system vanilla-system) (key t) &amp;rest data)\n"
"  (cond ((not \n"
"          (let ((spec2 `(eql ,key)))\n"
"            (dolist (class (class-precedence-list (class-of system)))\n"
"              ;; FIND-METHOD works on the exact class with no inheritance,\n"
"              ;; so we must simulate inheritance dynamically.\n"
"              (if (find-method #'execute-action '() (list class spec2) nil)\n"
"                  (return t)))))\n"
"         (error \"The action ~S is not known to ~S, so can't describe it.~"
"%Data: ~S\"\n"
"                key system data))\n"
"        (t (format t \"~&amp;~A~@[ ~{~A~^, ~}.~]~%\"\n"
"                   (string-capitalize key) data))))"
msgstr ""

#: in/DescrLargeSystems.htm:3141
msgid ""
"<hr width=\"20%\" align=\"left\">\n"
";;;; Simple System"
msgstr ""
"<hr width=\"20%\" align=\"left\">\n"
";;;; Простая Система(Simple System)"

#: in/DescrLargeSystems.htm:3146
msgctxt "in/DescrLargeSystems.htm:3146"
msgid ""
";;; SIMPLE-SYSTEM\n"
";;;\n"
";;; A simple system is a system which has left-to-right file\n"
";;; dependencies."
msgstr ""
";;; SIMPLE-SYSTEM\n"
";;;\n"
";;; Простая система это система, которая имеет зависимость между файлами\n"
";;; записанную(определяемую) слева на право."

#: in/DescrLargeSystems.htm:3151
msgid ""
"(defclass simple-system (vanilla-system)\n"
"  ((source-files :initarg :source-files\n"
"                 :reader source-files\n"
"                 :initform '())))"
msgstr ""

#: in/DescrLargeSystems.htm:3155
msgid ""
";;; (DESCRIBE-OBJECT simple-system) :AFTER\n"
";;;\n"
";;; Tacks on some information about the files which make up this system."
msgstr ""
";;; (DESCRIBE-OBJECT simple-system) :AFTER\n"
";;;\n"
";;; Указывает на некоторую информацию о файлах, которые составляют систему."

#: in/DescrLargeSystems.htm:3159
msgid ""
"(defmethod describe-object :after ((system simple-system) stream)\n"
"  (format stream \"~&amp;It has source files~{~&lt;~%~1:; ~A~&gt;~^,~}.~%"
"\" \n"
"          (source-files system)))"
msgstr ""

#: in/DescrLargeSystems.htm:3164
msgid ""
";;; (PROCESS-OPTIONS simple-system options)\n"
";;;\n"
";;; The only options allowed to a simple system is a list of file\n"
";;; names with left-to-right ordering dependencies."
msgstr ""
";;; (PROCESS-OPTIONS simple-system options)\n"
";;;\n"
";;; Единственная опция, разрешенная для простой системы это список имён "
"файлов\n"
";;; упорядоченными по их зависимости слева на право."

#: in/DescrLargeSystems.htm:3175
msgid ""
"(defmethod process-options ((system simple-system) options)\n"
"  (with-slots (source-files) system\n"
"    (when options\n"
"      (setq source-files '())\n"
"      (let ((default-pathname (merge-pathnames (car options))))\n"
"\t(dolist (file options)\n"
"\t  (setq default-pathname (merge-pathnames file default-pathname))\n"
"\t  (push default-pathname source-files))\n"
"\t(setq source-files (nreverse source-files)))\n"
"      t)))"
msgstr ""

#: in/DescrLargeSystems.htm:3180
msgid ""
";;; (GENERATE-PLAN simple-system :UPDATE)\n"
";;;\n"
";;; To update this kind of system, one must compile and load each\n"
";;; of its files in sequence."
msgstr ""
";;; (GENERATE-PLAN simple-system :UPDATE)\n"
";;;\n"
";;; Чтобы обновить систему такого типа, нужно скомпилировать и загрузить "
"каждый\n"
";;; её файл в заданной последовательности."

#: in/DescrLargeSystems.htm:3186
msgid ""
"(defmethod generate-plan ((system simple-system) (key (eql :update)) &amp;"
"rest data)\n"
"  (mapcan #'(lambda (file)\n"
"              (list (list ':compile file)\n"
"                    (list ':load (compile-file-pathname file))))\n"
"          (source-files system)))"
msgstr ""

#: in/DescrLargeSystems.htm:3191
msgid ""
";;; (GENERATE-PLAN simple-system :INSTANTIATE)\n"
";;;\n"
";;; To instantiate this kind of system, one must simply load each\n"
";;; of its files in sequence."
msgstr ""
";;; (GENERATE-PLAN simple-system :INSTANTIATE)\n"
";;;\n"
";;; Чтобы создать работающий экземпляр такой системы надо просто загрузить\n"
";;; какждый её файл в указанной последовательности."

#: in/DescrLargeSystems.htm:3196
msgid ""
"(defmethod generate-plan ((system simple-system) (key (eql :instantiate)) "
"&amp;rest data)\n"
"  (mapcan #'(lambda (file)\n"
"              (list (list ':load (make-pathname :type nil :defaults "
"file))))\n"
"          (source-files system)))"
msgstr ""

#: in/DescrLargeSystems.htm:3199
msgid ""
"<hr width=\"20%\" align=\"left\">\n"
";;;; Pre-Planned System"
msgstr ""

#: in/DescrLargeSystems.htm:3204
msgctxt "in/DescrLargeSystems.htm:3204"
msgid ""
";;; PREPLANNED-SYSTEM\n"
";;;\n"
";;; A preplanned system is a system which has its plans for manipulation\n"
";;; specified explicitly rather than inferred."
msgstr ""
";;; PREPLANNED-SYSTEM\n"
";;;\n"
";;; Запланированная система - это система, которая имеет план для "
"управления\n"
";;; указанный явно, а не выведенный из чего-либо."

#: in/DescrLargeSystems.htm:3208
msgid ""
"(defclass preplanned-system (vanilla-system)\n"
"  ((source-files :initarg :files :accessor source-files :initform '() )\n"
"   (system-plans :initarg :plans                        :initform '() )))"
msgstr ""

#: in/DescrLargeSystems.htm:3213
msgid ""
";;; (PROCESS-OPTIONS preplanned-system options)\n"
";;;\n"
";;; The clauses in the DEFINE-SYSTEM for this kind of system are\n"
";;; just (&lt;plan-name&gt; .  &lt;commands&gt;)."
msgstr ""
";;; (PROCESS-OPTIONS preplanned-system options)\n"
";;;\n"
";;; Предложения(пункты) DEFINE-SYSTEM для этого типа системы\n"
";;; это просто имя плана - команда (&lt;plan-name&gt; .  &lt;commands&gt;)."

#: in/DescrLargeSystems.htm:3218
msgid ""
"(defmethod process-options ((system preplanned-system) options)\n"
"  (with-slots (source-files system-plans) system\n"
"    (setq source-files (car options))\n"
"    (setq system-plans (cdr options))))"
msgstr ""

#: in/DescrLargeSystems.htm:3222
msgid ""
";;; (GENERATE-PLAN preplanned-system operation)\n"
";;;\n"
";;; This does simple table-lookup to find the plan."
msgstr ""
";;; (GENERATE-PLAN preplanned-system operation)\n"
";;;\n"
";;; Здесь выполняется простой поиск в таблице, чтобы найти план."

#: in/DescrLargeSystems.htm:3229
msgid ""
"(defmethod generate-plan ((system preplanned-system) operation &amp;rest "
"data)\n"
"  (check-type data null)\n"
"  (with-slots (system-plans) system\n"
"    (let ((entry (assoc operation system-plans)))\n"
"      (cond (entry (cdr entry))\n"
"            (t (error \"No plan for operation ~S\" operation))))))"
msgstr ""

#: in/DescrLargeSystems.htm:3233
msgid ""
"<hr width=\"20%\" align=\"left\">\n"
";;;; Modular System"
msgstr ""
"<hr width=\"20%\" align=\"left\">\n"
";;;; Модульная Система(Modular System)"

#: in/DescrLargeSystems.htm:3238
msgctxt "in/DescrLargeSystems.htm:3238"
msgid ""
";;; MODULAR-SYSTEM\n"
";;;\n"
";;; A modular system is a system which allows specification of\n"
";;; inter-module dependencies, both implicit and explicit."
msgstr ""
";;; MODULAR-SYSTEM\n"
";;;\n"
";;; Модульная система позволяет указывать межмодульные зависимости,\n"
";;; как явные, так и не явные."

#: in/DescrLargeSystems.htm:3243
msgid ""
"(defclass modular-system (vanilla-system)\n"
"  ((modules :initarg :modules\n"
"            :accessor modules\n"
"            :initform '())))"
msgstr ""

#: in/DescrLargeSystems.htm:3249
msgid ""
";;; (DESCRIBE-SYSTEM modular-system stream) :AFTER\n"
";;;\n"
";;; When a modular system is described, we tack on information\n"
";;; saying how many modules it has and then we ask each module\n"
";;; to describe itself."
msgstr ""
";;; (DESCRIBE-SYSTEM modular-system stream) :AFTER\n"
";;;\n"
";;; Когда описывается модульная система, мы обращаем внимание на информацию\n"
";;; говорящую, сколько у неё модулей, а затем мы просим каждый модуль\n"
";;; описать себя."

#: in/DescrLargeSystems.htm:3256
msgid ""
"(defmethod describe-system :after ((system modular-system) stream)\n"
"  (let* ((m-list (modules system)) (n (length m-list)))\n"
"    (format stream \"~&amp;It has ~D module~:P~C~%\"\n"
"\t    n (if (= n 0) #\\. #\\:))\n"
"    (dolist (m m-list)\n"
"      (describe m))))"
msgstr ""

#: in/DescrLargeSystems.htm:3260
msgid ""
";;; (GET-MODULE modular-system name)\n"
";;;\n"
";;; Returns the component module with the given name (or NIL if none)."
msgstr ""
";;; (GET-MODULE modular-system name)\n"
";;;\n"
";;; Возвращает компонентный модуль с заданным именем (или NIL если его нет)."

#: in/DescrLargeSystems.htm:3264
msgid ""
"(defmethod get-module ((system modular-system) name)\n"
"  (dolist (m (modules system))\n"
"    (if (eq (name m) name) (return m))))"
msgstr ""

#: in/DescrLargeSystems.htm:3268
msgid ""
";;; (SOURCE-FILES modular-system)\n"
";;;\n"
";;; Returns a list of the source files for the system."
msgstr ""
";;; (SOURCE-FILES modular-system)\n"
";;;\n"
";;; Возвращает список исходный файлов для системы."

#: in/DescrLargeSystems.htm:3271
msgid ""
"(defmethod source-files ((system modular-system))\n"
"  (apply #'append (mapcar #'source-files (modules system))))"
msgstr ""

#: in/DescrLargeSystems.htm:3276
msgid ""
";;; (PROCESS-OPTION modular-system module .  spec)\n"
";;;\n"
";;; Declares how to handle the :MODULE option.  Creates an object\n"
";;; of type MODULE and lets it process the associated spec."
msgstr ""
";;; (PROCESS-OPTION modular-system module .  spec)\n"
";;;\n"
";;; Объявляет как обрабатывать опцию :MODULE.  Создает объект\n"
";;; типа MODULE и позволяет ему обрабатывать связанные с ним "
"спецификации(spec)."

#: in/DescrLargeSystems.htm:3284
msgid ""
"(defmethod process-option ((system modular-system) (key (eql :module)) &amp;"
"rest spec)\n"
"  (with-slots (modules) system\n"
"    (setq modules\n"
"          (nconc modules\n"
"                 (list (make-instance 'module\n"
"\t\t\t\t      :system system\n"
"\t\t\t\t      :spec spec))))))"
msgstr ""

#: in/DescrLargeSystems.htm:3288
msgid ""
"<hr width=\"20%\" align=\"left\">\n"
";;;; Module"
msgstr ""
"<hr width=\"20%\" align=\"left\">\n"
";;;; Модуль(Module)"

#: in/DescrLargeSystems.htm:3293
msgctxt "in/DescrLargeSystems.htm:3293"
msgid ""
";;; MODULE\n"
";;;\n"
";;; A module is a collection of files to be used as a building\n"
";;; block for modular systems."
msgstr ""
";;; MODULE\n"
";;;\n"
";;; Модуль представляет собой набор файлов, которые будут использоваться "
"как \n"
";;; единый строительный блок для модульной системы."

#: in/DescrLargeSystems.htm:3302
msgid ""
"(defclass module ()\n"
"  ((name         :initarg :name         :accessor name              :"
"initform nil)\n"
"   (system       :initarg :system       :accessor module-system     :"
"initform nil)\n"
"   (spec         :initarg :spec         :accessor module-spec       :"
"initform nil)\n"
"   (source-files :initarg :source-files :accessor source-files      :"
"initform '())\n"
"   (assertions   :initarg :assertions   :accessor module-assertions :"
"initform '())\n"
"   (needs        :initarg :needs        :accessor module-needs      :"
"initform '())\n"
"   (causes       :initarg :causes       :accessor module-causes     :"
"initform '())))"
msgstr ""

#: in/DescrLargeSystems.htm:3306
msgid ""
";;; (INITIALIZE-INSTANCE module &amp;key) :AFTER\n"
";;;\n"
";;; See to it that if SPEC was given, it gets appropriately processed."
msgstr ""
";;; (INITIALIZE-INSTANCE module &amp;key) :AFTER\n"
";;;\n"
";;; Смотрите за тем, чтобы если SPEC был задан, он обрабатывался "
"соответствующим образом."

#: in/DescrLargeSystems.htm:3309
msgid ""
"(defmethod initialize-instance :after ((module module) &amp;key)\n"
"  (process-spec module (module-spec module)))"
msgstr ""

#: in/DescrLargeSystems.htm:3315
msgid ""
";;; (PRINT-OBJECT module stream)\n"
";;;\n"
";;; For debugging convenience.\n"
";;; (PRIN1 mod) types something like: #&lt;Module MYSYS*MOD1 234567&gt;\n"
";;; (PRINC mod) types something like: MOD1"
msgstr ""
";;; (PRINT-OBJECT module stream)\n"
";;;\n"
";;; Для удобства отладки.\n"
";;; (PRIN1 mod) печатает что то типа: #&lt;Module MYSYS*MOD1 234567&gt;\n"
";;; (PRINC mod) печатает что то типа: MOD1"

#: in/DescrLargeSystems.htm:3324
msgid ""
"(defmethod print-object ((module module) stream)\n"
"  (with-slots (name system) module\n"
"    (if *print-escape*\n"
"\t(print-unreadable-object (module stream :type t :identity t)\n"
"\t  (format stream \"~@[~A*~]~:[Anonymous~;~:*~A~]\"\n"
"\t\t  (if system (short-name system))\n"
"\t\t  name))\n"
"      (format stream \"~A\" name))))"
msgstr ""

#: in/DescrLargeSystems.htm:3329
msgid ""
";;; (DESCRIBE-OBJECT module stream)\n"
";;;\n"
";;; Details the source files and dependency information\n"
";;; for the module."
msgstr ""
";;; (DESCRIBE-OBJECT module stream)\n"
";;;\n"
";;; Подробности о исходных файлах и информация о зависимостях\n"
";;; для модуля."

#: in/DescrLargeSystems.htm:3339
msgid ""
"(defmethod describe-object ((module module) stream)\n"
"  (with-slots (needs source-files system) module\n"
"    (format stream \"~2&amp; ~A~@[  ~{~%~A~^.~}~]~%\" module source-files)\n"
"    (do ((n needs (cddr n)))\n"
"        ((null n))\n"
"      (format t \"~&amp; ~S dependenc~@P: ~{~S~^, ~}.~%\"\n"
"              (car n) (length (cadr n)) (cadr n)))\n"
"    (format t \"~&amp;\")\n"
"    system))"
msgstr ""

#: in/DescrLargeSystems.htm:3355
msgid ""
";;; (PROCESS-SPEC module spec)\n"
";;;\n"
";;; Process the given SPEC absorbing relevant info.\n"
";;;\n"
";;; The NAME is only absorbed if name info isn't already set up.\n"
";;; This is because :PROCESS-SPEC may be recursively called on others'\n"
";;; assertion lists if there are included modules with specs of their\n"
";;; own.  In such case, we want to accept their attributes, but not\n"
";;; their names.\n"
";;;\n"
";;; The ASSERTIONS are processed next, because presumably they specify\n"
";;; prerequisites for this module and any files they need loaded should\n"
";;; get set up before we set up the files particular to this module.\n"
";;;\n"
";;; Finally, the FILES associated with this module are processed."
msgstr ""
";;; (PROCESS-SPEC module spec)\n"
";;;\n"
";;; Обрабатывает данный SPEC впитывая соответствующую информацию.\n"
";;;\n"
";;; NAME принимается только в том случае, если информация об имени еще не "
"настроена.\n"
";;; Это потому, что :PROCESS-SPEC может быть рекурсивно вызван для других "
"списков\n"
";;; утверждений, если есть включенные модули со своими спецификациями.\n"
";;; В этом случае, мы хотим принять их атрибуты, но не их имена.\n"
";;;\n"
";;; Утверждения(ASSERTIONS) обрабатываются следующими, потому что они, "
"вероятно, указывают\n"
";;; предварительные условия для этого модуля и любых файлов, которые ему "
"нужны для загрузки,\n"
";;; получить настройки прежде чем мы настроим файлы для этого модуля.\n"
";;;\n"
";;; Наконец, файлы(FILES) связанные с этим модулем обрабатываются."

#: in/DescrLargeSystems.htm:3362
msgid ""
"(defmethod process-spec ((module module) s)\n"
"  (with-slots (name) module\n"
"    (when s\n"
"      (if (not name) (setq name (car s)))\n"
"      (process-assertions module (cddr s))\n"
"      (process-files module (cadr s)))))"
msgstr ""

#: in/DescrLargeSystems.htm:3366
msgid ""
";;; (PROCESS-FILES module files-list)\n"
";;;\n"
";;; Adds file info given in FILES-LIST to the module's master FILES list."
msgstr ""
";;; (PROCESS-FILES module files-list)\n"
";;;\n"
";;; Добавляет информацию о файле, указанную в списке файлов(FILES-LIST) в "
"основной список FILES."

#: in/DescrLargeSystems.htm:3379
msgid ""
"(defmethod process-files ((module module) files-list)\n"
"  (with-slots (source-files system) module\n"
"    (if (atom files-list) (setq files-list (list files-list)))\n"
"    (dolist (file files-list)\n"
"      (cond ((typep file 'pathname)\n"
"\t     (setq source-files (nconc source-files (list file))))\n"
"\t    ((stringp file)\n"
"\t     (setq source-files (nconc source-files (list (parse-namestring "
"file)))))\n"
"\t    ((symbolp file)\n"
"\t     (process-spec system (module-spec (get-module system file))))\n"
"\t    (t\n"
"\t     (error \"Bad object in file list: ~S - ~S\" file system))))))"
msgstr ""

#: in/DescrLargeSystems.htm:3383
msgid ""
";;; (PROCESS-ASSERTIONS module spec)\n"
";;;\n"
";;; Iterates across assertions, processing each."
msgstr ""
";;; (PROCESS-ASSERTIONS module spec)\n"
";;;\n"
";;; Перебирает утверждения(assertions), обрабатывая каждое."

#: in/DescrLargeSystems.htm:3387
msgid ""
"(defmethod process-assertions ((module module) assertion-list)\n"
"  (dolist (assertion assertion-list)\n"
"    (apply #'process-assertion (module-system module) assertion)))"
msgstr ""

#: in/DescrLargeSystems.htm:3398
msgid ""
";;; (PROCESS-ASSERTION module key . data)\n"
";;;\n"
";;; This method is used to process dependency assertions, etc.\n"
";;; for the given module.\n"
";;;\n"
";;; It dispatches further on key:\n"
";;;\n"
";;;  :NEEDS     Declares need to instantiate modules at certain times.\n"
";;;  :CAUSES    Declares assertions to be forwarded to the consumer.\n"
";;;  Otherwise  it's an error."
msgstr ""
";;; (PROCESS-ASSERTION module key . data)\n"
";;;\n"
";;; Этот медот используется для обработки утверждений(assertions) о "
"зависимостях, и т.д.\n"
";;; для данного модуля.\n"
";;;\n"
";;; Далее распределяется в зависимости от ключа:\n"
";;;\n"
";;;  :NEEDS     Объявляет необходимость создания экземпляров модулей в "
"определенное время.\n"
";;;  :CAUSES    Объявляет утверждения, которые будут немедленно направлены "
"потребителю.\n"
";;;  В противном случае ошибка."

#: in/DescrLargeSystems.htm:3410
msgid ""
"(defmethod process-assertion ((module module) (key (eql :needs)) &amp;rest "
"data)\n"
"  (with-slots (needs) module\n"
"    (dolist (item data)\n"
"      (let ((marker (car item)))\n"
"        (dolist (module-name (cdr item))\n"
"          (when (not (member module-name (getf needs marker)))\n"
"            (let ((m (get-module (module-system module) module-name)))\n"
"              ;; This may be overly conservative, but will work...\n"
"              (process-assertions module (module-causes m))\n"
"              (setf (getf needs marker)\n"
"                    (nconc (getf needs marker) (list module-name))))))))))"
msgstr ""

#: in/DescrLargeSystems.htm:3418
msgid ""
"(defmethod process-assertion ((module module) (key (eql :causes)) &amp;rest "
"data)\n"
"  ;; Filtering this is technically unnecessary, but it will keep\n"
"  ;; redefinition from swamping us.\n"
"  (with-slots (causes) module\n"
"    (dolist (item data)\n"
"      (if (not (member item causes :test #'equal))\n"
"          (setf causes (nconc causes (list item)))))))"
msgstr ""

#: in/DescrLargeSystems.htm:3422
msgid ""
"(defmethod process-assertion ((module module) (key t) &amp;rest data)\n"
"  (error \"The ~S assertion is not known to ~S.~%Data: ~S\"\n"
"         key module data))"
msgstr ""

#: in/DescrLargeSystems.htm:3425
msgid ""
"<hr width=\"20%\" align=\"left\">\n"
";;;; User Interface"
msgstr ""
"<hr width=\"20%\" align=\"left\">\n"
";;;; Пользовательский Интерфейс(User Interface)"

#: in/DescrLargeSystems.htm:3431
msgid ""
";;; (CREATE-SYSTEM name type [options])\n"
";;;\n"
";;; Creates a system object of the given TYPE, initializing it with\n"
";;; the given NAME and OPTIONS. Returns the created object without\n"
";;; storing it permanently anywhere."
msgstr ""
";;; (CREATE-SYSTEM name type [options])\n"
";;;\n"
";;; Создает объект системы данного типа(TYPE), инициализируя его с данным\n"
";;; именем(NAME) и опциями(OPTIONS). Возвращает созданный объект без "
"постоянного\n"
";;; сохранения его где бы то нибыло."

#: in/DescrLargeSystems.htm:3437
msgid ""
"(defun create-system (name class &amp;optional options)\n"
"  (let ((system (make-instance class)))\n"
"    (process-option  system :name name)\n"
"    (process-options system options)\n"
"    system))"
msgstr ""

#: in/DescrLargeSystems.htm:3441
msgid ""
";;; (FIND-SYSTEM name)\n"
";;;\n"
";;; Gets the definition of some globally defined system object."
msgstr ""
";;; (FIND-SYSTEM name)\n"
";;;\n"
";;; Получает определение некоторого глобально определенного объекта системы."

#: in/DescrLargeSystems.htm:3449
msgid ""
"(defun find-system-named (system-name &amp;optional (errorp t))\n"
"  (etypecase system-name\n"
"    (system system-name)\n"
"    (symbol (or (get system-name 'system)\n"
"                (if errorp\n"
"                    (error \"System not found: ~S\" system-name)\n"
"                  nil)))))"
msgstr ""

#: in/DescrLargeSystems.htm:3455
msgid ""
"(defun (setf find-system-named) (new-system system-spec) \n"
"  (let ((system-name (etypecase system-spec\n"
"                       (symbol system-spec)\n"
"                       (system (name system-spec)))))\n"
"    (setf (get system-name 'system) new-system)))"
msgstr ""

#: in/DescrLargeSystems.htm:3460
msgctxt "in/DescrLargeSystems.htm:3460"
msgid ""
";;; (DEFINE-SYSTEM name type .  options)\n"
";;;\n"
";;; Creates and initializes a system with the given name.\n"
";;; Stores the definition globally for access later."
msgstr ""
";;; (DEFINE-SYSTEM name type .  options)\n"
";;;\n"
";;; Создает и инициализирует систему с заданным именем.\n"
";;; Сохраняет определение глобально для последующего доступа."

#: in/DescrLargeSystems.htm:3465
msgid ""
"(defmacro define-system (name type &amp;body data)\n"
"  (check-type name symbol \"a packaged symbol naming the system to be defined"
"\")\n"
"  `(setf (find-system-named ',name)\n"
"         (create-system ',name ',type ',data)))"
msgstr ""

#: in/DescrLargeSystems.htm:3468
msgid "</pre>"
msgstr ""

#: in/DescrLargeSystems.htm:3470
msgctxt "in/DescrLargeSystems.htm:3470"
msgid "<hr>"
msgstr ""

#: in/DescrLargeSystems.htm:3472
msgctxt "in/DescrLargeSystems.htm:3472"
msgid "<hr>"
msgstr ""

#: in/DescrLargeSystems.htm:3478
msgid ""
"<p>\n"
"Original printed text document<br>\n"
"<b>Copyright © 1984 Massachusetts Institute of Technology.</b>\n"
"<br>\n"
"</p>"
msgstr ""

#: in/DescrLargeSystems.htm:3482
msgid ""
"<p>\n"
"Republished on the web by Kent M. Pitman with appropriate permission.\n"
"</p>"
msgstr ""

#: in/DescrLargeSystems.htm:3489
msgid ""
"<p>\n"
"HTML hypertext version of document<br>\n"
"<b>Copyright © 2001 Kent M. Pitman.  All rights reserved.</b><br>\n"
"The following limited, non-exclusive, \n"
"revokable licenses are granted:\n"
"</p>"
msgstr ""

#: in/DescrLargeSystems.htm:3498
msgid ""
"<blockquote>\n"
"<p>\n"
"Browsing of this document (that is, transmission and display of a temporary\n"
"copy of this document for the ordinary purpose of direct viewing by a \n"
"human being in the usual manner that hypertext browsers permit such\n"
"viewing) is expressly permitted, provided that no recopying, \n"
"redistribution, redisplay, or retransmission is made of any such copy.\n"
"</p>"
msgstr ""

#: in/DescrLargeSystems.htm:3508
msgid ""
"<p>\n"
"Bookmarking of this document (that is, recording only the document's title "
"and \n"
"Uniform Resource Locator, or URL, but not its content,\n"
"for the purpose of remembering an association between the document's title\n"
"and the URL, and/or for the purpose of making a subsequent request \n"
"for a fresh copy of the content named by that URL)\n"
"is also expressly permitted.\n"
"</p>\n"
"</blockquote>"
msgstr ""

#: in/DescrLargeSystems.htm:3512
msgid ""
"<p>\n"
"All other uses require negotiated permission.\n"
"</p>"
msgstr ""

#: in/DescrLargeSystems.htm:3514
msgctxt "in/DescrLargeSystems.htm:3514"
msgid "</font>"
msgstr ""

#: in/DescrLargeSystems.htm:3516
msgctxt "in/DescrLargeSystems.htm:3516"
msgid "<hr>"
msgstr ""

#: in/DescrLargeSystems.htm:3521
msgid ""
"<p align=\"center\">\n"
"<a href=\"http://www.nhplace.com/kent/Papers/index.html\"><i>Click here for "
"an index \n"
"of other titles by Kent Pitman.</i></a>\n"
"</p>"
msgstr ""

#: in/DescrLargeSystems.htm:3524
msgid "</body></html>"
msgstr ""
